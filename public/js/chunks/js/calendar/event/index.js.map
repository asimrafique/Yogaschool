{"version":3,"file":"js/chunks/js/calendar/event/index.js?id=ac553c059573fb42","mappings":";;;;;;;;;;;;;;AAyKA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AC7LA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7TA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAKA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAQA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAEA;AACA;AAEA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AAAA;AAAA;AAAA;AASA;AAMA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAOA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;AC19BA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AAAA;AAKA;AACA;AACA;AACA;AAOA;AAAA;AAMA;AAAA;AAGA;AAAA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAOA;AAMA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAOA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAqBA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAqBA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAqBA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAqBA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAqBA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAqCA;AAAA;AASA;AAEA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAGA;AAAA;AAAA;AACA;AAoEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAUA;AAmBA;AACA;AACA;AACA;AACA;AACA;AAIA;AAUA;AAmBA;AACA;AACA;AACA;AACA;AACA;AAIA;AAGA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAoCA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAQA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAOA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;ACrmCA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAOA;AAAA;AAGA;AAGA;AAAA;AA6EA;AAAA;AAAA;AAAA;AAKA;AAGA;AACA;AAYA;AAiBA;AAAA;AAAA;AAAA;AAGA;AAGA;AACA;AAYA;AAgBA;AAAA;AAAA;AAAA;AAKA;AAGA;AACA;AAMA;AAiBA;AAAA;AAAA;AAAA;AAKA;AAGA;AACA;AAOA;AASA;AAAA;AA+BA;AACA;AAAA;AAAA;AACA;AAMA;AAAA;AAEA;AAEA;AAAA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAMA;AAKA;AAEA;AAcA;AASA;AAAA;AAYA;AAAA;AACA;AAAA;AAcA;AASA;AACA;AACA;;;;;;;;;;;;;;;;AC1XA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;ACtCA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA","sources":["webpack://InstiKit/resources/js/views/calendar/event/form.vue","webpack://InstiKit/resources/js/views/calendar/event/index.vue","webpack://InstiKit/resources/js/views/calendar/event/show.vue","webpack://InstiKit/resources/js/views/configuration/calendar/event-type/form.vue","webpack://InstiKit/./resources/js/views/calendar/event/form.vue","webpack://InstiKit/./resources/js/views/calendar/event/index.vue","webpack://InstiKit/./resources/js/views/calendar/event/show.vue","webpack://InstiKit/./resources/js/views/configuration/calendar/event-type/form.vue","webpack://InstiKit/./resources/js/views/calendar/event/form.vue?3b4d","webpack://InstiKit/./resources/js/views/calendar/event/form.vue?a297","webpack://InstiKit/./resources/js/views/calendar/event/form.vue?60cc","webpack://InstiKit/./resources/js/views/calendar/event/index.vue?c0a6","webpack://InstiKit/./resources/js/views/calendar/event/show.vue?56cf","webpack://InstiKit/./resources/js/views/configuration/calendar/event-type/form.vue?1011","webpack://InstiKit/./resources/js/views/calendar/event/form.vue?4ea7","webpack://InstiKit/./resources/js/views/calendar/event/index.vue?003e","webpack://InstiKit/./resources/js/views/calendar/event/show.vue?0452","webpack://InstiKit/./resources/js/views/configuration/calendar/event-type/form.vue?3f37","webpack://InstiKit/./resources/js/views/calendar/event/form.vue?ef33","webpack://InstiKit/./resources/js/views/calendar/event/index.vue?9061","webpack://InstiKit/./resources/js/views/configuration/calendar/event-type/form.vue?c6fe","webpack://InstiKit/./resources/js/views/calendar/event/form.vue?829c"],"sourcesContent":["<template>\r\n    <div>\r\n        <form @submit.prevent=\"proceed\" @keydown=\"eventForm.errors.clear($event.target.name)\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12 col-sm-6\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('calendar.event_title')}}</label>\r\n                        <input class=\"form-control\" type=\"text\" v-model=\"eventForm.title\" name=\"title\" :placeholder=\"trans('calendar.event_title')\">\r\n                        <show-error :form-name=\"eventForm\" prop-name=\"title\"></show-error>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12 col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('calendar.event_type')}} </label> <button type=\"button\" class=\"btn btn-xs btn-info pull-right\" v-if=\"hasPermission('access-configuration')\" @click=\"showEventTypeModal = true\">{{trans('general.add_new')}}</button>\r\n                                <v-select label=\"name\" v-model=\"selected_event_type\" name=\"event_type_id\" id=\"event_type_id\" :options=\"event_types\" :placeholder=\"trans('calendar.select_event_type')\" @select=\"onEventTypeSelect\" @close=\"eventForm.errors.clear('event_type_id')\" @remove=\"eventForm.event_type_id = ''\">\r\n                                    <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!event_types.length\">\r\n                                        {{trans('general.no_option_found')}}\r\n                                    </div>\r\n                                </v-select>\r\n                                <show-error :form-name=\"eventForm\" prop-name=\"event_type_id\"></show-error>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-12 col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('calendar.event_venue')}}</label>\r\n                                <input class=\"form-control\" type=\"text\" v-model=\"eventForm.venue\" name=\"venue\" :placeholder=\"trans('calendar.event_venue')\">\r\n                                <show-error :form-name=\"eventForm\" prop-name=\"venue\"></show-error>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12 col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('calendar.event_start_date')}}</label>\r\n                                <label class=\"custom-control custom-checkbox float-right\">\r\n                                    <input type=\"checkbox\" class=\"custom-control-input\" v-model=\"eventForm.no_time\" value=\"1\">\r\n                                    <span class=\"custom-control-label\">{{trans('calendar.event_no_time')}}</span>\r\n                                </label>\r\n                                <datepicker v-model=\"eventForm.start_date\" :bootstrapStyling=\"true\" @selected=\"eventForm.errors.clear('start_date')\" :placeholder=\"trans('calendar.event_start_date')\"></datepicker>\r\n                                <show-error :form-name=\"eventForm\" prop-name=\"start_date\"></show-error>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-12 col-sm-6\" v-if=\"!eventForm.no_time\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('calendar.event_start_time')}}</label>\r\n                                <timepicker :hour.sync=\"start_time.hour\" :minute.sync=\"start_time.minute\" :meridiem.sync=\"start_time.meridiem\"></timepicker>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12 col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('calendar.event_end_date')}}</label>\r\n                                <datepicker v-model=\"eventForm.end_date\" :bootstrapStyling=\"true\" @selected=\"eventForm.errors.clear('end_date')\" :placeholder=\"trans('calendar.event_end_date')\"></datepicker>\r\n                                <show-error :form-name=\"eventForm\" prop-name=\"end_date\"></show-error>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-12 col-sm-6\" v-if=\"!eventForm.no_time\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('calendar.event_end_time')}}</label>\r\n                                <timepicker :hour.sync=\"end_time.hour\" :minute.sync=\"end_time.minute\" :meridiem.sync=\"end_time.meridiem\"></timepicker>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12 col-sm-6\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('calendar.event_audience')}}</label>\r\n                                <select v-model=\"eventForm.audience\" class=\"custom-select col-12\" name=\"audience\" @change=\"eventForm.errors.clear('audience')\">\r\n                                  <option value=null selected>{{trans('general.select_one')}}</option>\r\n                                  <option v-for=\"option in audiences\" v-bind:value=\"option.value\">\r\n                                    {{ option.text }}\r\n                                  </option>\r\n                                </select>\r\n                                <show-error :form-name=\"eventForm\" prop-name=\"audience\"></show-error>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-12 col-sm-6\" v-if=\"eventForm.audience == 'selected_course'\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('academic.course')}}</label>\r\n                                <v-select label=\"name\" track-by=\"id\" v-model=\"selected_courses\" group-values=\"courses\" group-label=\"course_group\" :group-select=\"false\" name=\"course_id\" id=\"course_id\" :options=\"courses\" :placeholder=\"trans('academic.select_course')\" @select=\"onCourseSelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onCourseRemove\" :selected=\"selected_courses\">\r\n                                    <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!courses.length\">\r\n                                        {{trans('general.no_option_found')}}\r\n                                    </div>\r\n                                </v-select>\r\n                                <show-error :form-name=\"eventForm\" prop-name=\"course_id\"></show-error>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-12 col-sm-6\" v-if=\"eventForm.audience == 'selected_batch'\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('academic.batch')}}</label>\r\n                                <v-select label=\"name\" track-by=\"id\" v-model=\"selected_batches\" group-values=\"batches\" group-label=\"course_group\" :group-select=\"false\" name=\"batch_id\" id=\"batch_id\" :options=\"batches\" :placeholder=\"trans('academic.select_batch')\" @select=\"onBatchSelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onBatchRemove\" :selected=\"selected_batches\">\r\n                                    <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!batches.length\">\r\n                                        {{trans('general.no_option_found')}}\r\n                                    </div>\r\n                                </v-select>\r\n                                <show-error :form-name=\"eventForm\" prop-name=\"batch_id\"></show-error>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-12 col-sm-6\" v-if=\"eventForm.audience == 'selected_department'\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('employee.department')}}</label>\r\n                                <v-select label=\"name\" track-by=\"id\" v-model=\"selected_departments\" name=\"department_id\" id=\"department_id\" :options=\"departments\" :placeholder=\"trans('employee.select_department')\" @select=\"onDepartmentSelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onDepartmentRemove\" :selected=\"selected_departments\">\r\n                                    <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!departments.length\">\r\n                                        {{trans('general.no_option_found')}}\r\n                                    </div>\r\n                                </v-select>\r\n                                <show-error :form-name=\"eventForm\" prop-name=\"department_id\"></show-error>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"col-12 col-sm-6\" v-if=\"eventForm.audience == 'selected_employee_category'\">\r\n                            <div class=\"form-group\">\r\n                                <label for=\"\">{{trans('employee.category')}}</label>\r\n                                <v-select label=\"name\" track-by=\"id\" v-model=\"selected_employee_categories\" name=\"employee_category_id\" id=\"employee_category_id\" :options=\"employee_categories\" :placeholder=\"trans('employee.select_category')\" @select=\"onEmployeeCategorySelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onEmployeeCategoryRemove\" :selected=\"selected_employee_categories\">\r\n                                    <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!employee_categories.length\">\r\n                                        {{trans('general.no_option_found')}}\r\n                                    </div>\r\n                                </v-select>\r\n                                <show-error :form-name=\"eventForm\" prop-name=\"employee_category_id\"></show-error>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <file-upload-input :button-text=\"trans('general.upload_document')\" :token=\"eventForm.upload_token\" module=\"event\" :clear-file=\"clearAttachment\" :module-id=\"module_id\"></file-upload-input>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-6\">\r\n                    <div class=\"form-group\">\r\n                        <html-editor name=\"description\" :model.sync=\"eventForm.description\" height=\"300\" :isUpdate=\"uuid ? true : false\" @clearErrors=\"eventForm.errors.clear('description')\"></html-editor>\r\n                        <show-error :form-name=\"eventForm\" prop-name=\"description\"></show-error>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"card-footer text-right\">\r\n                <router-link to=\"/calendar/event\" class=\"btn btn-danger waves-effect waves-light \" v-show=\"uuid\">{{trans('general.cancel')}}</router-link>\r\n                <button v-if=\"!uuid\" type=\"button\" class=\"btn btn-danger waves-effect waves-light \" @click=\"$emit('cancel')\">{{trans('general.cancel')}}</button>\r\n                <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\r\n                    <span v-if=\"uuid\">{{trans('general.update')}}</span>\r\n                    <span v-else>{{trans('general.save')}}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n\r\n        <transition name=\"modal\" v-if=\"showEventTypeModal\">\r\n            <div class=\"modal-mask\">\r\n                <div class=\"modal-wrapper\">\r\n                    <div class=\"modal-container modal-lg\">\r\n                        <div class=\"modal-header\">\r\n                            <slot name=\"header\">\r\n                                {{trans('calendar.add_new_event_type')}}\r\n                                <span class=\"float-right pointer\" @click=\"showEventTypeModal = false\">x</span>\r\n                            </slot>\r\n                        </div>\r\n                        <div class=\"modal-body\">\r\n                            <slot name=\"body\">\r\n                                <event-type-form @completed=\"getPreRequisite\" @cancel=\"showEventTypeModal = false\"></event-type-form>\r\n                                <div class=\"clearfix\"></div>\r\n                            </slot>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </transition>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\n    import eventTypeForm from '../../configuration/calendar/event-type/form'\r\n\r\n    export default {\r\n        components: {eventTypeForm},\r\n        data() {\r\n            return {\r\n                eventForm: new Form({\r\n                    event_type_id: '',\r\n                    title: '',\r\n                    no_time: 0,\r\n                    venue: '',\r\n                    start_date: '',\r\n                    end_date: '',\r\n                    start_time: '',\r\n                    end_time: '',\r\n                    audience: 'everyone',\r\n                    course_id: [],\r\n                    batch_id: [],\r\n                    department_id: [],\r\n                    employee_category_id: [],\r\n                    description: '',\r\n                    upload_token: ''\r\n                }),\r\n                start_time: {\r\n                    hour: '',\r\n                    minute: '',\r\n                    meridiem: 'am'\r\n                },\r\n                end_time: {\r\n                    hour: '',\r\n                    minute: '',\r\n                    meridiem: 'am'\r\n                },\r\n                audiences: [],\r\n                event_types: [],\r\n                selected_event_type: null,\r\n                courses: [],\r\n                selected_courses: null,\r\n                batches: [],\r\n                selected_batches: null,\r\n                departments: [],\r\n                selected_departments: null,\r\n                employee_categories: [],\r\n                selected_employee_categories: null,\r\n                module_id: '',\r\n                clearAttachment: true,\r\n                showEventTypeModal: false\r\n            };\r\n        },\r\n        props: ['uuid'],\r\n        mounted() {\r\n            if(!helper.hasPermission('create-event') && !helper.hasPermission('edit-event')){\r\n                helper.notAccessibleMsg();\r\n                this.$router.push('/dashboard');\r\n            }\r\n\r\n            this.getPreRequisite();\r\n        },\r\n        methods: {\r\n            hasPermission(permission){\r\n                return helper.hasPermission(permission);\r\n            },\r\n            getPreRequisite(){\r\n                let loader = this.$loading.show();\r\n                this.showEventTypeModal = false;\r\n                axios.get('/api/event/pre-requisite')\r\n                    .then(response => {\r\n                        this.event_types = response.event_types;\r\n                        this.audiences = response.audiences;\r\n                        this.courses = response.courses;\r\n                        this.batches = response.batches;\r\n                        this.departments = response.departments;\r\n                        this.employee_categories = response.employee_categories;\r\n                        \r\n                        if(this.uuid)\r\n                            this.get();\r\n                        else\r\n                            this.eventForm.upload_token = this.$uuid.v4();\r\n\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    })\r\n            },\r\n            proceed(){\r\n                if(this.uuid)\r\n                    this.update();\r\n                else\r\n                    this.store();\r\n            },\r\n            store(){\r\n                this.eventForm.start_time = helper.toTime(this.start_time);\r\n                this.eventForm.end_time   = helper.toTime(this.end_time);\r\n                let loader = this.$loading.show();\r\n                this.eventForm.post('/api/event')\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        this.clearAttachment = !this.clearAttachment;\r\n                        this.eventForm.upload_token = this.$uuid.v4();\r\n                        this.selected_event_type = null;\r\n                        this.selected_courses = null;\r\n                        this.selected_batches = null;\r\n                        this.selected_departments = null;\r\n                        this.selected_employee_categories = null;\r\n                        this.$emit('completed');\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            get(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/event/'+this.uuid)\r\n                    .then(response => {\r\n                        this.eventForm.title = response.event.title;\r\n                        this.eventForm.venue = response.event.venue;\r\n                        this.eventForm.start_date = response.event.start_date;\r\n                        this.eventForm.end_date = response.event.end_date;\r\n                        this.eventForm.description = response.event.description;\r\n                        this.eventForm.event_type_id = response.event.event_type_id;\r\n                        this.selected_event_type = response.event.event_type_id ? {id: response.event.event_type_id, name: response.event.event_type.name} : null;\r\n                        this.eventForm.audience = response.event.audience;\r\n                        this.eventForm.no_time = response.event.start_time ? 0 : 1;\r\n                        this.selected_courses = response.event.audience == 'selected_course' ? response.selected_audience : [];\r\n                        this.eventForm.course_id = response.event.audience == 'selected_course' ? this.setMultiSelect(response.selected_audience) : [];\r\n                        this.selected_batches = response.event.audience == 'selected_batch' ? response.selected_audience : [];\r\n                        this.eventForm.batch_id = response.event.audience == 'selected_batch' ? this.setMultiSelect(response.selected_audience) : [];\r\n                        this.selected_departments = response.event.audience == 'selected_department' ? response.selected_audience : [];\r\n                        this.eventForm.department_id = response.event.audience == 'selected_department' ? this.setMultiSelect(response.selected_audience) : [];\r\n                        this.selected_employee_categories = response.event.audience == 'selected_employee_category' ? response.selected_audience : [];\r\n                        this.eventForm.employee_category_id = response.event.audience == 'selected_employee_category' ? this.setMultiSelect(response.selected_audience) : [];\r\n                        this.start_time = response.start_time;\r\n                        this.end_time = response.end_time;\r\n                        this.eventForm.upload_token = response.event.upload_token;\r\n                        this.module_id = response.event.id;\r\n\r\n                        if (! response.is_editable) {\r\n                            toastr.error(i18n.user.permission_denied);\r\n                            loader.hide();\r\n                            this.$router.push('/calendar/event');\r\n                        }\r\n                        \r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                        this.$router.push('/calendar/event');\r\n                    });\r\n            },\r\n            update(){\r\n                this.eventForm.start_time = helper.toTime(this.start_time);\r\n                this.eventForm.end_time   = helper.toTime(this.end_time);\r\n                let loader = this.$loading.show();\r\n                this.eventForm.patch('/api/event/'+this.uuid)\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        loader.hide();\r\n                        this.$router.push('/calendar/event');\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            onEventTypeSelect(selectedOption){\r\n                this.eventForm.event_type_id = selectedOption.id;\r\n            },\r\n            onCourseSelect(selectedOption){\r\n                this.eventForm.errors.clear('course_id');\r\n                this.eventForm.course_id.push(selectedOption.id);\r\n            },\r\n            onCourseRemove(removedOption){\r\n                this.eventForm.course_id.splice(this.eventForm.course_id.indexOf(removedOption.id), 1);\r\n            },\r\n            onBatchSelect(selectedOption){\r\n                this.eventForm.errors.clear('batch_id');\r\n                this.eventForm.batch_id.push(selectedOption.id);\r\n            },\r\n            onBatchRemove(removedOption){\r\n                this.eventForm.batch_id.splice(this.eventForm.batch_id.indexOf(removedOption.id), 1);\r\n            },\r\n            onDepartmentSelect(selectedOption){\r\n                this.eventForm.errors.clear('department_id');\r\n                this.eventForm.department_id.push(selectedOption.id);\r\n            },\r\n            onDepartmentRemove(removedOption){\r\n                this.eventForm.department_id.splice(this.eventForm.department_id.indexOf(removedOption.id), 1);\r\n            },\r\n            onEmployeeCategorySelect(selectedOption){\r\n                this.eventForm.errors.clear('employee_category_id');\r\n                this.eventForm.employee_category_id.push(selectedOption.id);\r\n            },\r\n            onEmployeeCategoryRemove(removedOption){\r\n                this.eventForm.employee_category_id.splice(this.eventForm.employee_category_id.indexOf(removedOption.id), 1);\r\n            },\r\n            setMultiSelect(options) {\r\n                let data = [];\r\n                options.forEach(option => {\r\n                    data.push(option.id);\r\n                })\r\n\r\n                return data;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n.loading-overlay.is-full-page{\r\n    z-index: 1060;\r\n}\r\n</style>","<template>\r\n    <div>\r\n        <div class=\"page-titles\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12 col-sm-6\">\r\n                    <h3 class=\"text-themecolor\">{{trans('calendar.event')}} \r\n                        <span class=\"card-subtitle d-none d-sm-inline\" v-if=\"events.total\">{{trans('general.total_result_found',{count : events.total, from: events.from, to: events.to})}}</span>\r\n                        <span class=\"card-subtitle d-none d-sm-inline\" v-else>{{trans('general.no_result_found')}}</span>\r\n                    </h3>\r\n                </div>\r\n                <div class=\"col-12 col-sm-6\">\r\n                    <div class=\"action-buttons pull-right\">\r\n                        <button class=\"btn btn-info btn-sm\" v-if=\"events.total && !showCreatePanel && hasPermission('create-event')\" @click=\"showCreatePanel = !showCreatePanel\" v-tooltip=\"trans('general.add_new')\"><i class=\"fas fa-plus\"></i> <span class=\"d-none d-sm-inline\">{{trans('calendar.add_new_event')}}</span></button>\r\n                        <button class=\"btn btn-info btn-sm\" v-if=\"!showFilterPanel\" @click=\"showFilterPanel = !showFilterPanel\"><i class=\"fas fa-filter\"></i> <span class=\"d-none d-sm-inline\">{{trans('general.filter')}}</span></button>\r\n                        <sort-by :order-by-options=\"orderByOptions\" :sort-by=\"filter.sort_by\" :order=\"filter.order\" @updateSortBy=\"value => {filter.sort_by = value}\"  @updateOrder=\"value => {filter.order = value}\"></sort-by>\r\n                        <div class=\"btn-group\">\r\n                            <button type=\"button\" class=\"btn btn-info btn-sm dropdown-toggle no-caret \" role=\"menu\" id=\"moreOption\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" v-tooltip=\"trans('general.more_option')\">\r\n                                <i class=\"fas fa-ellipsis-h\"></i> <span class=\"d-none d-sm-inline\"></span>\r\n                            </button>\r\n                            <div :class=\"['dropdown-menu',getConfig('direction') == 'ltr' ? 'dropdown-menu-right' : '']\" aria-labelledby=\"moreOption\">\r\n                                <button class=\"dropdown-item custom-dropdown\" @click=\"print\"><i class=\"fas fa-print\"></i> {{trans('general.print')}}</button>\r\n                                <button class=\"dropdown-item custom-dropdown\" @click=\"pdf\"><i class=\"fas fa-file-pdf\"></i> {{trans('general.generate_pdf')}}</button>\r\n                            </div>\r\n                        </div>\r\n                        <help-button @clicked=\"help_topic = 'event'\"></help-button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"container-fluid\">\r\n            <transition name=\"fade\">\r\n                <div class=\"card card-form\" v-if=\"showFilterPanel\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title\">{{trans('general.filter')}}\r\n                        </h4>\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12 col-sm-3\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"\">{{trans('calendar.event_type')}}</label>\r\n                                    <v-select label=\"name\" track-by=\"id\" v-model=\"selected_event_types\" name=\"event_type_id\" id=\"event_type_id\" :options=\"event_types\" :placeholder=\"trans('calendar.select_event_type')\" @select=\"onEventTypeSelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onEventTypeRemove\" :selected=\"selected_event_types\">\r\n                                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!event_types.length\">\r\n                                            {{trans('general.no_option_found')}}\r\n                                        </div>\r\n                                    </v-select>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-3\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"\">{{trans('academic.course')}}</label>\r\n                                    <v-select label=\"name\" track-by=\"id\" v-model=\"selected_courses\" group-values=\"courses\" group-label=\"course_group\" :group-select=\"false\" name=\"course_id\" id=\"course_id\" :options=\"courses\" :placeholder=\"trans('academic.select_course')\" @select=\"onCourseSelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onCourseRemove\" :selected=\"selected_courses\">\r\n                                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!courses.length\">\r\n                                            {{trans('general.no_option_found')}}\r\n                                        </div>\r\n                                    </v-select>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-3\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"\">{{trans('academic.batch')}}</label>\r\n                                    <v-select label=\"name\" track-by=\"id\" v-model=\"selected_batches\" group-values=\"batches\" group-label=\"course_group\" :group-select=\"false\" name=\"batch_id\" id=\"batch_id\" :options=\"batches\" :placeholder=\"trans('academic.select_batch')\" @select=\"onBatchSelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onBatchRemove\" :selected=\"selected_batches\">\r\n                                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!batches.length\">\r\n                                            {{trans('general.no_option_found')}}\r\n                                        </div>\r\n                                    </v-select>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-3\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"\">{{trans('employee.department')}}</label>\r\n                                    <v-select label=\"name\" track-by=\"id\" v-model=\"selected_departments\" name=\"department_id\" id=\"department_id\" :options=\"departments\" :placeholder=\"trans('employee.select_department')\" @select=\"onDepartmentSelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onDepartmentRemove\" :selected=\"selected_departments\">\r\n                                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!departments.length\">\r\n                                            {{trans('general.no_option_found')}}\r\n                                        </div>\r\n                                    </v-select>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-3\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"\">{{trans('employee.category')}}</label>\r\n                                    <v-select label=\"name\" track-by=\"id\" v-model=\"selected_employee_categories\" name=\"employee_category_id\" id=\"employee_category_id\" :options=\"employee_categories\" :placeholder=\"trans('employee.select_category')\" @select=\"onEmployeeCategorySelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onEmployeeCategoryRemove\" :selected=\"selected_employee_categories\">\r\n                                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!employee_categories.length\">\r\n                                            {{trans('general.no_option_found')}}\r\n                                        </div>\r\n                                    </v-select>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-3\">\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"\">{{trans('calendar.event_keyword')}}</label>\r\n                                    <input class=\"form-control\" name=\"keyword\" v-model=\"filter.keyword\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div class=\"card-footer text-right\">\r\n                            <button type=\"button\" @click=\"showFilterPanel = false\" class=\"btn btn-danger\">{{trans('general.cancel')}}</button>\r\n                            <button type=\"button\" class=\"btn btn-info waves-effect waves-light\" @click=\"getEvents\">{{trans('general.filter')}}</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </transition>\r\n            <transition name=\"fade\" v-if=\"hasPermission('create-event')\">\r\n                <div class=\"card card-form\" v-if=\"showCreatePanel\">\r\n                    <div class=\"card-body\">\r\n                        <h4 class=\"card-title\">{{trans('calendar.add_new_event')}}</h4>\r\n                        <event-form @completed=\"getEvents\" @cancel=\"showCreatePanel = !showCreatePanel\"></event-form>\r\n                    </div>\r\n                </div>\r\n            </transition>\r\n            <div class=\"card\">\r\n                <div class=\"card-body\">\r\n                    <div class=\"table-responsive\" v-if=\"events.total\">\r\n                        <table class=\"table table-sm\">\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>{{trans('calendar.event_type')}}</th>\r\n                                    <th>{{trans('calendar.event_title')}}</th>\r\n                                    <th>{{trans('calendar.event_venue')}}</th>\r\n                                    <th>{{trans('calendar.event_duration')}}</th>\r\n                                    <th>{{trans('calendar.event_audience')}}</th>\r\n                                    <th>{{trans('calendar.event_posted_by')}}</th>\r\n                                    <th>{{trans('general.created_at')}}</th>\r\n                                    <th class=\"table-option\">{{trans('general.action')}}</th>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                <tr v-for=\"event in events.data\">\r\n                                    <td v-text=\"event.event_type.name\"></td>\r\n                                    <td v-text=\"event.title\"></td>\r\n                                    <td v-text=\"event.venue\"></td>\r\n                                    <td>\r\n                                        {{event.start_date | moment}} <span v-if=\"event.start_time\">{{event.start_time | momentTime }}</span> <br /> {{trans('general.to')}}  <br />\r\n                                        {{event.end_date | moment}} <span v-if=\"event.end_time\">{{event.end_time | momentTime }}</span>\r\n                                    </td>\r\n                                    <td>\r\n                                        <span v-if=\"event.audience == 'everyone'\">{{trans('calendar.event_for_everyone')}}</span>\r\n                                        <template v-if=\"event.audience == 'selected_course'\">\r\n                                            {{trans('academic.course')}} <br />\r\n                                            <ul style=\"list-style:none;padding:0;margin:0;\">\r\n                                                <li v-for=\"course in event.courses\">{{course.name+'('+course.course_group.name+')'}}</li>\r\n                                            </ul>\r\n                                        </template>\r\n                                        <template v-else-if=\"event.audience == 'selected_batch'\">\r\n                                            {{trans('academic.batch')}} <br />\r\n                                            <ul style=\"list-style:none;padding:0;margin:0;\">\r\n                                                <li v-for=\"batch in event.batches\">{{batch.name+'('+batch.course.name+')'}}</li>\r\n                                            </ul>\r\n                                        </template>\r\n                                        <template v-else-if=\"event.audience == 'selected_department'\">\r\n                                            {{trans('employee.department')}} <br />\r\n                                            <ul style=\"list-style:none;padding:0;margin:0;\">\r\n                                                <li v-for=\"department in event.departments\">{{department.name}}</li>\r\n                                            </ul>\r\n                                        </template>\r\n                                        <template v-else-if=\"event.audience == 'selected_employee_category'\">\r\n                                            {{trans('employee.category')}} <br />\r\n                                            <ul style=\"list-style:none;padding:0;margin:0;\">\r\n                                                <li v-for=\"employee_category in event.employee_categorys\">{{employee_category.name}}</li>\r\n                                            </ul>\r\n                                        </template>\r\n                                    </td>\r\n                                    <td>{{getEmployeeName(event.user.employee)}} <br > {{getEmployeeDesignationOnDate(event.user.employee, event.start_date)}}</td>\r\n                                    <td>{{event.created_at | momentDateTime}}</td>\r\n                                    <td class=\"table-option\">\r\n                                        <div class=\"btn-group\">\r\n                                            <button class=\"btn btn-success btn-sm\" v-tooltip=\"trans('general.view_detail')\" @click.prevent=\"showAction(event)\"><i class=\"fas fa-arrow-circle-right\"></i></button>\r\n                                            <button class=\"btn btn-info btn-sm\" v-if=\"hasPermission('edit-event')\" v-tooltip=\"trans('calendar.edit_event')\" @click.prevent=\"editEvent(event)\"><i class=\"fas fa-edit\"></i></button>\r\n                                            <button class=\"btn btn-danger btn-sm\" v-if=\"hasPermission('delete-event')\" :key=\"event.id\" v-confirm=\"{ok: confirmDelete(event)}\" v-tooltip=\"trans('calendar.delete_event')\"><i class=\"fas fa-trash\"></i></button>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n                    <module-info v-if=\"!events.total\" module=\"calendar\" title=\"event_module_title\" description=\"event_module_description\" icon=\"list\">\r\n                        <div slot=\"btn\">\r\n                            <button class=\"btn btn-info btn-md\" v-if=\"!showCreatePanel && hasPermission('create-event')\" @click=\"showCreatePanel = !showCreatePanel\"><i class=\"fas fa-plus\"></i> {{trans('general.add_new')}}</button>\r\n                        </div>\r\n                    </module-info>\r\n                    <pagination-record :page-length.sync=\"filter.page_length\" :records=\"events\" @updateRecords=\"getEvents\"></pagination-record>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <event-detail v-if=\"showModal\" @close=\"showModal = false\" :uuid=\"showUuid\"></event-detail>\r\n        <right-panel :topic=\"help_topic\"></right-panel>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import eventForm from './form'\r\n    import eventDetail from './show'\r\n\r\n    export default {\r\n        components : { eventForm,eventDetail},\r\n        data() {\r\n            return {\r\n                events: {\r\n                    total: 0,\r\n                    data: []\r\n                },\r\n                filter: {\r\n                    sort_by : 'start_date',\r\n                    order: 'desc',\r\n                    keyword: '',\r\n                    event_type_id: [],\r\n                    course_id: [],\r\n                    batch_id: [],\r\n                    department_id: [],\r\n                    employee_category_id: [],\r\n                    page_length: helper.getConfig('page_length')\r\n                },\r\n                orderByOptions: [\r\n                    {\r\n                        value: 'start_date',\r\n                        translation: i18n.calendar.event_start_date\r\n                    },\r\n                    {\r\n                        value: 'end_date',\r\n                        translation: i18n.calendar.event_end_date\r\n                    },\r\n                    {\r\n                        value: 'title',\r\n                        translation: i18n.calendar.event_title\r\n                    }\r\n                ],\r\n                event_types: [],\r\n                selected_event_types: null,\r\n                courses: [],\r\n                selected_courses: null,\r\n                batches: [],\r\n                selected_batches: null,\r\n                departments: [],\r\n                selected_departments: null,\r\n                employee_categories: [],\r\n                selected_employee_categories: null,\r\n                showFilterPanel: false,\r\n                showCreatePanel: false,\r\n                help_topic: '',\r\n                showUuid: '',\r\n                showModal: false\r\n            };\r\n        },\r\n        mounted(){\r\n            if(!helper.hasPermission('list-event')){\r\n                helper.notAccessibleMsg();\r\n                this.$router.push('/dashboard');\r\n            }\r\n\r\n            this.getEvents();\r\n            helper.showDemoNotification(['calendar']);\r\n        },\r\n        methods: {\r\n            hasPermission(permission){\r\n                return helper.hasPermission(permission);\r\n            },\r\n            showAction(event){\r\n                this.showUuid = event.uuid;\r\n                this.showModal = true;\r\n            },\r\n            getEmployeeName(employee){\r\n                return helper.getEmployeeName(employee);\r\n            },\r\n            getEmployeeDesignationOnDate(employee, date){\r\n                return helper.getEmployeeDesignationOnDate(employee, date);\r\n            },\r\n            getEvents(page){\r\n                let loader = this.$loading.show();\r\n                if (typeof page !== 'number') {\r\n                    page = 1;\r\n                }\r\n                let url = helper.getFilterURL(this.filter);\r\n                axios.get('/api/event?page=' + page + url)\r\n                    .then(response => {\r\n                        this.events = response.events;\r\n                        this.event_types = response.filters.event_types;\r\n                        this.courses = response.filters.courses;\r\n                        this.batches = response.filters.batches;\r\n                        this.departments = response.filters.departments;\r\n                        this.employee_categories = response.filters.employee_categories;\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            editEvent(event){\r\n                this.$router.push('/calendar/event/'+event.uuid+'/edit');\r\n            },\r\n            confirmDelete(event){\r\n                return dialog => this.deleteEvent(event);\r\n            },\r\n            deleteEvent(event){\r\n                let loader = this.$loading.show();\r\n                axios.delete('/api/event/'+event.uuid)\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        this.getEvents();\r\n                        loader.hide();\r\n                    }).catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            getConfig(config) {\r\n                return helper.getConfig(config)\r\n            },\r\n            print(){\r\n                let loader = this.$loading.show();\r\n                axios.post('/api/event/print',{filter: this.filter})\r\n                    .then(response => {\r\n                        let print = window.open(\"/print\");\r\n                        loader.hide();\r\n                        print.document.write(response);\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            pdf(){\r\n                let loader = this.$loading.show();\r\n                axios.post('/api/event/pdf',{filter: this.filter})\r\n                    .then(response => {\r\n                        loader.hide();\r\n                        window.open('/download/report/'+response+'?token='+this.authToken);\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            onEventTypeSelect(selectedOption){\r\n                this.filter.event_type_id.push(selectedOption.id);\r\n            },\r\n            onEventTypeRemove(removedOption){\r\n                this.filter.event_type_id.splice(this.filter.event_type_id.indexOf(removedOption.id), 1);\r\n            },\r\n            onCourseSelect(selectedOption){\r\n                this.filter.course_id.push(selectedOption.id);\r\n            },\r\n            onCourseRemove(removedOption){\r\n                this.filter.course_id.splice(this.filter.course_id.indexOf(removedOption.id), 1);\r\n            },\r\n            onBatchSelect(selectedOption){\r\n                this.filter.batch_id.push(selectedOption.id);\r\n            },\r\n            onBatchRemove(removedOption){\r\n                this.filter.batch_id.splice(this.filter.batch_id.indexOf(removedOption.id), 1);\r\n            },\r\n            onDepartmentSelect(selectedOption){\r\n                this.filter.department_id.push(selectedOption.id);\r\n            },\r\n            onDepartmentRemove(removedOption){\r\n                this.filter.department_id.splice(this.filter.department_id.indexOf(removedOption.id), 1);\r\n            },\r\n            onEmployeeCategorySelect(selectedOption){\r\n                this.filter.employee_category_id.push(selectedOption.id);\r\n            },\r\n            onEmployeeCategoryRemove(removedOption){\r\n                this.filter.employee_category_id.splice(this.filter.employee_category_id.indexOf(removedOption.id), 1);\r\n            }\r\n        },\r\n        filters: {\r\n          moment(date) {\r\n            return helper.formatDate(date);\r\n          },\r\n          momentDateTime(date) {\r\n            return helper.formatDateTime(date);\r\n          },\r\n          momentTime(time) {\r\n            return helper.formatTime(time);\r\n          }\r\n        },\r\n        watch: {\r\n            'filter.sort_by': function(val){\r\n                this.getEvents();\r\n            },\r\n            'filter.order': function(val){\r\n                this.getEvents();\r\n            },\r\n            'filter.page_length': function(val){\r\n                this.getEvents();\r\n            }\r\n        },\r\n        computed: {\r\n            authToken(){\r\n                return helper.getAuthToken();\r\n            }\r\n        }\r\n    }\r\n</script>","<template>\r\n    <transition name=\"modal\">\r\n        <div class=\"modal-mask\">\r\n            <div class=\"modal-wrapper\">\r\n                <div class=\"modal-container modal-lg\" v-if=\"event.id\">\r\n                    <div class=\"modal-header\">\r\n                        <slot name=\"header\">\r\n                            <span>{{event.title}}</span>\r\n                            <span class=\"float-right pointer\" @click=\"$emit('close')\">x</span>\r\n                        </slot>\r\n                    </div>\r\n                    <div class=\"modal-body\">\r\n                        <slot name=\"body\">\r\n                            <h6 class=\"card-title\">\r\n                                <strong>{{trans('calendar.event_duration')}}:</strong> {{event.start_date | moment}} <span v-if=\"event.start_time\">{{event.start_time | momentTime }}</span> {{trans('general.to')}}  {{event.end_date | moment}} <span v-if=\"event.end_time\">{{event.end_time | momentTime }}</span>\r\n                                <br /><br />\r\n                                <strong>{{trans('calendar.event_venue')}}:</strong> {{event.venue}}<br /><br />\r\n                                <strong>{{trans('calendar.event_audience')}}:</strong>\r\n\r\n                                <span v-if=\"event.audience == 'everyone'\">{{trans('calendar.event_for_everyone')}}</span>\r\n                                <template v-if=\"event.audience == 'selected_course'\">\r\n                                    {{trans('academic.course')}} <br />\r\n                                    <ul style=\"list-style:none;\">\r\n                                        <template v-for=\"course in event.courses\"><li><i class=\"fas fa-check\"></i> {{course.name+' ('+course.course_group.name+')'}}</li></template>\r\n                                    </ul>\r\n                                </template>\r\n                                <template v-else-if=\"event.audience == 'selected_batch'\">\r\n                                    {{trans('academic.batch')}} <br />\r\n                                    <ul style=\"list-style:none;\">\r\n                                        <template v-for=\"batch in event.batches\"><li><i class=\"fas fa-check\"></i> {{batch.name+' ('+batch.course.name+')'}}</li></template>\r\n                                    </ul>\r\n                                </template>\r\n                                <template v-else-if=\"event.audience == 'selected_department'\">\r\n                                    {{trans('employee.department')}} <br />\r\n                                    <ul style=\"list-style:none;\">\r\n                                        <template v-for=\"department in event.departments\"><li><i class=\"fas fa-check\"></i> {{department.name}}</li></template>\r\n                                    </ul>\r\n                                </template>\r\n                                <template v-else-if=\"event.audience == 'selected_employee_category'\">\r\n                                    {{trans('employee.category')}} <br />\r\n                                    <ul style=\"list-style:none;\">\r\n                                        <template v-for=\"employee_category in event.employee_categorys\"><li><i class=\"fas fa-check\"></i> {{employee_category.name}}</li></template>\r\n                                    </ul>\r\n                                </template>\r\n\r\n                                <p class=\"pull-right\" v-if=\"event.user\">\r\n                                    <strong>{{trans('calendar.event_posted_by')}}:</strong> {{getEmployeeName(event.user.employee)}} {{getEmployeeDesignationOnDate(event.user.employee, event.start_date)}}\r\n                                </p>\r\n                            </h6>\r\n                            <div class=\"m-t-20 html-view\" v-html=\"event.description\"></div>\r\n                            <div v-if=\"attachments.length\">\r\n                                <ul class=\"m-t-10 upload-file-list\">\r\n                                    <li class=\"upload-file-list-item\" v-for=\"attachment in attachments\">\r\n                                        <a :href=\"`/calendar/event/${event.uuid}/attachment/${attachment.uuid}/download?token=${authToken}`\" class=\"no-link-color\"><i :class=\"['file-icon', 'fas', 'fa-lg', attachment.file_info.icon]\"></i> <span class=\"upload-file-list-item-size\">{{attachment.file_info.size}}</span> {{attachment.user_filename}}</a>\r\n                                    </li>\r\n                                </ul>\r\n                            </div>\r\n                            <hr />\r\n                            <p>\r\n                                <i class=\"far fa-clock\"></i> <small>{{trans('general.created_at')}} {{event.created_at | momentDateTime}}</small>\r\n                                <span class=\"pull-right\">\r\n                                    <i class=\"far fa-clock\"></i> <small>{{trans('general.updated_at')}} {{event.updated_at | momentDateTime}}</small>\r\n                                </span>\r\n                            </p>\r\n                        </slot>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </transition>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n        components: {},\r\n        props: ['uuid', 'url'],\r\n        mounted(){\r\n            if(this.uuid)\r\n                this.get();\r\n        },\r\n        data(){\r\n            return {\r\n                event: [],\r\n                attachments: []\r\n            }\r\n        },\r\n        methods: {\r\n            get(){\r\n                let loader = this.$loading.show();\r\n                let eventUrl = this.url ? '/api' + this.url : '/api/event/' + this.uuid;\r\n                axios.get(eventUrl)\r\n                    .then(response => {\r\n                        this.event = response.event;\r\n                        this.attachments = response.attachments;\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            getEmployeeName(employee){\r\n                return helper.getEmployeeName(employee);\r\n            },\r\n            getEmployeeDesignationOnDate(employee, date){\r\n                return helper.getEmployeeDesignationOnDate(employee, date);\r\n            }\r\n        },\r\n        computed: {\r\n            authToken(){\r\n                return helper.getAuthToken();\r\n            }\r\n        },\r\n        filters: {\r\n          momentDateTime(date) {\r\n            return helper.formatDateTime(date);\r\n          },\r\n          moment(date) {\r\n            return helper.formatDate(date);\r\n          },\r\n          momentTime(time) {\r\n            return helper.formatTime(time);\r\n          }\r\n        }\r\n    }\r\n</script>","<template>\r\n    <form @submit.prevent=\"proceed\" @keydown=\"eventTypeForm.errors.clear($event.target.name)\">\r\n        <div class=\"row\">\r\n            <div class=\"col-12 col-sm-6\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"\">{{trans('calendar.event_type_name')}}</label>\r\n                    <input class=\"form-control\" type=\"text\" v-model=\"eventTypeForm.name\" name=\"name\" :placeholder=\"trans('calendar.event_type_name')\">\r\n                    <show-error :form-name=\"eventTypeForm\" prop-name=\"name\"></show-error>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-12 col-sm-6\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"\">{{trans('calendar.event_type_description')}}</label>\r\n                    <input class=\"form-control\" type=\"text\" v-model=\"eventTypeForm.description\" name=\"description\" :placeholder=\"trans('calendar.event_type_description')\">\r\n                    <show-error :form-name=\"eventTypeForm\" prop-name=\"description\"></show-error>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"card-footer text-right\">\r\n            <router-link to=\"/configuration/calendar/event/type\" class=\"btn btn-danger waves-effect waves-light \" v-show=\"id\">{{trans('general.cancel')}}</router-link>\r\n            <button v-if=\"!id\" type=\"button\" class=\"btn btn-danger waves-effect waves-light \" @click=\"$emit('cancel')\">{{trans('general.cancel')}}</button>\r\n            <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\r\n                <span v-if=\"id\">{{trans('general.update')}}</span>\r\n                <span v-else>{{trans('general.save')}}</span>\r\n            </button>\r\n        </div>\r\n    </form>\r\n</template>\r\n\r\n\r\n<script>\r\n    export default {\r\n        data() {\r\n            return {\r\n                eventTypeForm: new Form({\r\n                    name : '',\r\n                    description : ''\r\n                })\r\n            };\r\n        },\r\n        props: ['id'],\r\n        mounted() {\r\n            if(this.id)\r\n                this.get();\r\n        },\r\n        methods: {\r\n            proceed(){\r\n                if(this.id)\r\n                    this.update();\r\n                else\r\n                    this.store();\r\n            },\r\n            store(){\r\n                let loader = this.$loading.show();\r\n                this.eventTypeForm.post('/api/calendar/event/type')\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        this.$emit('completed');\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            get(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/calendar/event/type/'+this.id)\r\n                    .then(response => {\r\n                        this.eventTypeForm.name = response.name;\r\n                        this.eventTypeForm.description = response.description;\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                        this.$router.push('/configuration/calendar/event/type');\r\n                    });\r\n            },\r\n            update(){\r\n                let loader = this.$loading.show();\r\n                this.eventTypeForm.patch('/api/calendar/event/type/'+this.id)\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        loader.hide();\r\n                        this.$router.push('/configuration/calendar/event/type');\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            }\r\n        }\r\n    }\r\n</script>\r\n","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"form\",\n        {\n          on: {\n            submit: function ($event) {\n              $event.preventDefault()\n              return _vm.proceed.apply(null, arguments)\n            },\n            keydown: function ($event) {\n              return _vm.eventForm.errors.clear($event.target.name)\n            },\n          },\n        },\n        [\n          _c(\"div\", { staticClass: \"row\" }, [\n            _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"calendar.event_title\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.eventForm.title,\n                        expression: \"eventForm.title\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    attrs: {\n                      type: \"text\",\n                      name: \"title\",\n                      placeholder: _vm.trans(\"calendar.event_title\"),\n                    },\n                    domProps: { value: _vm.eventForm.title },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) return\n                        _vm.$set(_vm.eventForm, \"title\", $event.target.value)\n                      },\n                    },\n                  }),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: { \"form-name\": _vm.eventForm, \"prop-name\": \"title\" },\n                  }),\n                ],\n                1\n              ),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"row\" }, [\n                _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"calendar.event_type\")) + \" \"),\n                      ]),\n                      _vm._v(\" \"),\n                      _vm.hasPermission(\"access-configuration\")\n                        ? _c(\n                            \"button\",\n                            {\n                              staticClass: \"btn btn-xs btn-info pull-right\",\n                              attrs: { type: \"button\" },\n                              on: {\n                                click: function ($event) {\n                                  _vm.showEventTypeModal = true\n                                },\n                              },\n                            },\n                            [_vm._v(_vm._s(_vm.trans(\"general.add_new\")))]\n                          )\n                        : _vm._e(),\n                      _vm._v(\" \"),\n                      _c(\n                        \"v-select\",\n                        {\n                          attrs: {\n                            label: \"name\",\n                            name: \"event_type_id\",\n                            id: \"event_type_id\",\n                            options: _vm.event_types,\n                            placeholder: _vm.trans(\n                              \"calendar.select_event_type\"\n                            ),\n                          },\n                          on: {\n                            select: _vm.onEventTypeSelect,\n                            close: function ($event) {\n                              return _vm.eventForm.errors.clear(\"event_type_id\")\n                            },\n                            remove: function ($event) {\n                              _vm.eventForm.event_type_id = \"\"\n                            },\n                          },\n                          model: {\n                            value: _vm.selected_event_type,\n                            callback: function ($$v) {\n                              _vm.selected_event_type = $$v\n                            },\n                            expression: \"selected_event_type\",\n                          },\n                        },\n                        [\n                          !_vm.event_types.length\n                            ? _c(\n                                \"div\",\n                                {\n                                  staticClass: \"multiselect__option\",\n                                  attrs: { slot: \"afterList\" },\n                                  slot: \"afterList\",\n                                },\n                                [\n                                  _vm._v(\n                                    \"\\n                                    \" +\n                                      _vm._s(\n                                        _vm.trans(\"general.no_option_found\")\n                                      ) +\n                                      \"\\n                                \"\n                                  ),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.eventForm,\n                          \"prop-name\": \"event_type_id\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"calendar.event_venue\"))),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value: _vm.eventForm.venue,\n                            expression: \"eventForm.venue\",\n                          },\n                        ],\n                        staticClass: \"form-control\",\n                        attrs: {\n                          type: \"text\",\n                          name: \"venue\",\n                          placeholder: _vm.trans(\"calendar.event_venue\"),\n                        },\n                        domProps: { value: _vm.eventForm.venue },\n                        on: {\n                          input: function ($event) {\n                            if ($event.target.composing) return\n                            _vm.$set(\n                              _vm.eventForm,\n                              \"venue\",\n                              $event.target.value\n                            )\n                          },\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.eventForm,\n                          \"prop-name\": \"venue\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"row\" }, [\n                _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"calendar.event_start_date\"))),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"label\",\n                        {\n                          staticClass:\n                            \"custom-control custom-checkbox float-right\",\n                        },\n                        [\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: _vm.eventForm.no_time,\n                                expression: \"eventForm.no_time\",\n                              },\n                            ],\n                            staticClass: \"custom-control-input\",\n                            attrs: { type: \"checkbox\", value: \"1\" },\n                            domProps: {\n                              checked: Array.isArray(_vm.eventForm.no_time)\n                                ? _vm._i(_vm.eventForm.no_time, \"1\") > -1\n                                : _vm.eventForm.no_time,\n                            },\n                            on: {\n                              change: function ($event) {\n                                var $$a = _vm.eventForm.no_time,\n                                  $$el = $event.target,\n                                  $$c = $$el.checked ? true : false\n                                if (Array.isArray($$a)) {\n                                  var $$v = \"1\",\n                                    $$i = _vm._i($$a, $$v)\n                                  if ($$el.checked) {\n                                    $$i < 0 &&\n                                      _vm.$set(\n                                        _vm.eventForm,\n                                        \"no_time\",\n                                        $$a.concat([$$v])\n                                      )\n                                  } else {\n                                    $$i > -1 &&\n                                      _vm.$set(\n                                        _vm.eventForm,\n                                        \"no_time\",\n                                        $$a\n                                          .slice(0, $$i)\n                                          .concat($$a.slice($$i + 1))\n                                      )\n                                  }\n                                } else {\n                                  _vm.$set(_vm.eventForm, \"no_time\", $$c)\n                                }\n                              },\n                            },\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"span\", { staticClass: \"custom-control-label\" }, [\n                            _vm._v(_vm._s(_vm.trans(\"calendar.event_no_time\"))),\n                          ]),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"datepicker\", {\n                        attrs: {\n                          bootstrapStyling: true,\n                          placeholder: _vm.trans(\"calendar.event_start_date\"),\n                        },\n                        on: {\n                          selected: function ($event) {\n                            return _vm.eventForm.errors.clear(\"start_date\")\n                          },\n                        },\n                        model: {\n                          value: _vm.eventForm.start_date,\n                          callback: function ($$v) {\n                            _vm.$set(_vm.eventForm, \"start_date\", $$v)\n                          },\n                          expression: \"eventForm.start_date\",\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.eventForm,\n                          \"prop-name\": \"start_date\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                !_vm.eventForm.no_time\n                  ? _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"form-group\" },\n                        [\n                          _c(\"label\", { attrs: { for: \"\" } }, [\n                            _vm._v(\n                              _vm._s(_vm.trans(\"calendar.event_start_time\"))\n                            ),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\"timepicker\", {\n                            attrs: {\n                              hour: _vm.start_time.hour,\n                              minute: _vm.start_time.minute,\n                              meridiem: _vm.start_time.meridiem,\n                            },\n                            on: {\n                              \"update:hour\": function ($event) {\n                                return _vm.$set(_vm.start_time, \"hour\", $event)\n                              },\n                              \"update:minute\": function ($event) {\n                                return _vm.$set(\n                                  _vm.start_time,\n                                  \"minute\",\n                                  $event\n                                )\n                              },\n                              \"update:meridiem\": function ($event) {\n                                return _vm.$set(\n                                  _vm.start_time,\n                                  \"meridiem\",\n                                  $event\n                                )\n                              },\n                            },\n                          }),\n                        ],\n                        1\n                      ),\n                    ])\n                  : _vm._e(),\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"row\" }, [\n                _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"calendar.event_end_date\"))),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"datepicker\", {\n                        attrs: {\n                          bootstrapStyling: true,\n                          placeholder: _vm.trans(\"calendar.event_end_date\"),\n                        },\n                        on: {\n                          selected: function ($event) {\n                            return _vm.eventForm.errors.clear(\"end_date\")\n                          },\n                        },\n                        model: {\n                          value: _vm.eventForm.end_date,\n                          callback: function ($$v) {\n                            _vm.$set(_vm.eventForm, \"end_date\", $$v)\n                          },\n                          expression: \"eventForm.end_date\",\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.eventForm,\n                          \"prop-name\": \"end_date\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                !_vm.eventForm.no_time\n                  ? _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"form-group\" },\n                        [\n                          _c(\"label\", { attrs: { for: \"\" } }, [\n                            _vm._v(\n                              _vm._s(_vm.trans(\"calendar.event_end_time\"))\n                            ),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\"timepicker\", {\n                            attrs: {\n                              hour: _vm.end_time.hour,\n                              minute: _vm.end_time.minute,\n                              meridiem: _vm.end_time.meridiem,\n                            },\n                            on: {\n                              \"update:hour\": function ($event) {\n                                return _vm.$set(_vm.end_time, \"hour\", $event)\n                              },\n                              \"update:minute\": function ($event) {\n                                return _vm.$set(_vm.end_time, \"minute\", $event)\n                              },\n                              \"update:meridiem\": function ($event) {\n                                return _vm.$set(\n                                  _vm.end_time,\n                                  \"meridiem\",\n                                  $event\n                                )\n                              },\n                            },\n                          }),\n                        ],\n                        1\n                      ),\n                    ])\n                  : _vm._e(),\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"row\" }, [\n                _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"form-group\" },\n                    [\n                      _c(\"label\", { attrs: { for: \"\" } }, [\n                        _vm._v(_vm._s(_vm.trans(\"calendar.event_audience\"))),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"select\",\n                        {\n                          directives: [\n                            {\n                              name: \"model\",\n                              rawName: \"v-model\",\n                              value: _vm.eventForm.audience,\n                              expression: \"eventForm.audience\",\n                            },\n                          ],\n                          staticClass: \"custom-select col-12\",\n                          attrs: { name: \"audience\" },\n                          on: {\n                            change: [\n                              function ($event) {\n                                var $$selectedVal = Array.prototype.filter\n                                  .call($event.target.options, function (o) {\n                                    return o.selected\n                                  })\n                                  .map(function (o) {\n                                    var val = \"_value\" in o ? o._value : o.value\n                                    return val\n                                  })\n                                _vm.$set(\n                                  _vm.eventForm,\n                                  \"audience\",\n                                  $event.target.multiple\n                                    ? $$selectedVal\n                                    : $$selectedVal[0]\n                                )\n                              },\n                              function ($event) {\n                                return _vm.eventForm.errors.clear(\"audience\")\n                              },\n                            ],\n                          },\n                        },\n                        [\n                          _c(\n                            \"option\",\n                            { attrs: { value: \"null\", selected: \"\" } },\n                            [_vm._v(_vm._s(_vm.trans(\"general.select_one\")))]\n                          ),\n                          _vm._v(\" \"),\n                          _vm._l(_vm.audiences, function (option) {\n                            return _c(\n                              \"option\",\n                              { domProps: { value: option.value } },\n                              [\n                                _vm._v(\n                                  \"\\n                                \" +\n                                    _vm._s(option.text) +\n                                    \"\\n                              \"\n                                ),\n                              ]\n                            )\n                          }),\n                        ],\n                        2\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"show-error\", {\n                        attrs: {\n                          \"form-name\": _vm.eventForm,\n                          \"prop-name\": \"audience\",\n                        },\n                      }),\n                    ],\n                    1\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _vm.eventForm.audience == \"selected_course\"\n                  ? _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"form-group\" },\n                        [\n                          _c(\"label\", { attrs: { for: \"\" } }, [\n                            _vm._v(_vm._s(_vm.trans(\"academic.course\"))),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\n                            \"v-select\",\n                            {\n                              attrs: {\n                                label: \"name\",\n                                \"track-by\": \"id\",\n                                \"group-values\": \"courses\",\n                                \"group-label\": \"course_group\",\n                                \"group-select\": false,\n                                name: \"course_id\",\n                                id: \"course_id\",\n                                options: _vm.courses,\n                                placeholder: _vm.trans(\n                                  \"academic.select_course\"\n                                ),\n                                multiple: true,\n                                \"close-on-select\": false,\n                                \"clear-on-select\": false,\n                                \"hide-selected\": true,\n                                selected: _vm.selected_courses,\n                              },\n                              on: {\n                                select: _vm.onCourseSelect,\n                                remove: _vm.onCourseRemove,\n                              },\n                              model: {\n                                value: _vm.selected_courses,\n                                callback: function ($$v) {\n                                  _vm.selected_courses = $$v\n                                },\n                                expression: \"selected_courses\",\n                              },\n                            },\n                            [\n                              !_vm.courses.length\n                                ? _c(\n                                    \"div\",\n                                    {\n                                      staticClass: \"multiselect__option\",\n                                      attrs: { slot: \"afterList\" },\n                                      slot: \"afterList\",\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n                                    \" +\n                                          _vm._s(\n                                            _vm.trans(\"general.no_option_found\")\n                                          ) +\n                                          \"\\n                                \"\n                                      ),\n                                    ]\n                                  )\n                                : _vm._e(),\n                            ]\n                          ),\n                          _vm._v(\" \"),\n                          _c(\"show-error\", {\n                            attrs: {\n                              \"form-name\": _vm.eventForm,\n                              \"prop-name\": \"course_id\",\n                            },\n                          }),\n                        ],\n                        1\n                      ),\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _vm.eventForm.audience == \"selected_batch\"\n                  ? _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"form-group\" },\n                        [\n                          _c(\"label\", { attrs: { for: \"\" } }, [\n                            _vm._v(_vm._s(_vm.trans(\"academic.batch\"))),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\n                            \"v-select\",\n                            {\n                              attrs: {\n                                label: \"name\",\n                                \"track-by\": \"id\",\n                                \"group-values\": \"batches\",\n                                \"group-label\": \"course_group\",\n                                \"group-select\": false,\n                                name: \"batch_id\",\n                                id: \"batch_id\",\n                                options: _vm.batches,\n                                placeholder: _vm.trans(\"academic.select_batch\"),\n                                multiple: true,\n                                \"close-on-select\": false,\n                                \"clear-on-select\": false,\n                                \"hide-selected\": true,\n                                selected: _vm.selected_batches,\n                              },\n                              on: {\n                                select: _vm.onBatchSelect,\n                                remove: _vm.onBatchRemove,\n                              },\n                              model: {\n                                value: _vm.selected_batches,\n                                callback: function ($$v) {\n                                  _vm.selected_batches = $$v\n                                },\n                                expression: \"selected_batches\",\n                              },\n                            },\n                            [\n                              !_vm.batches.length\n                                ? _c(\n                                    \"div\",\n                                    {\n                                      staticClass: \"multiselect__option\",\n                                      attrs: { slot: \"afterList\" },\n                                      slot: \"afterList\",\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n                                    \" +\n                                          _vm._s(\n                                            _vm.trans(\"general.no_option_found\")\n                                          ) +\n                                          \"\\n                                \"\n                                      ),\n                                    ]\n                                  )\n                                : _vm._e(),\n                            ]\n                          ),\n                          _vm._v(\" \"),\n                          _c(\"show-error\", {\n                            attrs: {\n                              \"form-name\": _vm.eventForm,\n                              \"prop-name\": \"batch_id\",\n                            },\n                          }),\n                        ],\n                        1\n                      ),\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _vm.eventForm.audience == \"selected_department\"\n                  ? _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"form-group\" },\n                        [\n                          _c(\"label\", { attrs: { for: \"\" } }, [\n                            _vm._v(_vm._s(_vm.trans(\"employee.department\"))),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\n                            \"v-select\",\n                            {\n                              attrs: {\n                                label: \"name\",\n                                \"track-by\": \"id\",\n                                name: \"department_id\",\n                                id: \"department_id\",\n                                options: _vm.departments,\n                                placeholder: _vm.trans(\n                                  \"employee.select_department\"\n                                ),\n                                multiple: true,\n                                \"close-on-select\": false,\n                                \"clear-on-select\": false,\n                                \"hide-selected\": true,\n                                selected: _vm.selected_departments,\n                              },\n                              on: {\n                                select: _vm.onDepartmentSelect,\n                                remove: _vm.onDepartmentRemove,\n                              },\n                              model: {\n                                value: _vm.selected_departments,\n                                callback: function ($$v) {\n                                  _vm.selected_departments = $$v\n                                },\n                                expression: \"selected_departments\",\n                              },\n                            },\n                            [\n                              !_vm.departments.length\n                                ? _c(\n                                    \"div\",\n                                    {\n                                      staticClass: \"multiselect__option\",\n                                      attrs: { slot: \"afterList\" },\n                                      slot: \"afterList\",\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n                                    \" +\n                                          _vm._s(\n                                            _vm.trans(\"general.no_option_found\")\n                                          ) +\n                                          \"\\n                                \"\n                                      ),\n                                    ]\n                                  )\n                                : _vm._e(),\n                            ]\n                          ),\n                          _vm._v(\" \"),\n                          _c(\"show-error\", {\n                            attrs: {\n                              \"form-name\": _vm.eventForm,\n                              \"prop-name\": \"department_id\",\n                            },\n                          }),\n                        ],\n                        1\n                      ),\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _vm.eventForm.audience == \"selected_employee_category\"\n                  ? _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"form-group\" },\n                        [\n                          _c(\"label\", { attrs: { for: \"\" } }, [\n                            _vm._v(_vm._s(_vm.trans(\"employee.category\"))),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\n                            \"v-select\",\n                            {\n                              attrs: {\n                                label: \"name\",\n                                \"track-by\": \"id\",\n                                name: \"employee_category_id\",\n                                id: \"employee_category_id\",\n                                options: _vm.employee_categories,\n                                placeholder: _vm.trans(\n                                  \"employee.select_category\"\n                                ),\n                                multiple: true,\n                                \"close-on-select\": false,\n                                \"clear-on-select\": false,\n                                \"hide-selected\": true,\n                                selected: _vm.selected_employee_categories,\n                              },\n                              on: {\n                                select: _vm.onEmployeeCategorySelect,\n                                remove: _vm.onEmployeeCategoryRemove,\n                              },\n                              model: {\n                                value: _vm.selected_employee_categories,\n                                callback: function ($$v) {\n                                  _vm.selected_employee_categories = $$v\n                                },\n                                expression: \"selected_employee_categories\",\n                              },\n                            },\n                            [\n                              !_vm.employee_categories.length\n                                ? _c(\n                                    \"div\",\n                                    {\n                                      staticClass: \"multiselect__option\",\n                                      attrs: { slot: \"afterList\" },\n                                      slot: \"afterList\",\n                                    },\n                                    [\n                                      _vm._v(\n                                        \"\\n                                    \" +\n                                          _vm._s(\n                                            _vm.trans(\"general.no_option_found\")\n                                          ) +\n                                          \"\\n                                \"\n                                      ),\n                                    ]\n                                  )\n                                : _vm._e(),\n                            ]\n                          ),\n                          _vm._v(\" \"),\n                          _c(\"show-error\", {\n                            attrs: {\n                              \"form-name\": _vm.eventForm,\n                              \"prop-name\": \"employee_category_id\",\n                            },\n                          }),\n                        ],\n                        1\n                      ),\n                    ])\n                  : _vm._e(),\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"file-upload-input\", {\n                    attrs: {\n                      \"button-text\": _vm.trans(\"general.upload_document\"),\n                      token: _vm.eventForm.upload_token,\n                      module: \"event\",\n                      \"clear-file\": _vm.clearAttachment,\n                      \"module-id\": _vm.module_id,\n                    },\n                  }),\n                ],\n                1\n              ),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"html-editor\", {\n                    attrs: {\n                      name: \"description\",\n                      model: _vm.eventForm.description,\n                      height: \"300\",\n                      isUpdate: _vm.uuid ? true : false,\n                    },\n                    on: {\n                      \"update:model\": function ($event) {\n                        return _vm.$set(_vm.eventForm, \"description\", $event)\n                      },\n                      clearErrors: function ($event) {\n                        return _vm.eventForm.errors.clear(\"description\")\n                      },\n                    },\n                  }),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.eventForm,\n                      \"prop-name\": \"description\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ]),\n          ]),\n          _vm._v(\" \"),\n          _c(\n            \"div\",\n            { staticClass: \"card-footer text-right\" },\n            [\n              _c(\n                \"router-link\",\n                {\n                  directives: [\n                    {\n                      name: \"show\",\n                      rawName: \"v-show\",\n                      value: _vm.uuid,\n                      expression: \"uuid\",\n                    },\n                  ],\n                  staticClass: \"btn btn-danger waves-effect waves-light\",\n                  attrs: { to: \"/calendar/event\" },\n                },\n                [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n              ),\n              _vm._v(\" \"),\n              !_vm.uuid\n                ? _c(\n                    \"button\",\n                    {\n                      staticClass: \"btn btn-danger waves-effect waves-light\",\n                      attrs: { type: \"button\" },\n                      on: {\n                        click: function ($event) {\n                          return _vm.$emit(\"cancel\")\n                        },\n                      },\n                    },\n                    [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n                  )\n                : _vm._e(),\n              _vm._v(\" \"),\n              _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn-info waves-effect waves-light\",\n                  attrs: { type: \"submit\" },\n                },\n                [\n                  _vm.uuid\n                    ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                    : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n                ]\n              ),\n            ],\n            1\n          ),\n        ]\n      ),\n      _vm._v(\" \"),\n      _vm.showEventTypeModal\n        ? _c(\"transition\", { attrs: { name: \"modal\" } }, [\n            _c(\"div\", { staticClass: \"modal-mask\" }, [\n              _c(\"div\", { staticClass: \"modal-wrapper\" }, [\n                _c(\"div\", { staticClass: \"modal-container modal-lg\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"modal-header\" },\n                    [\n                      _vm._t(\"header\", function () {\n                        return [\n                          _vm._v(\n                            \"\\n                            \" +\n                              _vm._s(_vm.trans(\"calendar.add_new_event_type\")) +\n                              \"\\n                            \"\n                          ),\n                          _c(\n                            \"span\",\n                            {\n                              staticClass: \"float-right pointer\",\n                              on: {\n                                click: function ($event) {\n                                  _vm.showEventTypeModal = false\n                                },\n                              },\n                            },\n                            [_vm._v(\"x\")]\n                          ),\n                        ]\n                      }),\n                    ],\n                    2\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"div\",\n                    { staticClass: \"modal-body\" },\n                    [\n                      _vm._t(\"body\", function () {\n                        return [\n                          _c(\"event-type-form\", {\n                            on: {\n                              completed: _vm.getPreRequisite,\n                              cancel: function ($event) {\n                                _vm.showEventTypeModal = false\n                              },\n                            },\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"div\", { staticClass: \"clearfix\" }),\n                        ]\n                      }),\n                    ],\n                    2\n                  ),\n                ]),\n              ]),\n            ]),\n          ])\n        : _vm._e(),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"div\",\n    [\n      _c(\"div\", { staticClass: \"page-titles\" }, [\n        _c(\"div\", { staticClass: \"row\" }, [\n          _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n            _c(\"h3\", { staticClass: \"text-themecolor\" }, [\n              _vm._v(\n                _vm._s(_vm.trans(\"calendar.event\")) + \" \\n                    \"\n              ),\n              _vm.events.total\n                ? _c(\n                    \"span\",\n                    { staticClass: \"card-subtitle d-none d-sm-inline\" },\n                    [\n                      _vm._v(\n                        _vm._s(\n                          _vm.trans(\"general.total_result_found\", {\n                            count: _vm.events.total,\n                            from: _vm.events.from,\n                            to: _vm.events.to,\n                          })\n                        )\n                      ),\n                    ]\n                  )\n                : _c(\n                    \"span\",\n                    { staticClass: \"card-subtitle d-none d-sm-inline\" },\n                    [_vm._v(_vm._s(_vm.trans(\"general.no_result_found\")))]\n                  ),\n            ]),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"action-buttons pull-right\" },\n              [\n                _vm.events.total &&\n                !_vm.showCreatePanel &&\n                _vm.hasPermission(\"create-event\")\n                  ? _c(\n                      \"button\",\n                      {\n                        directives: [\n                          {\n                            name: \"tooltip\",\n                            rawName: \"v-tooltip\",\n                            value: _vm.trans(\"general.add_new\"),\n                            expression: \"trans('general.add_new')\",\n                          },\n                        ],\n                        staticClass: \"btn btn-info btn-sm\",\n                        on: {\n                          click: function ($event) {\n                            _vm.showCreatePanel = !_vm.showCreatePanel\n                          },\n                        },\n                      },\n                      [\n                        _c(\"i\", { staticClass: \"fas fa-plus\" }),\n                        _vm._v(\" \"),\n                        _c(\"span\", { staticClass: \"d-none d-sm-inline\" }, [\n                          _vm._v(_vm._s(_vm.trans(\"calendar.add_new_event\"))),\n                        ]),\n                      ]\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                !_vm.showFilterPanel\n                  ? _c(\n                      \"button\",\n                      {\n                        staticClass: \"btn btn-info btn-sm\",\n                        on: {\n                          click: function ($event) {\n                            _vm.showFilterPanel = !_vm.showFilterPanel\n                          },\n                        },\n                      },\n                      [\n                        _c(\"i\", { staticClass: \"fas fa-filter\" }),\n                        _vm._v(\" \"),\n                        _c(\"span\", { staticClass: \"d-none d-sm-inline\" }, [\n                          _vm._v(_vm._s(_vm.trans(\"general.filter\"))),\n                        ]),\n                      ]\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"sort-by\", {\n                  attrs: {\n                    \"order-by-options\": _vm.orderByOptions,\n                    \"sort-by\": _vm.filter.sort_by,\n                    order: _vm.filter.order,\n                  },\n                  on: {\n                    updateSortBy: (value) => {\n                      _vm.filter.sort_by = value\n                    },\n                    updateOrder: (value) => {\n                      _vm.filter.order = value\n                    },\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"btn-group\" }, [\n                  _c(\n                    \"button\",\n                    {\n                      directives: [\n                        {\n                          name: \"tooltip\",\n                          rawName: \"v-tooltip\",\n                          value: _vm.trans(\"general.more_option\"),\n                          expression: \"trans('general.more_option')\",\n                        },\n                      ],\n                      staticClass:\n                        \"btn btn-info btn-sm dropdown-toggle no-caret\",\n                      attrs: {\n                        type: \"button\",\n                        role: \"menu\",\n                        id: \"moreOption\",\n                        \"data-toggle\": \"dropdown\",\n                        \"aria-haspopup\": \"true\",\n                        \"aria-expanded\": \"false\",\n                      },\n                    },\n                    [\n                      _c(\"i\", { staticClass: \"fas fa-ellipsis-h\" }),\n                      _vm._v(\" \"),\n                      _c(\"span\", { staticClass: \"d-none d-sm-inline\" }),\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"div\",\n                    {\n                      class: [\n                        \"dropdown-menu\",\n                        _vm.getConfig(\"direction\") == \"ltr\"\n                          ? \"dropdown-menu-right\"\n                          : \"\",\n                      ],\n                      attrs: { \"aria-labelledby\": \"moreOption\" },\n                    },\n                    [\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"dropdown-item custom-dropdown\",\n                          on: { click: _vm.print },\n                        },\n                        [\n                          _c(\"i\", { staticClass: \"fas fa-print\" }),\n                          _vm._v(\" \" + _vm._s(_vm.trans(\"general.print\"))),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"dropdown-item custom-dropdown\",\n                          on: { click: _vm.pdf },\n                        },\n                        [\n                          _c(\"i\", { staticClass: \"fas fa-file-pdf\" }),\n                          _vm._v(\n                            \" \" + _vm._s(_vm.trans(\"general.generate_pdf\"))\n                          ),\n                        ]\n                      ),\n                    ]\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"help-button\", {\n                  on: {\n                    clicked: function ($event) {\n                      _vm.help_topic = \"event\"\n                    },\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        { staticClass: \"container-fluid\" },\n        [\n          _c(\"transition\", { attrs: { name: \"fade\" } }, [\n            _vm.showFilterPanel\n              ? _c(\"div\", { staticClass: \"card card-form\" }, [\n                  _c(\"div\", { staticClass: \"card-body\" }, [\n                    _c(\"h4\", { staticClass: \"card-title\" }, [\n                      _vm._v(\n                        _vm._s(_vm.trans(\"general.filter\")) +\n                          \"\\n                    \"\n                      ),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"div\", { staticClass: \"row\" }, [\n                      _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"label\", { attrs: { for: \"\" } }, [\n                              _vm._v(_vm._s(_vm.trans(\"calendar.event_type\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\n                              \"v-select\",\n                              {\n                                attrs: {\n                                  label: \"name\",\n                                  \"track-by\": \"id\",\n                                  name: \"event_type_id\",\n                                  id: \"event_type_id\",\n                                  options: _vm.event_types,\n                                  placeholder: _vm.trans(\n                                    \"calendar.select_event_type\"\n                                  ),\n                                  multiple: true,\n                                  \"close-on-select\": false,\n                                  \"clear-on-select\": false,\n                                  \"hide-selected\": true,\n                                  selected: _vm.selected_event_types,\n                                },\n                                on: {\n                                  select: _vm.onEventTypeSelect,\n                                  remove: _vm.onEventTypeRemove,\n                                },\n                                model: {\n                                  value: _vm.selected_event_types,\n                                  callback: function ($$v) {\n                                    _vm.selected_event_types = $$v\n                                  },\n                                  expression: \"selected_event_types\",\n                                },\n                              },\n                              [\n                                !_vm.event_types.length\n                                  ? _c(\n                                      \"div\",\n                                      {\n                                        staticClass: \"multiselect__option\",\n                                        attrs: { slot: \"afterList\" },\n                                        slot: \"afterList\",\n                                      },\n                                      [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\n                                                \"general.no_option_found\"\n                                              )\n                                            ) +\n                                            \"\\n                                    \"\n                                        ),\n                                      ]\n                                    )\n                                  : _vm._e(),\n                              ]\n                            ),\n                          ],\n                          1\n                        ),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"label\", { attrs: { for: \"\" } }, [\n                              _vm._v(_vm._s(_vm.trans(\"academic.course\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\n                              \"v-select\",\n                              {\n                                attrs: {\n                                  label: \"name\",\n                                  \"track-by\": \"id\",\n                                  \"group-values\": \"courses\",\n                                  \"group-label\": \"course_group\",\n                                  \"group-select\": false,\n                                  name: \"course_id\",\n                                  id: \"course_id\",\n                                  options: _vm.courses,\n                                  placeholder: _vm.trans(\n                                    \"academic.select_course\"\n                                  ),\n                                  multiple: true,\n                                  \"close-on-select\": false,\n                                  \"clear-on-select\": false,\n                                  \"hide-selected\": true,\n                                  selected: _vm.selected_courses,\n                                },\n                                on: {\n                                  select: _vm.onCourseSelect,\n                                  remove: _vm.onCourseRemove,\n                                },\n                                model: {\n                                  value: _vm.selected_courses,\n                                  callback: function ($$v) {\n                                    _vm.selected_courses = $$v\n                                  },\n                                  expression: \"selected_courses\",\n                                },\n                              },\n                              [\n                                !_vm.courses.length\n                                  ? _c(\n                                      \"div\",\n                                      {\n                                        staticClass: \"multiselect__option\",\n                                        attrs: { slot: \"afterList\" },\n                                        slot: \"afterList\",\n                                      },\n                                      [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\n                                                \"general.no_option_found\"\n                                              )\n                                            ) +\n                                            \"\\n                                    \"\n                                        ),\n                                      ]\n                                    )\n                                  : _vm._e(),\n                              ]\n                            ),\n                          ],\n                          1\n                        ),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"label\", { attrs: { for: \"\" } }, [\n                              _vm._v(_vm._s(_vm.trans(\"academic.batch\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\n                              \"v-select\",\n                              {\n                                attrs: {\n                                  label: \"name\",\n                                  \"track-by\": \"id\",\n                                  \"group-values\": \"batches\",\n                                  \"group-label\": \"course_group\",\n                                  \"group-select\": false,\n                                  name: \"batch_id\",\n                                  id: \"batch_id\",\n                                  options: _vm.batches,\n                                  placeholder: _vm.trans(\n                                    \"academic.select_batch\"\n                                  ),\n                                  multiple: true,\n                                  \"close-on-select\": false,\n                                  \"clear-on-select\": false,\n                                  \"hide-selected\": true,\n                                  selected: _vm.selected_batches,\n                                },\n                                on: {\n                                  select: _vm.onBatchSelect,\n                                  remove: _vm.onBatchRemove,\n                                },\n                                model: {\n                                  value: _vm.selected_batches,\n                                  callback: function ($$v) {\n                                    _vm.selected_batches = $$v\n                                  },\n                                  expression: \"selected_batches\",\n                                },\n                              },\n                              [\n                                !_vm.batches.length\n                                  ? _c(\n                                      \"div\",\n                                      {\n                                        staticClass: \"multiselect__option\",\n                                        attrs: { slot: \"afterList\" },\n                                        slot: \"afterList\",\n                                      },\n                                      [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\n                                                \"general.no_option_found\"\n                                              )\n                                            ) +\n                                            \"\\n                                    \"\n                                        ),\n                                      ]\n                                    )\n                                  : _vm._e(),\n                              ]\n                            ),\n                          ],\n                          1\n                        ),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"label\", { attrs: { for: \"\" } }, [\n                              _vm._v(_vm._s(_vm.trans(\"employee.department\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\n                              \"v-select\",\n                              {\n                                attrs: {\n                                  label: \"name\",\n                                  \"track-by\": \"id\",\n                                  name: \"department_id\",\n                                  id: \"department_id\",\n                                  options: _vm.departments,\n                                  placeholder: _vm.trans(\n                                    \"employee.select_department\"\n                                  ),\n                                  multiple: true,\n                                  \"close-on-select\": false,\n                                  \"clear-on-select\": false,\n                                  \"hide-selected\": true,\n                                  selected: _vm.selected_departments,\n                                },\n                                on: {\n                                  select: _vm.onDepartmentSelect,\n                                  remove: _vm.onDepartmentRemove,\n                                },\n                                model: {\n                                  value: _vm.selected_departments,\n                                  callback: function ($$v) {\n                                    _vm.selected_departments = $$v\n                                  },\n                                  expression: \"selected_departments\",\n                                },\n                              },\n                              [\n                                !_vm.departments.length\n                                  ? _c(\n                                      \"div\",\n                                      {\n                                        staticClass: \"multiselect__option\",\n                                        attrs: { slot: \"afterList\" },\n                                        slot: \"afterList\",\n                                      },\n                                      [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\n                                                \"general.no_option_found\"\n                                              )\n                                            ) +\n                                            \"\\n                                    \"\n                                        ),\n                                      ]\n                                    )\n                                  : _vm._e(),\n                              ]\n                            ),\n                          ],\n                          1\n                        ),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"label\", { attrs: { for: \"\" } }, [\n                              _vm._v(_vm._s(_vm.trans(\"employee.category\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\n                              \"v-select\",\n                              {\n                                attrs: {\n                                  label: \"name\",\n                                  \"track-by\": \"id\",\n                                  name: \"employee_category_id\",\n                                  id: \"employee_category_id\",\n                                  options: _vm.employee_categories,\n                                  placeholder: _vm.trans(\n                                    \"employee.select_category\"\n                                  ),\n                                  multiple: true,\n                                  \"close-on-select\": false,\n                                  \"clear-on-select\": false,\n                                  \"hide-selected\": true,\n                                  selected: _vm.selected_employee_categories,\n                                },\n                                on: {\n                                  select: _vm.onEmployeeCategorySelect,\n                                  remove: _vm.onEmployeeCategoryRemove,\n                                },\n                                model: {\n                                  value: _vm.selected_employee_categories,\n                                  callback: function ($$v) {\n                                    _vm.selected_employee_categories = $$v\n                                  },\n                                  expression: \"selected_employee_categories\",\n                                },\n                              },\n                              [\n                                !_vm.employee_categories.length\n                                  ? _c(\n                                      \"div\",\n                                      {\n                                        staticClass: \"multiselect__option\",\n                                        attrs: { slot: \"afterList\" },\n                                        slot: \"afterList\",\n                                      },\n                                      [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\n                                                \"general.no_option_found\"\n                                              )\n                                            ) +\n                                            \"\\n                                    \"\n                                        ),\n                                      ]\n                                    )\n                                  : _vm._e(),\n                              ]\n                            ),\n                          ],\n                          1\n                        ),\n                      ]),\n                      _vm._v(\" \"),\n                      _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                        _c(\"div\", { staticClass: \"form-group\" }, [\n                          _c(\"label\", { attrs: { for: \"\" } }, [\n                            _vm._v(_vm._s(_vm.trans(\"calendar.event_keyword\"))),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: _vm.filter.keyword,\n                                expression: \"filter.keyword\",\n                              },\n                            ],\n                            staticClass: \"form-control\",\n                            attrs: { name: \"keyword\" },\n                            domProps: { value: _vm.filter.keyword },\n                            on: {\n                              input: function ($event) {\n                                if ($event.target.composing) return\n                                _vm.$set(\n                                  _vm.filter,\n                                  \"keyword\",\n                                  $event.target.value\n                                )\n                              },\n                            },\n                          }),\n                        ]),\n                      ]),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"div\", { staticClass: \"card-footer text-right\" }, [\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-danger\",\n                          attrs: { type: \"button\" },\n                          on: {\n                            click: function ($event) {\n                              _vm.showFilterPanel = false\n                            },\n                          },\n                        },\n                        [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-info waves-effect waves-light\",\n                          attrs: { type: \"button\" },\n                          on: { click: _vm.getEvents },\n                        },\n                        [_vm._v(_vm._s(_vm.trans(\"general.filter\")))]\n                      ),\n                    ]),\n                  ]),\n                ])\n              : _vm._e(),\n          ]),\n          _vm._v(\" \"),\n          _vm.hasPermission(\"create-event\")\n            ? _c(\"transition\", { attrs: { name: \"fade\" } }, [\n                _vm.showCreatePanel\n                  ? _c(\"div\", { staticClass: \"card card-form\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"card-body\" },\n                        [\n                          _c(\"h4\", { staticClass: \"card-title\" }, [\n                            _vm._v(_vm._s(_vm.trans(\"calendar.add_new_event\"))),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\"event-form\", {\n                            on: {\n                              completed: _vm.getEvents,\n                              cancel: function ($event) {\n                                _vm.showCreatePanel = !_vm.showCreatePanel\n                              },\n                            },\n                          }),\n                        ],\n                        1\n                      ),\n                    ])\n                  : _vm._e(),\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"card\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"card-body\" },\n              [\n                _vm.events.total\n                  ? _c(\"div\", { staticClass: \"table-responsive\" }, [\n                      _c(\"table\", { staticClass: \"table table-sm\" }, [\n                        _c(\"thead\", [\n                          _c(\"tr\", [\n                            _c(\"th\", [\n                              _vm._v(_vm._s(_vm.trans(\"calendar.event_type\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(_vm._s(_vm.trans(\"calendar.event_title\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(_vm._s(_vm.trans(\"calendar.event_venue\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(\n                                _vm._s(_vm.trans(\"calendar.event_duration\"))\n                              ),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(\n                                _vm._s(_vm.trans(\"calendar.event_audience\"))\n                              ),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(\n                                _vm._s(_vm.trans(\"calendar.event_posted_by\"))\n                              ),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(_vm._s(_vm.trans(\"general.created_at\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", { staticClass: \"table-option\" }, [\n                              _vm._v(_vm._s(_vm.trans(\"general.action\"))),\n                            ]),\n                          ]),\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\n                          \"tbody\",\n                          _vm._l(_vm.events.data, function (event) {\n                            return _c(\"tr\", [\n                              _c(\"td\", {\n                                domProps: {\n                                  textContent: _vm._s(event.event_type.name),\n                                },\n                              }),\n                              _vm._v(\" \"),\n                              _c(\"td\", {\n                                domProps: { textContent: _vm._s(event.title) },\n                              }),\n                              _vm._v(\" \"),\n                              _c(\"td\", {\n                                domProps: { textContent: _vm._s(event.venue) },\n                              }),\n                              _vm._v(\" \"),\n                              _c(\"td\", [\n                                _vm._v(\n                                  \"\\n                                    \" +\n                                    _vm._s(_vm._f(\"moment\")(event.start_date)) +\n                                    \" \"\n                                ),\n                                event.start_time\n                                  ? _c(\"span\", [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm._f(\"momentTime\")(event.start_time)\n                                        )\n                                      ),\n                                    ])\n                                  : _vm._e(),\n                                _vm._v(\" \"),\n                                _c(\"br\"),\n                                _vm._v(\n                                  \" \" + _vm._s(_vm.trans(\"general.to\")) + \"  \"\n                                ),\n                                _c(\"br\"),\n                                _vm._v(\n                                  \"\\n                                    \" +\n                                    _vm._s(_vm._f(\"moment\")(event.end_date)) +\n                                    \" \"\n                                ),\n                                event.end_time\n                                  ? _c(\"span\", [\n                                      _vm._v(\n                                        _vm._s(\n                                          _vm._f(\"momentTime\")(event.end_time)\n                                        )\n                                      ),\n                                    ])\n                                  : _vm._e(),\n                              ]),\n                              _vm._v(\" \"),\n                              _c(\n                                \"td\",\n                                [\n                                  event.audience == \"everyone\"\n                                    ? _c(\"span\", [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.trans(\n                                              \"calendar.event_for_everyone\"\n                                            )\n                                          )\n                                        ),\n                                      ])\n                                    : _vm._e(),\n                                  _vm._v(\" \"),\n                                  event.audience == \"selected_course\"\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\"academic.course\")\n                                            ) +\n                                            \" \"\n                                        ),\n                                        _c(\"br\"),\n                                        _vm._v(\" \"),\n                                        _c(\n                                          \"ul\",\n                                          {\n                                            staticStyle: {\n                                              \"list-style\": \"none\",\n                                              padding: \"0\",\n                                              margin: \"0\",\n                                            },\n                                          },\n                                          _vm._l(\n                                            event.courses,\n                                            function (course) {\n                                              return _c(\"li\", [\n                                                _vm._v(\n                                                  _vm._s(\n                                                    course.name +\n                                                      \"(\" +\n                                                      course.course_group.name +\n                                                      \")\"\n                                                  )\n                                                ),\n                                              ])\n                                            }\n                                          ),\n                                          0\n                                        ),\n                                      ]\n                                    : event.audience == \"selected_batch\"\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\"academic.batch\")\n                                            ) +\n                                            \" \"\n                                        ),\n                                        _c(\"br\"),\n                                        _vm._v(\" \"),\n                                        _c(\n                                          \"ul\",\n                                          {\n                                            staticStyle: {\n                                              \"list-style\": \"none\",\n                                              padding: \"0\",\n                                              margin: \"0\",\n                                            },\n                                          },\n                                          _vm._l(\n                                            event.batches,\n                                            function (batch) {\n                                              return _c(\"li\", [\n                                                _vm._v(\n                                                  _vm._s(\n                                                    batch.name +\n                                                      \"(\" +\n                                                      batch.course.name +\n                                                      \")\"\n                                                  )\n                                                ),\n                                              ])\n                                            }\n                                          ),\n                                          0\n                                        ),\n                                      ]\n                                    : event.audience == \"selected_department\"\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\"employee.department\")\n                                            ) +\n                                            \" \"\n                                        ),\n                                        _c(\"br\"),\n                                        _vm._v(\" \"),\n                                        _c(\n                                          \"ul\",\n                                          {\n                                            staticStyle: {\n                                              \"list-style\": \"none\",\n                                              padding: \"0\",\n                                              margin: \"0\",\n                                            },\n                                          },\n                                          _vm._l(\n                                            event.departments,\n                                            function (department) {\n                                              return _c(\"li\", [\n                                                _vm._v(_vm._s(department.name)),\n                                              ])\n                                            }\n                                          ),\n                                          0\n                                        ),\n                                      ]\n                                    : event.audience ==\n                                      \"selected_employee_category\"\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\"employee.category\")\n                                            ) +\n                                            \" \"\n                                        ),\n                                        _c(\"br\"),\n                                        _vm._v(\" \"),\n                                        _c(\n                                          \"ul\",\n                                          {\n                                            staticStyle: {\n                                              \"list-style\": \"none\",\n                                              padding: \"0\",\n                                              margin: \"0\",\n                                            },\n                                          },\n                                          _vm._l(\n                                            event.employee_categorys,\n                                            function (employee_category) {\n                                              return _c(\"li\", [\n                                                _vm._v(\n                                                  _vm._s(employee_category.name)\n                                                ),\n                                              ])\n                                            }\n                                          ),\n                                          0\n                                        ),\n                                      ]\n                                    : _vm._e(),\n                                ],\n                                2\n                              ),\n                              _vm._v(\" \"),\n                              _c(\"td\", [\n                                _vm._v(\n                                  _vm._s(\n                                    _vm.getEmployeeName(event.user.employee)\n                                  ) + \" \"\n                                ),\n                                _c(\"br\"),\n                                _vm._v(\n                                  \" \" +\n                                    _vm._s(\n                                      _vm.getEmployeeDesignationOnDate(\n                                        event.user.employee,\n                                        event.start_date\n                                      )\n                                    )\n                                ),\n                              ]),\n                              _vm._v(\" \"),\n                              _c(\"td\", [\n                                _vm._v(\n                                  _vm._s(\n                                    _vm._f(\"momentDateTime\")(event.created_at)\n                                  )\n                                ),\n                              ]),\n                              _vm._v(\" \"),\n                              _c(\"td\", { staticClass: \"table-option\" }, [\n                                _c(\"div\", { staticClass: \"btn-group\" }, [\n                                  _c(\n                                    \"button\",\n                                    {\n                                      directives: [\n                                        {\n                                          name: \"tooltip\",\n                                          rawName: \"v-tooltip\",\n                                          value: _vm.trans(\n                                            \"general.view_detail\"\n                                          ),\n                                          expression:\n                                            \"trans('general.view_detail')\",\n                                        },\n                                      ],\n                                      staticClass: \"btn btn-success btn-sm\",\n                                      on: {\n                                        click: function ($event) {\n                                          $event.preventDefault()\n                                          return _vm.showAction(event)\n                                        },\n                                      },\n                                    },\n                                    [\n                                      _c(\"i\", {\n                                        staticClass:\n                                          \"fas fa-arrow-circle-right\",\n                                      }),\n                                    ]\n                                  ),\n                                  _vm._v(\" \"),\n                                  _vm.hasPermission(\"edit-event\")\n                                    ? _c(\n                                        \"button\",\n                                        {\n                                          directives: [\n                                            {\n                                              name: \"tooltip\",\n                                              rawName: \"v-tooltip\",\n                                              value: _vm.trans(\n                                                \"calendar.edit_event\"\n                                              ),\n                                              expression:\n                                                \"trans('calendar.edit_event')\",\n                                            },\n                                          ],\n                                          staticClass: \"btn btn-info btn-sm\",\n                                          on: {\n                                            click: function ($event) {\n                                              $event.preventDefault()\n                                              return _vm.editEvent(event)\n                                            },\n                                          },\n                                        },\n                                        [\n                                          _c(\"i\", {\n                                            staticClass: \"fas fa-edit\",\n                                          }),\n                                        ]\n                                      )\n                                    : _vm._e(),\n                                  _vm._v(\" \"),\n                                  _vm.hasPermission(\"delete-event\")\n                                    ? _c(\n                                        \"button\",\n                                        {\n                                          directives: [\n                                            {\n                                              name: \"confirm\",\n                                              rawName: \"v-confirm\",\n                                              value: {\n                                                ok: _vm.confirmDelete(event),\n                                              },\n                                              expression:\n                                                \"{ok: confirmDelete(event)}\",\n                                            },\n                                            {\n                                              name: \"tooltip\",\n                                              rawName: \"v-tooltip\",\n                                              value: _vm.trans(\n                                                \"calendar.delete_event\"\n                                              ),\n                                              expression:\n                                                \"trans('calendar.delete_event')\",\n                                            },\n                                          ],\n                                          key: event.id,\n                                          staticClass: \"btn btn-danger btn-sm\",\n                                        },\n                                        [\n                                          _c(\"i\", {\n                                            staticClass: \"fas fa-trash\",\n                                          }),\n                                        ]\n                                      )\n                                    : _vm._e(),\n                                ]),\n                              ]),\n                            ])\n                          }),\n                          0\n                        ),\n                      ]),\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                !_vm.events.total\n                  ? _c(\n                      \"module-info\",\n                      {\n                        attrs: {\n                          module: \"calendar\",\n                          title: \"event_module_title\",\n                          description: \"event_module_description\",\n                          icon: \"list\",\n                        },\n                      },\n                      [\n                        _c(\"div\", { attrs: { slot: \"btn\" }, slot: \"btn\" }, [\n                          !_vm.showCreatePanel &&\n                          _vm.hasPermission(\"create-event\")\n                            ? _c(\n                                \"button\",\n                                {\n                                  staticClass: \"btn btn-info btn-md\",\n                                  on: {\n                                    click: function ($event) {\n                                      _vm.showCreatePanel = !_vm.showCreatePanel\n                                    },\n                                  },\n                                },\n                                [\n                                  _c(\"i\", { staticClass: \"fas fa-plus\" }),\n                                  _vm._v(\n                                    \" \" + _vm._s(_vm.trans(\"general.add_new\"))\n                                  ),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]),\n                      ]\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"pagination-record\", {\n                  attrs: {\n                    \"page-length\": _vm.filter.page_length,\n                    records: _vm.events,\n                  },\n                  on: {\n                    \"update:pageLength\": function ($event) {\n                      return _vm.$set(_vm.filter, \"page_length\", $event)\n                    },\n                    \"update:page-length\": function ($event) {\n                      return _vm.$set(_vm.filter, \"page_length\", $event)\n                    },\n                    updateRecords: _vm.getEvents,\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _vm.showModal\n        ? _c(\"event-detail\", {\n            attrs: { uuid: _vm.showUuid },\n            on: {\n              close: function ($event) {\n                _vm.showModal = false\n              },\n            },\n          })\n        : _vm._e(),\n      _vm._v(\" \"),\n      _c(\"right-panel\", { attrs: { topic: _vm.help_topic } }),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"transition\", { attrs: { name: \"modal\" } }, [\n    _c(\"div\", { staticClass: \"modal-mask\" }, [\n      _c(\"div\", { staticClass: \"modal-wrapper\" }, [\n        _vm.event.id\n          ? _c(\"div\", { staticClass: \"modal-container modal-lg\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"modal-header\" },\n                [\n                  _vm._t(\"header\", function () {\n                    return [\n                      _c(\"span\", [_vm._v(_vm._s(_vm.event.title))]),\n                      _vm._v(\" \"),\n                      _c(\n                        \"span\",\n                        {\n                          staticClass: \"float-right pointer\",\n                          on: {\n                            click: function ($event) {\n                              return _vm.$emit(\"close\")\n                            },\n                          },\n                        },\n                        [_vm._v(\"x\")]\n                      ),\n                    ]\n                  }),\n                ],\n                2\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"div\",\n                { staticClass: \"modal-body\" },\n                [\n                  _vm._t(\"body\", function () {\n                    return [\n                      _c(\n                        \"h6\",\n                        { staticClass: \"card-title\" },\n                        [\n                          _c(\"strong\", [\n                            _vm._v(\n                              _vm._s(_vm.trans(\"calendar.event_duration\")) + \":\"\n                            ),\n                          ]),\n                          _vm._v(\n                            \" \" +\n                              _vm._s(_vm._f(\"moment\")(_vm.event.start_date)) +\n                              \" \"\n                          ),\n                          _vm.event.start_time\n                            ? _c(\"span\", [\n                                _vm._v(\n                                  _vm._s(\n                                    _vm._f(\"momentTime\")(_vm.event.start_time)\n                                  )\n                                ),\n                              ])\n                            : _vm._e(),\n                          _vm._v(\n                            \" \" +\n                              _vm._s(_vm.trans(\"general.to\")) +\n                              \"  \" +\n                              _vm._s(_vm._f(\"moment\")(_vm.event.end_date)) +\n                              \" \"\n                          ),\n                          _vm.event.end_time\n                            ? _c(\"span\", [\n                                _vm._v(\n                                  _vm._s(\n                                    _vm._f(\"momentTime\")(_vm.event.end_time)\n                                  )\n                                ),\n                              ])\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _c(\"br\"),\n                          _c(\"br\"),\n                          _vm._v(\" \"),\n                          _c(\"strong\", [\n                            _vm._v(\n                              _vm._s(_vm.trans(\"calendar.event_venue\")) + \":\"\n                            ),\n                          ]),\n                          _vm._v(\" \" + _vm._s(_vm.event.venue)),\n                          _c(\"br\"),\n                          _c(\"br\"),\n                          _vm._v(\" \"),\n                          _c(\"strong\", [\n                            _vm._v(\n                              _vm._s(_vm.trans(\"calendar.event_audience\")) + \":\"\n                            ),\n                          ]),\n                          _vm._v(\" \"),\n                          _vm.event.audience == \"everyone\"\n                            ? _c(\"span\", [\n                                _vm._v(\n                                  _vm._s(\n                                    _vm.trans(\"calendar.event_for_everyone\")\n                                  )\n                                ),\n                              ])\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm.event.audience == \"selected_course\"\n                            ? [\n                                _vm._v(\n                                  \"\\n                                \" +\n                                    _vm._s(_vm.trans(\"academic.course\")) +\n                                    \" \"\n                                ),\n                                _c(\"br\"),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"ul\",\n                                  { staticStyle: { \"list-style\": \"none\" } },\n                                  [\n                                    _vm._l(\n                                      _vm.event.courses,\n                                      function (course) {\n                                        return [\n                                          _c(\"li\", [\n                                            _c(\"i\", {\n                                              staticClass: \"fas fa-check\",\n                                            }),\n                                            _vm._v(\n                                              \" \" +\n                                                _vm._s(\n                                                  course.name +\n                                                    \" (\" +\n                                                    course.course_group.name +\n                                                    \")\"\n                                                )\n                                            ),\n                                          ]),\n                                        ]\n                                      }\n                                    ),\n                                  ],\n                                  2\n                                ),\n                              ]\n                            : _vm.event.audience == \"selected_batch\"\n                            ? [\n                                _vm._v(\n                                  \"\\n                                \" +\n                                    _vm._s(_vm.trans(\"academic.batch\")) +\n                                    \" \"\n                                ),\n                                _c(\"br\"),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"ul\",\n                                  { staticStyle: { \"list-style\": \"none\" } },\n                                  [\n                                    _vm._l(_vm.event.batches, function (batch) {\n                                      return [\n                                        _c(\"li\", [\n                                          _c(\"i\", {\n                                            staticClass: \"fas fa-check\",\n                                          }),\n                                          _vm._v(\n                                            \" \" +\n                                              _vm._s(\n                                                batch.name +\n                                                  \" (\" +\n                                                  batch.course.name +\n                                                  \")\"\n                                              )\n                                          ),\n                                        ]),\n                                      ]\n                                    }),\n                                  ],\n                                  2\n                                ),\n                              ]\n                            : _vm.event.audience == \"selected_department\"\n                            ? [\n                                _vm._v(\n                                  \"\\n                                \" +\n                                    _vm._s(_vm.trans(\"employee.department\")) +\n                                    \" \"\n                                ),\n                                _c(\"br\"),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"ul\",\n                                  { staticStyle: { \"list-style\": \"none\" } },\n                                  [\n                                    _vm._l(\n                                      _vm.event.departments,\n                                      function (department) {\n                                        return [\n                                          _c(\"li\", [\n                                            _c(\"i\", {\n                                              staticClass: \"fas fa-check\",\n                                            }),\n                                            _vm._v(\n                                              \" \" + _vm._s(department.name)\n                                            ),\n                                          ]),\n                                        ]\n                                      }\n                                    ),\n                                  ],\n                                  2\n                                ),\n                              ]\n                            : _vm.event.audience == \"selected_employee_category\"\n                            ? [\n                                _vm._v(\n                                  \"\\n                                \" +\n                                    _vm._s(_vm.trans(\"employee.category\")) +\n                                    \" \"\n                                ),\n                                _c(\"br\"),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"ul\",\n                                  { staticStyle: { \"list-style\": \"none\" } },\n                                  [\n                                    _vm._l(\n                                      _vm.event.employee_categorys,\n                                      function (employee_category) {\n                                        return [\n                                          _c(\"li\", [\n                                            _c(\"i\", {\n                                              staticClass: \"fas fa-check\",\n                                            }),\n                                            _vm._v(\n                                              \" \" +\n                                                _vm._s(employee_category.name)\n                                            ),\n                                          ]),\n                                        ]\n                                      }\n                                    ),\n                                  ],\n                                  2\n                                ),\n                              ]\n                            : _vm._e(),\n                          _vm._v(\" \"),\n                          _vm.event.user\n                            ? _c(\"p\", { staticClass: \"pull-right\" }, [\n                                _c(\"strong\", [\n                                  _vm._v(\n                                    _vm._s(\n                                      _vm.trans(\"calendar.event_posted_by\")\n                                    ) + \":\"\n                                  ),\n                                ]),\n                                _vm._v(\n                                  \" \" +\n                                    _vm._s(\n                                      _vm.getEmployeeName(\n                                        _vm.event.user.employee\n                                      )\n                                    ) +\n                                    \" \" +\n                                    _vm._s(\n                                      _vm.getEmployeeDesignationOnDate(\n                                        _vm.event.user.employee,\n                                        _vm.event.start_date\n                                      )\n                                    ) +\n                                    \"\\n                            \"\n                                ),\n                              ])\n                            : _vm._e(),\n                        ],\n                        2\n                      ),\n                      _vm._v(\" \"),\n                      _c(\"div\", {\n                        staticClass: \"m-t-20 html-view\",\n                        domProps: { innerHTML: _vm._s(_vm.event.description) },\n                      }),\n                      _vm._v(\" \"),\n                      _vm.attachments.length\n                        ? _c(\"div\", [\n                            _c(\n                              \"ul\",\n                              { staticClass: \"m-t-10 upload-file-list\" },\n                              _vm._l(_vm.attachments, function (attachment) {\n                                return _c(\n                                  \"li\",\n                                  { staticClass: \"upload-file-list-item\" },\n                                  [\n                                    _c(\n                                      \"a\",\n                                      {\n                                        staticClass: \"no-link-color\",\n                                        attrs: {\n                                          href: `/calendar/event/${_vm.event.uuid}/attachment/${attachment.uuid}/download?token=${_vm.authToken}`,\n                                        },\n                                      },\n                                      [\n                                        _c(\"i\", {\n                                          class: [\n                                            \"file-icon\",\n                                            \"fas\",\n                                            \"fa-lg\",\n                                            attachment.file_info.icon,\n                                          ],\n                                        }),\n                                        _vm._v(\" \"),\n                                        _c(\n                                          \"span\",\n                                          {\n                                            staticClass:\n                                              \"upload-file-list-item-size\",\n                                          },\n                                          [\n                                            _vm._v(\n                                              _vm._s(attachment.file_info.size)\n                                            ),\n                                          ]\n                                        ),\n                                        _vm._v(\n                                          \" \" + _vm._s(attachment.user_filename)\n                                        ),\n                                      ]\n                                    ),\n                                  ]\n                                )\n                              }),\n                              0\n                            ),\n                          ])\n                        : _vm._e(),\n                      _vm._v(\" \"),\n                      _c(\"hr\"),\n                      _vm._v(\" \"),\n                      _c(\"p\", [\n                        _c(\"i\", { staticClass: \"far fa-clock\" }),\n                        _vm._v(\" \"),\n                        _c(\"small\", [\n                          _vm._v(\n                            _vm._s(_vm.trans(\"general.created_at\")) +\n                              \" \" +\n                              _vm._s(\n                                _vm._f(\"momentDateTime\")(_vm.event.created_at)\n                              )\n                          ),\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\"span\", { staticClass: \"pull-right\" }, [\n                          _c(\"i\", { staticClass: \"far fa-clock\" }),\n                          _vm._v(\" \"),\n                          _c(\"small\", [\n                            _vm._v(\n                              _vm._s(_vm.trans(\"general.updated_at\")) +\n                                \" \" +\n                                _vm._s(\n                                  _vm._f(\"momentDateTime\")(_vm.event.updated_at)\n                                )\n                            ),\n                          ]),\n                        ]),\n                      ]),\n                    ]\n                  }),\n                ],\n                2\n              ),\n            ])\n          : _vm._e(),\n      ]),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"form\",\n    {\n      on: {\n        submit: function ($event) {\n          $event.preventDefault()\n          return _vm.proceed.apply(null, arguments)\n        },\n        keydown: function ($event) {\n          return _vm.eventTypeForm.errors.clear($event.target.name)\n        },\n      },\n    },\n    [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"calendar.event_type_name\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.eventTypeForm.name,\n                    expression: \"eventTypeForm.name\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"name\",\n                  placeholder: _vm.trans(\"calendar.event_type_name\"),\n                },\n                domProps: { value: _vm.eventTypeForm.name },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(_vm.eventTypeForm, \"name\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.eventTypeForm, \"prop-name\": \"name\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"calendar.event_type_description\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.eventTypeForm.description,\n                    expression: \"eventTypeForm.description\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"description\",\n                  placeholder: _vm.trans(\"calendar.event_type_description\"),\n                },\n                domProps: { value: _vm.eventTypeForm.description },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(\n                      _vm.eventTypeForm,\n                      \"description\",\n                      $event.target.value\n                    )\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.eventTypeForm,\n                  \"prop-name\": \"description\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        { staticClass: \"card-footer text-right\" },\n        [\n          _c(\n            \"router-link\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.id,\n                  expression: \"id\",\n                },\n              ],\n              staticClass: \"btn btn-danger waves-effect waves-light\",\n              attrs: { to: \"/configuration/calendar/event/type\" },\n            },\n            [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n          ),\n          _vm._v(\" \"),\n          !_vm.id\n            ? _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn-danger waves-effect waves-light\",\n                  attrs: { type: \"button\" },\n                  on: {\n                    click: function ($event) {\n                      return _vm.$emit(\"cancel\")\n                    },\n                  },\n                },\n                [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\n            \"button\",\n            {\n              staticClass: \"btn btn-info waves-effect waves-light\",\n              attrs: { type: \"submit\" },\n            },\n            [\n              _vm.id\n                ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n            ]\n          ),\n        ],\n        1\n      ),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.loading-overlay.is-full-page{\\r\\n    z-index: 1060;\\n}\\r\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/views/calendar/event/form.vue\"],\"names\":[],\"mappings\":\";AA8XA;IACA,aAAA;AACA\",\"sourcesContent\":[\"<template>\\r\\n    <div>\\r\\n        <form @submit.prevent=\\\"proceed\\\" @keydown=\\\"eventForm.errors.clear($event.target.name)\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-12 col-sm-6\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"\\\">{{trans('calendar.event_title')}}</label>\\r\\n                        <input class=\\\"form-control\\\" type=\\\"text\\\" v-model=\\\"eventForm.title\\\" name=\\\"title\\\" :placeholder=\\\"trans('calendar.event_title')\\\">\\r\\n                        <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"title\\\"></show-error>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-12 col-sm-6\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('calendar.event_type')}} </label> <button type=\\\"button\\\" class=\\\"btn btn-xs btn-info pull-right\\\" v-if=\\\"hasPermission('access-configuration')\\\" @click=\\\"showEventTypeModal = true\\\">{{trans('general.add_new')}}</button>\\r\\n                                <v-select label=\\\"name\\\" v-model=\\\"selected_event_type\\\" name=\\\"event_type_id\\\" id=\\\"event_type_id\\\" :options=\\\"event_types\\\" :placeholder=\\\"trans('calendar.select_event_type')\\\" @select=\\\"onEventTypeSelect\\\" @close=\\\"eventForm.errors.clear('event_type_id')\\\" @remove=\\\"eventForm.event_type_id = ''\\\">\\r\\n                                    <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!event_types.length\\\">\\r\\n                                        {{trans('general.no_option_found')}}\\r\\n                                    </div>\\r\\n                                </v-select>\\r\\n                                <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"event_type_id\\\"></show-error>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-12 col-sm-6\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('calendar.event_venue')}}</label>\\r\\n                                <input class=\\\"form-control\\\" type=\\\"text\\\" v-model=\\\"eventForm.venue\\\" name=\\\"venue\\\" :placeholder=\\\"trans('calendar.event_venue')\\\">\\r\\n                                <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"venue\\\"></show-error>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-12 col-sm-6\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('calendar.event_start_date')}}</label>\\r\\n                                <label class=\\\"custom-control custom-checkbox float-right\\\">\\r\\n                                    <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" v-model=\\\"eventForm.no_time\\\" value=\\\"1\\\">\\r\\n                                    <span class=\\\"custom-control-label\\\">{{trans('calendar.event_no_time')}}</span>\\r\\n                                </label>\\r\\n                                <datepicker v-model=\\\"eventForm.start_date\\\" :bootstrapStyling=\\\"true\\\" @selected=\\\"eventForm.errors.clear('start_date')\\\" :placeholder=\\\"trans('calendar.event_start_date')\\\"></datepicker>\\r\\n                                <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"start_date\\\"></show-error>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-12 col-sm-6\\\" v-if=\\\"!eventForm.no_time\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('calendar.event_start_time')}}</label>\\r\\n                                <timepicker :hour.sync=\\\"start_time.hour\\\" :minute.sync=\\\"start_time.minute\\\" :meridiem.sync=\\\"start_time.meridiem\\\"></timepicker>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-12 col-sm-6\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('calendar.event_end_date')}}</label>\\r\\n                                <datepicker v-model=\\\"eventForm.end_date\\\" :bootstrapStyling=\\\"true\\\" @selected=\\\"eventForm.errors.clear('end_date')\\\" :placeholder=\\\"trans('calendar.event_end_date')\\\"></datepicker>\\r\\n                                <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"end_date\\\"></show-error>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-12 col-sm-6\\\" v-if=\\\"!eventForm.no_time\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('calendar.event_end_time')}}</label>\\r\\n                                <timepicker :hour.sync=\\\"end_time.hour\\\" :minute.sync=\\\"end_time.minute\\\" :meridiem.sync=\\\"end_time.meridiem\\\"></timepicker>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-12 col-sm-6\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('calendar.event_audience')}}</label>\\r\\n                                <select v-model=\\\"eventForm.audience\\\" class=\\\"custom-select col-12\\\" name=\\\"audience\\\" @change=\\\"eventForm.errors.clear('audience')\\\">\\r\\n                                  <option value=null selected>{{trans('general.select_one')}}</option>\\r\\n                                  <option v-for=\\\"option in audiences\\\" v-bind:value=\\\"option.value\\\">\\r\\n                                    {{ option.text }}\\r\\n                                  </option>\\r\\n                                </select>\\r\\n                                <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"audience\\\"></show-error>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-12 col-sm-6\\\" v-if=\\\"eventForm.audience == 'selected_course'\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('academic.course')}}</label>\\r\\n                                <v-select label=\\\"name\\\" track-by=\\\"id\\\" v-model=\\\"selected_courses\\\" group-values=\\\"courses\\\" group-label=\\\"course_group\\\" :group-select=\\\"false\\\" name=\\\"course_id\\\" id=\\\"course_id\\\" :options=\\\"courses\\\" :placeholder=\\\"trans('academic.select_course')\\\" @select=\\\"onCourseSelect\\\" :multiple=\\\"true\\\" :close-on-select=\\\"false\\\" :clear-on-select=\\\"false\\\" :hide-selected=\\\"true\\\" @remove=\\\"onCourseRemove\\\" :selected=\\\"selected_courses\\\">\\r\\n                                    <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!courses.length\\\">\\r\\n                                        {{trans('general.no_option_found')}}\\r\\n                                    </div>\\r\\n                                </v-select>\\r\\n                                <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"course_id\\\"></show-error>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-12 col-sm-6\\\" v-if=\\\"eventForm.audience == 'selected_batch'\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('academic.batch')}}</label>\\r\\n                                <v-select label=\\\"name\\\" track-by=\\\"id\\\" v-model=\\\"selected_batches\\\" group-values=\\\"batches\\\" group-label=\\\"course_group\\\" :group-select=\\\"false\\\" name=\\\"batch_id\\\" id=\\\"batch_id\\\" :options=\\\"batches\\\" :placeholder=\\\"trans('academic.select_batch')\\\" @select=\\\"onBatchSelect\\\" :multiple=\\\"true\\\" :close-on-select=\\\"false\\\" :clear-on-select=\\\"false\\\" :hide-selected=\\\"true\\\" @remove=\\\"onBatchRemove\\\" :selected=\\\"selected_batches\\\">\\r\\n                                    <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!batches.length\\\">\\r\\n                                        {{trans('general.no_option_found')}}\\r\\n                                    </div>\\r\\n                                </v-select>\\r\\n                                <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"batch_id\\\"></show-error>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-12 col-sm-6\\\" v-if=\\\"eventForm.audience == 'selected_department'\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('employee.department')}}</label>\\r\\n                                <v-select label=\\\"name\\\" track-by=\\\"id\\\" v-model=\\\"selected_departments\\\" name=\\\"department_id\\\" id=\\\"department_id\\\" :options=\\\"departments\\\" :placeholder=\\\"trans('employee.select_department')\\\" @select=\\\"onDepartmentSelect\\\" :multiple=\\\"true\\\" :close-on-select=\\\"false\\\" :clear-on-select=\\\"false\\\" :hide-selected=\\\"true\\\" @remove=\\\"onDepartmentRemove\\\" :selected=\\\"selected_departments\\\">\\r\\n                                    <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!departments.length\\\">\\r\\n                                        {{trans('general.no_option_found')}}\\r\\n                                    </div>\\r\\n                                </v-select>\\r\\n                                <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"department_id\\\"></show-error>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                        <div class=\\\"col-12 col-sm-6\\\" v-if=\\\"eventForm.audience == 'selected_employee_category'\\\">\\r\\n                            <div class=\\\"form-group\\\">\\r\\n                                <label for=\\\"\\\">{{trans('employee.category')}}</label>\\r\\n                                <v-select label=\\\"name\\\" track-by=\\\"id\\\" v-model=\\\"selected_employee_categories\\\" name=\\\"employee_category_id\\\" id=\\\"employee_category_id\\\" :options=\\\"employee_categories\\\" :placeholder=\\\"trans('employee.select_category')\\\" @select=\\\"onEmployeeCategorySelect\\\" :multiple=\\\"true\\\" :close-on-select=\\\"false\\\" :clear-on-select=\\\"false\\\" :hide-selected=\\\"true\\\" @remove=\\\"onEmployeeCategoryRemove\\\" :selected=\\\"selected_employee_categories\\\">\\r\\n                                    <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!employee_categories.length\\\">\\r\\n                                        {{trans('general.no_option_found')}}\\r\\n                                    </div>\\r\\n                                </v-select>\\r\\n                                <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"employee_category_id\\\"></show-error>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <file-upload-input :button-text=\\\"trans('general.upload_document')\\\" :token=\\\"eventForm.upload_token\\\" module=\\\"event\\\" :clear-file=\\\"clearAttachment\\\" :module-id=\\\"module_id\\\"></file-upload-input>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-12 col-sm-6\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <html-editor name=\\\"description\\\" :model.sync=\\\"eventForm.description\\\" height=\\\"300\\\" :isUpdate=\\\"uuid ? true : false\\\" @clearErrors=\\\"eventForm.errors.clear('description')\\\"></html-editor>\\r\\n                        <show-error :form-name=\\\"eventForm\\\" prop-name=\\\"description\\\"></show-error>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"card-footer text-right\\\">\\r\\n                <router-link to=\\\"/calendar/event\\\" class=\\\"btn btn-danger waves-effect waves-light \\\" v-show=\\\"uuid\\\">{{trans('general.cancel')}}</router-link>\\r\\n                <button v-if=\\\"!uuid\\\" type=\\\"button\\\" class=\\\"btn btn-danger waves-effect waves-light \\\" @click=\\\"$emit('cancel')\\\">{{trans('general.cancel')}}</button>\\r\\n                <button type=\\\"submit\\\" class=\\\"btn btn-info waves-effect waves-light\\\">\\r\\n                    <span v-if=\\\"uuid\\\">{{trans('general.update')}}</span>\\r\\n                    <span v-else>{{trans('general.save')}}</span>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n\\r\\n        <transition name=\\\"modal\\\" v-if=\\\"showEventTypeModal\\\">\\r\\n            <div class=\\\"modal-mask\\\">\\r\\n                <div class=\\\"modal-wrapper\\\">\\r\\n                    <div class=\\\"modal-container modal-lg\\\">\\r\\n                        <div class=\\\"modal-header\\\">\\r\\n                            <slot name=\\\"header\\\">\\r\\n                                {{trans('calendar.add_new_event_type')}}\\r\\n                                <span class=\\\"float-right pointer\\\" @click=\\\"showEventTypeModal = false\\\">x</span>\\r\\n                            </slot>\\r\\n                        </div>\\r\\n                        <div class=\\\"modal-body\\\">\\r\\n                            <slot name=\\\"body\\\">\\r\\n                                <event-type-form @completed=\\\"getPreRequisite\\\" @cancel=\\\"showEventTypeModal = false\\\"></event-type-form>\\r\\n                                <div class=\\\"clearfix\\\"></div>\\r\\n                            </slot>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </transition>\\r\\n    </div>\\r\\n</template>\\r\\n\\r\\n\\r\\n<script>\\r\\n    import eventTypeForm from '../../configuration/calendar/event-type/form'\\r\\n\\r\\n    export default {\\r\\n        components: {eventTypeForm},\\r\\n        data() {\\r\\n            return {\\r\\n                eventForm: new Form({\\r\\n                    event_type_id: '',\\r\\n                    title: '',\\r\\n                    no_time: 0,\\r\\n                    venue: '',\\r\\n                    start_date: '',\\r\\n                    end_date: '',\\r\\n                    start_time: '',\\r\\n                    end_time: '',\\r\\n                    audience: 'everyone',\\r\\n                    course_id: [],\\r\\n                    batch_id: [],\\r\\n                    department_id: [],\\r\\n                    employee_category_id: [],\\r\\n                    description: '',\\r\\n                    upload_token: ''\\r\\n                }),\\r\\n                start_time: {\\r\\n                    hour: '',\\r\\n                    minute: '',\\r\\n                    meridiem: 'am'\\r\\n                },\\r\\n                end_time: {\\r\\n                    hour: '',\\r\\n                    minute: '',\\r\\n                    meridiem: 'am'\\r\\n                },\\r\\n                audiences: [],\\r\\n                event_types: [],\\r\\n                selected_event_type: null,\\r\\n                courses: [],\\r\\n                selected_courses: null,\\r\\n                batches: [],\\r\\n                selected_batches: null,\\r\\n                departments: [],\\r\\n                selected_departments: null,\\r\\n                employee_categories: [],\\r\\n                selected_employee_categories: null,\\r\\n                module_id: '',\\r\\n                clearAttachment: true,\\r\\n                showEventTypeModal: false\\r\\n            };\\r\\n        },\\r\\n        props: ['uuid'],\\r\\n        mounted() {\\r\\n            if(!helper.hasPermission('create-event') && !helper.hasPermission('edit-event')){\\r\\n                helper.notAccessibleMsg();\\r\\n                this.$router.push('/dashboard');\\r\\n            }\\r\\n\\r\\n            this.getPreRequisite();\\r\\n        },\\r\\n        methods: {\\r\\n            hasPermission(permission){\\r\\n                return helper.hasPermission(permission);\\r\\n            },\\r\\n            getPreRequisite(){\\r\\n                let loader = this.$loading.show();\\r\\n                this.showEventTypeModal = false;\\r\\n                axios.get('/api/event/pre-requisite')\\r\\n                    .then(response => {\\r\\n                        this.event_types = response.event_types;\\r\\n                        this.audiences = response.audiences;\\r\\n                        this.courses = response.courses;\\r\\n                        this.batches = response.batches;\\r\\n                        this.departments = response.departments;\\r\\n                        this.employee_categories = response.employee_categories;\\r\\n                        \\r\\n                        if(this.uuid)\\r\\n                            this.get();\\r\\n                        else\\r\\n                            this.eventForm.upload_token = this.$uuid.v4();\\r\\n\\r\\n                        loader.hide();\\r\\n                    })\\r\\n                    .catch(error => {\\r\\n                        loader.hide();\\r\\n                        helper.showErrorMsg(error);\\r\\n                    })\\r\\n            },\\r\\n            proceed(){\\r\\n                if(this.uuid)\\r\\n                    this.update();\\r\\n                else\\r\\n                    this.store();\\r\\n            },\\r\\n            store(){\\r\\n                this.eventForm.start_time = helper.toTime(this.start_time);\\r\\n                this.eventForm.end_time   = helper.toTime(this.end_time);\\r\\n                let loader = this.$loading.show();\\r\\n                this.eventForm.post('/api/event')\\r\\n                    .then(response => {\\r\\n                        toastr.success(response.message);\\r\\n                        this.clearAttachment = !this.clearAttachment;\\r\\n                        this.eventForm.upload_token = this.$uuid.v4();\\r\\n                        this.selected_event_type = null;\\r\\n                        this.selected_courses = null;\\r\\n                        this.selected_batches = null;\\r\\n                        this.selected_departments = null;\\r\\n                        this.selected_employee_categories = null;\\r\\n                        this.$emit('completed');\\r\\n                        loader.hide();\\r\\n                    })\\r\\n                    .catch(error => {\\r\\n                        loader.hide();\\r\\n                        helper.showErrorMsg(error);\\r\\n                    });\\r\\n            },\\r\\n            get(){\\r\\n                let loader = this.$loading.show();\\r\\n                axios.get('/api/event/'+this.uuid)\\r\\n                    .then(response => {\\r\\n                        this.eventForm.title = response.event.title;\\r\\n                        this.eventForm.venue = response.event.venue;\\r\\n                        this.eventForm.start_date = response.event.start_date;\\r\\n                        this.eventForm.end_date = response.event.end_date;\\r\\n                        this.eventForm.description = response.event.description;\\r\\n                        this.eventForm.event_type_id = response.event.event_type_id;\\r\\n                        this.selected_event_type = response.event.event_type_id ? {id: response.event.event_type_id, name: response.event.event_type.name} : null;\\r\\n                        this.eventForm.audience = response.event.audience;\\r\\n                        this.eventForm.no_time = response.event.start_time ? 0 : 1;\\r\\n                        this.selected_courses = response.event.audience == 'selected_course' ? response.selected_audience : [];\\r\\n                        this.eventForm.course_id = response.event.audience == 'selected_course' ? this.setMultiSelect(response.selected_audience) : [];\\r\\n                        this.selected_batches = response.event.audience == 'selected_batch' ? response.selected_audience : [];\\r\\n                        this.eventForm.batch_id = response.event.audience == 'selected_batch' ? this.setMultiSelect(response.selected_audience) : [];\\r\\n                        this.selected_departments = response.event.audience == 'selected_department' ? response.selected_audience : [];\\r\\n                        this.eventForm.department_id = response.event.audience == 'selected_department' ? this.setMultiSelect(response.selected_audience) : [];\\r\\n                        this.selected_employee_categories = response.event.audience == 'selected_employee_category' ? response.selected_audience : [];\\r\\n                        this.eventForm.employee_category_id = response.event.audience == 'selected_employee_category' ? this.setMultiSelect(response.selected_audience) : [];\\r\\n                        this.start_time = response.start_time;\\r\\n                        this.end_time = response.end_time;\\r\\n                        this.eventForm.upload_token = response.event.upload_token;\\r\\n                        this.module_id = response.event.id;\\r\\n\\r\\n                        if (! response.is_editable) {\\r\\n                            toastr.error(i18n.user.permission_denied);\\r\\n                            loader.hide();\\r\\n                            this.$router.push('/calendar/event');\\r\\n                        }\\r\\n                        \\r\\n                        loader.hide();\\r\\n                    })\\r\\n                    .catch(error => {\\r\\n                        loader.hide();\\r\\n                        helper.showErrorMsg(error);\\r\\n                        this.$router.push('/calendar/event');\\r\\n                    });\\r\\n            },\\r\\n            update(){\\r\\n                this.eventForm.start_time = helper.toTime(this.start_time);\\r\\n                this.eventForm.end_time   = helper.toTime(this.end_time);\\r\\n                let loader = this.$loading.show();\\r\\n                this.eventForm.patch('/api/event/'+this.uuid)\\r\\n                    .then(response => {\\r\\n                        toastr.success(response.message);\\r\\n                        loader.hide();\\r\\n                        this.$router.push('/calendar/event');\\r\\n                    })\\r\\n                    .catch(error => {\\r\\n                        loader.hide();\\r\\n                        helper.showErrorMsg(error);\\r\\n                    });\\r\\n            },\\r\\n            onEventTypeSelect(selectedOption){\\r\\n                this.eventForm.event_type_id = selectedOption.id;\\r\\n            },\\r\\n            onCourseSelect(selectedOption){\\r\\n                this.eventForm.errors.clear('course_id');\\r\\n                this.eventForm.course_id.push(selectedOption.id);\\r\\n            },\\r\\n            onCourseRemove(removedOption){\\r\\n                this.eventForm.course_id.splice(this.eventForm.course_id.indexOf(removedOption.id), 1);\\r\\n            },\\r\\n            onBatchSelect(selectedOption){\\r\\n                this.eventForm.errors.clear('batch_id');\\r\\n                this.eventForm.batch_id.push(selectedOption.id);\\r\\n            },\\r\\n            onBatchRemove(removedOption){\\r\\n                this.eventForm.batch_id.splice(this.eventForm.batch_id.indexOf(removedOption.id), 1);\\r\\n            },\\r\\n            onDepartmentSelect(selectedOption){\\r\\n                this.eventForm.errors.clear('department_id');\\r\\n                this.eventForm.department_id.push(selectedOption.id);\\r\\n            },\\r\\n            onDepartmentRemove(removedOption){\\r\\n                this.eventForm.department_id.splice(this.eventForm.department_id.indexOf(removedOption.id), 1);\\r\\n            },\\r\\n            onEmployeeCategorySelect(selectedOption){\\r\\n                this.eventForm.errors.clear('employee_category_id');\\r\\n                this.eventForm.employee_category_id.push(selectedOption.id);\\r\\n            },\\r\\n            onEmployeeCategoryRemove(removedOption){\\r\\n                this.eventForm.employee_category_id.splice(this.eventForm.employee_category_id.indexOf(removedOption.id), 1);\\r\\n            },\\r\\n            setMultiSelect(options) {\\r\\n                let data = [];\\r\\n                options.forEach(option => {\\r\\n                    data.push(option.id);\\r\\n                })\\r\\n\\r\\n                return data;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n.loading-overlay.is-full-page{\\r\\n    z-index: 1060;\\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-16.use[1]!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-16.use[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=style&index=0&id=0c936f4a&lang=css&\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=0c936f4a&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\nimport style0 from \"./form.vue?vue&type=style&index=0&id=0c936f4a&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('0c936f4a')) {\n      api.createRecord('0c936f4a', component.options)\n    } else {\n      api.reload('0c936f4a', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=0c936f4a&\", function () {\n      api.rerender('0c936f4a', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/calendar/event/form.vue\"\nexport default component.exports","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=b89a116a&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('b89a116a')) {\n      api.createRecord('b89a116a', component.options)\n    } else {\n      api.reload('b89a116a', component.options)\n    }\n    module.hot.accept(\"./index.vue?vue&type=template&id=b89a116a&\", function () {\n      api.rerender('b89a116a', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/calendar/event/index.vue\"\nexport default component.exports","import { render, staticRenderFns } from \"./show.vue?vue&type=template&id=6d6f5bd8&\"\nimport script from \"./show.vue?vue&type=script&lang=js&\"\nexport * from \"./show.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6d6f5bd8')) {\n      api.createRecord('6d6f5bd8', component.options)\n    } else {\n      api.reload('6d6f5bd8', component.options)\n    }\n    module.hot.accept(\"./show.vue?vue&type=template&id=6d6f5bd8&\", function () {\n      api.rerender('6d6f5bd8', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/calendar/event/show.vue\"\nexport default component.exports","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=70b663ed&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('70b663ed')) {\n      api.createRecord('70b663ed', component.options)\n    } else {\n      api.reload('70b663ed', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=70b663ed&\", function () {\n      api.rerender('70b663ed', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/configuration/calendar/event-type/form.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./show.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./show.vue?vue&type=script&lang=js&\"","import mod from \"-!../../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=template&id=0c936f4a&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=template&id=b89a116a&\"","export * from \"-!../../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=template&id=70b663ed&\"","export * from \"-!../../../../../node_modules/style-loader/dist/cjs.js!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-16.use[1]!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-16.use[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=style&index=0&id=0c936f4a&lang=css&\""],"names":[],"sourceRoot":""}