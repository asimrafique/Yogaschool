{"version":3,"file":"js/chunks/js/resource/assignment/edit.js?id=2e17159c83a48068","mappings":";;;;;;;;;;;;;;AAyBA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AC9MA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAUA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAgBA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAaA;AACA;AACA;;;;;;;;;;;;;;;;;;;AClYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;ACvCA;;;;;;;;;;;;;;;ACAA","sources":["webpack://InstiKit/resources/js/views/resource/assignment/edit.vue","webpack://InstiKit/resources/js/views/resource/assignment/form.vue","webpack://InstiKit/./resources/js/views/resource/assignment/edit.vue","webpack://InstiKit/./resources/js/views/resource/assignment/form.vue","webpack://InstiKit/./resources/js/views/resource/assignment/form.vue?c814","webpack://InstiKit/./resources/js/views/resource/assignment/form.vue?6a39","webpack://InstiKit/./resources/js/views/resource/assignment/edit.vue?327b","webpack://InstiKit/./resources/js/views/resource/assignment/form.vue?5cf9","webpack://InstiKit/./resources/js/views/resource/assignment/edit.vue?ae47","webpack://InstiKit/./resources/js/views/resource/assignment/form.vue?3962","webpack://InstiKit/./resources/js/views/resource/assignment/edit.vue?bfad"],"sourcesContent":["<template>\n    <div>\n        <div class=\"page-titles\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-6\">\n                    <h3 class=\"text-themecolor\">{{trans('resource.edit_assignment')}}</h3>\n                </div>\n                <div class=\"col-12 col-sm-6\">\n                    <div class=\"action-buttons pull-right\">\n                        <button class=\"btn btn-info btn-sm\" @click=\"$router.push('/resource/assignment')\"><i class=\"fas fa-list\"></i> <span class=\"d-none d-sm-inline\">{{trans('resource.assignment')}}</span></button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"container-fluid\">\n            <div class=\"card card-form\">\n                <div class=\"card-body p-t-20\">\n                    <assignment-form :uuid=\"uuid\"></assignment-form>\n                </div>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\n    import assignmentForm from './form';\n\n    export default {\n        components : { assignmentForm },\n        data() {\n            return {\n                uuid:this.$route.params.uuid\n            }\n        },\n        mounted(){\n            if(!helper.hasPermission('edit-assignment')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n        }\n    }\n</script>\n","<template>\n    <div>\n        <form @submit.prevent=\"proceed\" @keydown=\"assignmentForm.errors.clear($event.target.name)\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-6\">\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('academic.batch')}} </label>\n                        <v-select label=\"name\" v-model=\"selected_batch\" group-values=\"batches\" group-label=\"course_group\" :group-select=\"false\" name=\"batch_id\" id=\"batch_id\" :options=\"batches\" :placeholder=\"trans('academic.select_batch')\" @select=\"onBatchSelect\" @close=\"assignmentForm.errors.clear('batch_id')\" @remove=\"assignmentForm.batch_id = ''\">\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!batches.length\">\n                                {{trans('general.no_option_found')}}\n                            </div>\n                        </v-select>\n                        <show-error :form-name=\"assignmentForm\" prop-name=\"batch_id\"></show-error>\n                    </div>\n                    <div class=\"form-group\" v-if=\"assignmentForm.batch_id\">\n                        <label for=\"\">{{trans('academic.subject')}} </label>\n                        <v-select label=\"name\" v-model=\"selected_subject\" name=\"subject_id\" id=\"subject_id\" :options=\"subjects\" :placeholder=\"trans('resource.select_subject')\" @select=\"onSubjectSelect\" @close=\"assignmentForm.errors.clear('subject_id')\" @remove=\"assignmentForm.subject_id = ''\">\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!subjects.length\">\n                                {{trans('general.no_option_found')}}\n                            </div>\n                        </v-select>\n                        <show-error :form-name=\"assignmentForm\" prop-name=\"subject_id\"></show-error>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('resource.assignment_title')}}</label>\n                        <input class=\"form-control\" type=\"text\" v-model=\"assignmentForm.title\" name=\"title\" :placeholder=\"trans('resource.assignment_title')\">\n                        <show-error :form-name=\"assignmentForm\" prop-name=\"title\"></show-error>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('resource.date_of_assignment')}}</label>\n                        <datepicker v-model=\"assignmentForm.date_of_assignment\" :bootstrapStyling=\"true\" @selected=\"assignmentForm.errors.clear('date_of_assignment')\" :placeholder=\"trans('resource.date_of_assignment')\"></datepicker>\n                        <show-error :form-name=\"assignmentForm\" prop-name=\"date_of_assignment\"></show-error>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"\">{{trans('resource.due_date_of_assignment')}}</label>\n                        <datepicker v-model=\"assignmentForm.due_date\" :bootstrapStyling=\"true\" @selected=\"assignmentForm.errors.clear('due_date')\" :placeholder=\"trans('resource.due_date_of_assignment')\"></datepicker>\n                        <show-error :form-name=\"assignmentForm\" prop-name=\"due_date\"></show-error>\n                    </div>\n                    <div class=\"form-group\">\n                        <file-upload-input :button-text=\"trans('general.upload_document')\" :token=\"assignmentForm.upload_token\" module=\"assignment\" :clear-file=\"clearAttachment\" :module-id=\"module_id\"></file-upload-input>\n                    </div>\n                </div>\n                <div class=\"col-12 col-sm-6\">\n                    <div class=\"form-group\">\n                        <html-editor name=\"description\" :model.sync=\"assignmentForm.description\" height=\"300\" :isUpdate=\"uuid ? true : false\" @clearErrors=\"assignmentForm.errors.clear('description')\"></html-editor>\n                        <show-error :form-name=\"assignmentForm\" prop-name=\"description\"></show-error>\n                    </div>\n                </div>\n            </div>\n            <div class=\"card-footer text-right\">\n                <router-link to=\"/resource/assignment\" class=\"btn btn-danger waves-effect waves-light \" v-show=\"uuid\">{{trans('general.cancel')}}</router-link>\n                <button v-if=\"!uuid\" type=\"button\" class=\"btn btn-danger waves-effect waves-light \" @click=\"$emit('cancel')\">{{trans('general.cancel')}}</button>\n                <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\n                    <span v-if=\"uuid\">{{trans('general.update')}}</span>\n                    <span v-else>{{trans('general.save')}}</span>\n                </button>\n            </div>\n        </form>\n    </div>\n</template>\n\n\n<script>\n\n    export default {\n        components: {},\n        data() {\n            return {\n                assignmentForm: new Form({\n                    batch_id: '',\n                    subject_id: '',\n                    title: '',\n                    date_of_assignment: '',\n                    due_date: '',\n                    description: '',\n                    upload_token: ''\n                }),\n                batches: [],\n                selected_batch: null,\n                subjects: [],\n                selected_subject: null,\n                subject_detail: [],\n                module_id: '',\n                clearAttachment: true\n            };\n        },\n        props: ['uuid'],\n        mounted() {\n            if(!helper.hasPermission('create-assignment') && !helper.hasPermission('edit-assignment')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            if(this.uuid)\n                this.get();\n            else\n                this.assignmentForm.upload_token = this.$uuid.v4();\n\n            this.getPreRequisite();\n        },\n        methods: {\n            hasPermission(permission){\n                return helper.hasPermission(permission);\n            },\n            getPreRequisite(){\n                let loader = this.$loading.show();\n                axios.get('/api/assignment/pre-requisite')\n                    .then(response => {\n                        this.batches = response.batches;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },\n            getSubjects(){\n                if (!this.uuid) {\n                    this.assignmentForm.subject_id = '';\n                    this.selected_subject = null;\n                }\n                let loader = this.$loading.show();\n                axios.post('/api/batch/'+this.assignmentForm.batch_id+'/subjects')\n                    .then(response => {\n                        this.subjects = response.subjects;\n                        this.subject_details = response.subject_details;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },\n            proceed(){\n                if(this.uuid)\n                    this.update();\n                else\n                    this.store();\n            },\n            store(){\n                let loader = this.$loading.show();\n                this.assignmentForm.post('/api/assignment')\n                    .then(response => {\n                        toastr.success(response.message);\n                        this.clearAttachment = !this.clearAttachment;\n                        this.assignmentForm.upload_token = this.$uuid.v4();\n                        this.selected_batch = null;\n                        this.selected_subject = null;\n                        this.$emit('completed');\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            get(){\n                let loader = this.$loading.show();\n                axios.get('/api/assignment/'+this.uuid)\n                    .then(response => {\n                        let assignment = response.assignment;\n                        this.assignmentForm.title = assignment.title;\n                        this.assignmentForm.date_of_assignment = assignment.date_of_assignment;\n                        this.assignmentForm.due_date = assignment.due_date;\n                        this.assignmentForm.description = assignment.description;\n                        this.assignmentForm.batch_id = assignment.subject.batch_id;\n                        this.assignmentForm.subject_id = assignment.subject_id;\n                        this.selected_batch = this.assignmentForm.batch_id ? {id: assignment.subject.batch_id, name: assignment.subject.batch.course.name+' '+assignment.subject.batch.name} : null;\n                        this.selected_subject = assignment.subject_id ? {id: assignment.subject_id, name: assignment.subject.name+' ('+assignment.subject.code+')'} : null;\n                        this.assignmentForm.upload_token = assignment.upload_token;\n                        this.module_id = assignment.id;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                        this.$router.push('/resource/assignment');\n                    });\n            },\n            update(){\n                let loader = this.$loading.show();\n                this.assignmentForm.patch('/api/assignment/'+this.uuid)\n                    .then(response => {\n                        toastr.success(response.message);\n                        loader.hide();\n                        this.$router.push('/resource/assignment');\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            onBatchSelect(selectedOption){\n                this.assignmentForm.batch_id = selectedOption.id;\n            },\n            onSubjectSelect(selectedOption){\n                this.assignmentForm.subject_id = selectedOption.id;\n            }\n        },\n        watch: {\n            'assignmentForm.batch_id': function(val) {\n                if (val) {\n                    this.getSubjects();\n                }\n            }\n        }\n    }\n</script>\n\n<style>\n.loading-overlay.is-full-page{\n    z-index: 1060;\n}\n</style>","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"page-titles\" }, [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\"h3\", { staticClass: \"text-themecolor\" }, [\n            _vm._v(_vm._s(_vm.trans(\"resource.edit_assignment\"))),\n          ]),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\"div\", { staticClass: \"action-buttons pull-right\" }, [\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-info btn-sm\",\n                on: {\n                  click: function ($event) {\n                    return _vm.$router.push(\"/resource/assignment\")\n                  },\n                },\n              },\n              [\n                _c(\"i\", { staticClass: \"fas fa-list\" }),\n                _vm._v(\" \"),\n                _c(\"span\", { staticClass: \"d-none d-sm-inline\" }, [\n                  _vm._v(_vm._s(_vm.trans(\"resource.assignment\"))),\n                ]),\n              ]\n            ),\n          ]),\n        ]),\n      ]),\n    ]),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"container-fluid\" }, [\n      _c(\"div\", { staticClass: \"card card-form\" }, [\n        _c(\n          \"div\",\n          { staticClass: \"card-body p-t-20\" },\n          [_c(\"assignment-form\", { attrs: { uuid: _vm.uuid } })],\n          1\n        ),\n      ]),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", [\n    _c(\n      \"form\",\n      {\n        on: {\n          submit: function ($event) {\n            $event.preventDefault()\n            return _vm.proceed.apply(null, arguments)\n          },\n          keydown: function ($event) {\n            return _vm.assignmentForm.errors.clear($event.target.name)\n          },\n        },\n      },\n      [\n        _c(\"div\", { staticClass: \"row\" }, [\n          _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"academic.batch\")) + \" \"),\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"v-select\",\n                  {\n                    attrs: {\n                      label: \"name\",\n                      \"group-values\": \"batches\",\n                      \"group-label\": \"course_group\",\n                      \"group-select\": false,\n                      name: \"batch_id\",\n                      id: \"batch_id\",\n                      options: _vm.batches,\n                      placeholder: _vm.trans(\"academic.select_batch\"),\n                    },\n                    on: {\n                      select: _vm.onBatchSelect,\n                      close: function ($event) {\n                        return _vm.assignmentForm.errors.clear(\"batch_id\")\n                      },\n                      remove: function ($event) {\n                        _vm.assignmentForm.batch_id = \"\"\n                      },\n                    },\n                    model: {\n                      value: _vm.selected_batch,\n                      callback: function ($$v) {\n                        _vm.selected_batch = $$v\n                      },\n                      expression: \"selected_batch\",\n                    },\n                  },\n                  [\n                    !_vm.batches.length\n                      ? _c(\n                          \"div\",\n                          {\n                            staticClass: \"multiselect__option\",\n                            attrs: { slot: \"afterList\" },\n                            slot: \"afterList\",\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            \" +\n                                _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                \"\\n                        \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ]\n                ),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.assignmentForm,\n                    \"prop-name\": \"batch_id\",\n                  },\n                }),\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _vm.assignmentForm.batch_id\n              ? _c(\n                  \"div\",\n                  { staticClass: \"form-group\" },\n                  [\n                    _c(\"label\", { attrs: { for: \"\" } }, [\n                      _vm._v(_vm._s(_vm.trans(\"academic.subject\")) + \" \"),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\n                      \"v-select\",\n                      {\n                        attrs: {\n                          label: \"name\",\n                          name: \"subject_id\",\n                          id: \"subject_id\",\n                          options: _vm.subjects,\n                          placeholder: _vm.trans(\"resource.select_subject\"),\n                        },\n                        on: {\n                          select: _vm.onSubjectSelect,\n                          close: function ($event) {\n                            return _vm.assignmentForm.errors.clear(\"subject_id\")\n                          },\n                          remove: function ($event) {\n                            _vm.assignmentForm.subject_id = \"\"\n                          },\n                        },\n                        model: {\n                          value: _vm.selected_subject,\n                          callback: function ($$v) {\n                            _vm.selected_subject = $$v\n                          },\n                          expression: \"selected_subject\",\n                        },\n                      },\n                      [\n                        !_vm.subjects.length\n                          ? _c(\n                              \"div\",\n                              {\n                                staticClass: \"multiselect__option\",\n                                attrs: { slot: \"afterList\" },\n                                slot: \"afterList\",\n                              },\n                              [\n                                _vm._v(\n                                  \"\\n                            \" +\n                                    _vm._s(\n                                      _vm.trans(\"general.no_option_found\")\n                                    ) +\n                                    \"\\n                        \"\n                                ),\n                              ]\n                            )\n                          : _vm._e(),\n                      ]\n                    ),\n                    _vm._v(\" \"),\n                    _c(\"show-error\", {\n                      attrs: {\n                        \"form-name\": _vm.assignmentForm,\n                        \"prop-name\": \"subject_id\",\n                      },\n                    }),\n                  ],\n                  1\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"resource.assignment_title\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.assignmentForm.title,\n                      expression: \"assignmentForm.title\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"title\",\n                    placeholder: _vm.trans(\"resource.assignment_title\"),\n                  },\n                  domProps: { value: _vm.assignmentForm.title },\n                  on: {\n                    input: function ($event) {\n                      if ($event.target.composing) return\n                      _vm.$set(_vm.assignmentForm, \"title\", $event.target.value)\n                    },\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.assignmentForm,\n                    \"prop-name\": \"title\",\n                  },\n                }),\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"resource.date_of_assignment\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"datepicker\", {\n                  attrs: {\n                    bootstrapStyling: true,\n                    placeholder: _vm.trans(\"resource.date_of_assignment\"),\n                  },\n                  on: {\n                    selected: function ($event) {\n                      return _vm.assignmentForm.errors.clear(\n                        \"date_of_assignment\"\n                      )\n                    },\n                  },\n                  model: {\n                    value: _vm.assignmentForm.date_of_assignment,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.assignmentForm, \"date_of_assignment\", $$v)\n                    },\n                    expression: \"assignmentForm.date_of_assignment\",\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.assignmentForm,\n                    \"prop-name\": \"date_of_assignment\",\n                  },\n                }),\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"resource.due_date_of_assignment\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"datepicker\", {\n                  attrs: {\n                    bootstrapStyling: true,\n                    placeholder: _vm.trans(\"resource.due_date_of_assignment\"),\n                  },\n                  on: {\n                    selected: function ($event) {\n                      return _vm.assignmentForm.errors.clear(\"due_date\")\n                    },\n                  },\n                  model: {\n                    value: _vm.assignmentForm.due_date,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.assignmentForm, \"due_date\", $$v)\n                    },\n                    expression: \"assignmentForm.due_date\",\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.assignmentForm,\n                    \"prop-name\": \"due_date\",\n                  },\n                }),\n              ],\n              1\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"file-upload-input\", {\n                  attrs: {\n                    \"button-text\": _vm.trans(\"general.upload_document\"),\n                    token: _vm.assignmentForm.upload_token,\n                    module: \"assignment\",\n                    \"clear-file\": _vm.clearAttachment,\n                    \"module-id\": _vm.module_id,\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"html-editor\", {\n                  attrs: {\n                    name: \"description\",\n                    model: _vm.assignmentForm.description,\n                    height: \"300\",\n                    isUpdate: _vm.uuid ? true : false,\n                  },\n                  on: {\n                    \"update:model\": function ($event) {\n                      return _vm.$set(_vm.assignmentForm, \"description\", $event)\n                    },\n                    clearErrors: function ($event) {\n                      return _vm.assignmentForm.errors.clear(\"description\")\n                    },\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.assignmentForm,\n                    \"prop-name\": \"description\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n        ]),\n        _vm._v(\" \"),\n        _c(\n          \"div\",\n          { staticClass: \"card-footer text-right\" },\n          [\n            _c(\n              \"router-link\",\n              {\n                directives: [\n                  {\n                    name: \"show\",\n                    rawName: \"v-show\",\n                    value: _vm.uuid,\n                    expression: \"uuid\",\n                  },\n                ],\n                staticClass: \"btn btn-danger waves-effect waves-light\",\n                attrs: { to: \"/resource/assignment\" },\n              },\n              [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n            ),\n            _vm._v(\" \"),\n            !_vm.uuid\n              ? _c(\n                  \"button\",\n                  {\n                    staticClass: \"btn btn-danger waves-effect waves-light\",\n                    attrs: { type: \"button\" },\n                    on: {\n                      click: function ($event) {\n                        return _vm.$emit(\"cancel\")\n                      },\n                    },\n                  },\n                  [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n                )\n              : _vm._e(),\n            _vm._v(\" \"),\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-info waves-effect waves-light\",\n                attrs: { type: \"submit\" },\n              },\n              [\n                _vm.uuid\n                  ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                  : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n              ]\n            ),\n          ],\n          1\n        ),\n      ]\n    ),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.loading-overlay.is-full-page{\\n    z-index: 1060;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/views/resource/assignment/form.vue\"],\"names\":[],\"mappings\":\";AAkNA;IACA,aAAA;AACA\",\"sourcesContent\":[\"<template>\\n    <div>\\n        <form @submit.prevent=\\\"proceed\\\" @keydown=\\\"assignmentForm.errors.clear($event.target.name)\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-12 col-sm-6\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">{{trans('academic.batch')}} </label>\\n                        <v-select label=\\\"name\\\" v-model=\\\"selected_batch\\\" group-values=\\\"batches\\\" group-label=\\\"course_group\\\" :group-select=\\\"false\\\" name=\\\"batch_id\\\" id=\\\"batch_id\\\" :options=\\\"batches\\\" :placeholder=\\\"trans('academic.select_batch')\\\" @select=\\\"onBatchSelect\\\" @close=\\\"assignmentForm.errors.clear('batch_id')\\\" @remove=\\\"assignmentForm.batch_id = ''\\\">\\n                            <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!batches.length\\\">\\n                                {{trans('general.no_option_found')}}\\n                            </div>\\n                        </v-select>\\n                        <show-error :form-name=\\\"assignmentForm\\\" prop-name=\\\"batch_id\\\"></show-error>\\n                    </div>\\n                    <div class=\\\"form-group\\\" v-if=\\\"assignmentForm.batch_id\\\">\\n                        <label for=\\\"\\\">{{trans('academic.subject')}} </label>\\n                        <v-select label=\\\"name\\\" v-model=\\\"selected_subject\\\" name=\\\"subject_id\\\" id=\\\"subject_id\\\" :options=\\\"subjects\\\" :placeholder=\\\"trans('resource.select_subject')\\\" @select=\\\"onSubjectSelect\\\" @close=\\\"assignmentForm.errors.clear('subject_id')\\\" @remove=\\\"assignmentForm.subject_id = ''\\\">\\n                            <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!subjects.length\\\">\\n                                {{trans('general.no_option_found')}}\\n                            </div>\\n                        </v-select>\\n                        <show-error :form-name=\\\"assignmentForm\\\" prop-name=\\\"subject_id\\\"></show-error>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">{{trans('resource.assignment_title')}}</label>\\n                        <input class=\\\"form-control\\\" type=\\\"text\\\" v-model=\\\"assignmentForm.title\\\" name=\\\"title\\\" :placeholder=\\\"trans('resource.assignment_title')\\\">\\n                        <show-error :form-name=\\\"assignmentForm\\\" prop-name=\\\"title\\\"></show-error>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">{{trans('resource.date_of_assignment')}}</label>\\n                        <datepicker v-model=\\\"assignmentForm.date_of_assignment\\\" :bootstrapStyling=\\\"true\\\" @selected=\\\"assignmentForm.errors.clear('date_of_assignment')\\\" :placeholder=\\\"trans('resource.date_of_assignment')\\\"></datepicker>\\n                        <show-error :form-name=\\\"assignmentForm\\\" prop-name=\\\"date_of_assignment\\\"></show-error>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <label for=\\\"\\\">{{trans('resource.due_date_of_assignment')}}</label>\\n                        <datepicker v-model=\\\"assignmentForm.due_date\\\" :bootstrapStyling=\\\"true\\\" @selected=\\\"assignmentForm.errors.clear('due_date')\\\" :placeholder=\\\"trans('resource.due_date_of_assignment')\\\"></datepicker>\\n                        <show-error :form-name=\\\"assignmentForm\\\" prop-name=\\\"due_date\\\"></show-error>\\n                    </div>\\n                    <div class=\\\"form-group\\\">\\n                        <file-upload-input :button-text=\\\"trans('general.upload_document')\\\" :token=\\\"assignmentForm.upload_token\\\" module=\\\"assignment\\\" :clear-file=\\\"clearAttachment\\\" :module-id=\\\"module_id\\\"></file-upload-input>\\n                    </div>\\n                </div>\\n                <div class=\\\"col-12 col-sm-6\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <html-editor name=\\\"description\\\" :model.sync=\\\"assignmentForm.description\\\" height=\\\"300\\\" :isUpdate=\\\"uuid ? true : false\\\" @clearErrors=\\\"assignmentForm.errors.clear('description')\\\"></html-editor>\\n                        <show-error :form-name=\\\"assignmentForm\\\" prop-name=\\\"description\\\"></show-error>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"card-footer text-right\\\">\\n                <router-link to=\\\"/resource/assignment\\\" class=\\\"btn btn-danger waves-effect waves-light \\\" v-show=\\\"uuid\\\">{{trans('general.cancel')}}</router-link>\\n                <button v-if=\\\"!uuid\\\" type=\\\"button\\\" class=\\\"btn btn-danger waves-effect waves-light \\\" @click=\\\"$emit('cancel')\\\">{{trans('general.cancel')}}</button>\\n                <button type=\\\"submit\\\" class=\\\"btn btn-info waves-effect waves-light\\\">\\n                    <span v-if=\\\"uuid\\\">{{trans('general.update')}}</span>\\n                    <span v-else>{{trans('general.save')}}</span>\\n                </button>\\n            </div>\\n        </form>\\n    </div>\\n</template>\\n\\n\\n<script>\\n\\n    export default {\\n        components: {},\\n        data() {\\n            return {\\n                assignmentForm: new Form({\\n                    batch_id: '',\\n                    subject_id: '',\\n                    title: '',\\n                    date_of_assignment: '',\\n                    due_date: '',\\n                    description: '',\\n                    upload_token: ''\\n                }),\\n                batches: [],\\n                selected_batch: null,\\n                subjects: [],\\n                selected_subject: null,\\n                subject_detail: [],\\n                module_id: '',\\n                clearAttachment: true\\n            };\\n        },\\n        props: ['uuid'],\\n        mounted() {\\n            if(!helper.hasPermission('create-assignment') && !helper.hasPermission('edit-assignment')){\\n                helper.notAccessibleMsg();\\n                this.$router.push('/dashboard');\\n            }\\n\\n            if(this.uuid)\\n                this.get();\\n            else\\n                this.assignmentForm.upload_token = this.$uuid.v4();\\n\\n            this.getPreRequisite();\\n        },\\n        methods: {\\n            hasPermission(permission){\\n                return helper.hasPermission(permission);\\n            },\\n            getPreRequisite(){\\n                let loader = this.$loading.show();\\n                axios.get('/api/assignment/pre-requisite')\\n                    .then(response => {\\n                        this.batches = response.batches;\\n                        loader.hide();\\n                    })\\n                    .catch(error => {\\n                        loader.hide();\\n                        helper.showErrorMsg(error);\\n                    })\\n            },\\n            getSubjects(){\\n                if (!this.uuid) {\\n                    this.assignmentForm.subject_id = '';\\n                    this.selected_subject = null;\\n                }\\n                let loader = this.$loading.show();\\n                axios.post('/api/batch/'+this.assignmentForm.batch_id+'/subjects')\\n                    .then(response => {\\n                        this.subjects = response.subjects;\\n                        this.subject_details = response.subject_details;\\n                        loader.hide();\\n                    })\\n                    .catch(error => {\\n                        loader.hide();\\n                        helper.showErrorMsg(error);\\n                    })\\n            },\\n            proceed(){\\n                if(this.uuid)\\n                    this.update();\\n                else\\n                    this.store();\\n            },\\n            store(){\\n                let loader = this.$loading.show();\\n                this.assignmentForm.post('/api/assignment')\\n                    .then(response => {\\n                        toastr.success(response.message);\\n                        this.clearAttachment = !this.clearAttachment;\\n                        this.assignmentForm.upload_token = this.$uuid.v4();\\n                        this.selected_batch = null;\\n                        this.selected_subject = null;\\n                        this.$emit('completed');\\n                        loader.hide();\\n                    })\\n                    .catch(error => {\\n                        loader.hide();\\n                        helper.showErrorMsg(error);\\n                    });\\n            },\\n            get(){\\n                let loader = this.$loading.show();\\n                axios.get('/api/assignment/'+this.uuid)\\n                    .then(response => {\\n                        let assignment = response.assignment;\\n                        this.assignmentForm.title = assignment.title;\\n                        this.assignmentForm.date_of_assignment = assignment.date_of_assignment;\\n                        this.assignmentForm.due_date = assignment.due_date;\\n                        this.assignmentForm.description = assignment.description;\\n                        this.assignmentForm.batch_id = assignment.subject.batch_id;\\n                        this.assignmentForm.subject_id = assignment.subject_id;\\n                        this.selected_batch = this.assignmentForm.batch_id ? {id: assignment.subject.batch_id, name: assignment.subject.batch.course.name+' '+assignment.subject.batch.name} : null;\\n                        this.selected_subject = assignment.subject_id ? {id: assignment.subject_id, name: assignment.subject.name+' ('+assignment.subject.code+')'} : null;\\n                        this.assignmentForm.upload_token = assignment.upload_token;\\n                        this.module_id = assignment.id;\\n                        loader.hide();\\n                    })\\n                    .catch(error => {\\n                        loader.hide();\\n                        helper.showErrorMsg(error);\\n                        this.$router.push('/resource/assignment');\\n                    });\\n            },\\n            update(){\\n                let loader = this.$loading.show();\\n                this.assignmentForm.patch('/api/assignment/'+this.uuid)\\n                    .then(response => {\\n                        toastr.success(response.message);\\n                        loader.hide();\\n                        this.$router.push('/resource/assignment');\\n                    })\\n                    .catch(error => {\\n                        loader.hide();\\n                        helper.showErrorMsg(error);\\n                    });\\n            },\\n            onBatchSelect(selectedOption){\\n                this.assignmentForm.batch_id = selectedOption.id;\\n            },\\n            onSubjectSelect(selectedOption){\\n                this.assignmentForm.subject_id = selectedOption.id;\\n            }\\n        },\\n        watch: {\\n            'assignmentForm.batch_id': function(val) {\\n                if (val) {\\n                    this.getSubjects();\\n                }\\n            }\\n        }\\n    }\\n</script>\\n\\n<style>\\n.loading-overlay.is-full-page{\\n    z-index: 1060;\\n}\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-16.use[1]!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-16.use[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=style&index=0&id=81706b78&lang=css&\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { render, staticRenderFns } from \"./edit.vue?vue&type=template&id=0289188a&\"\nimport script from \"./edit.vue?vue&type=script&lang=js&\"\nexport * from \"./edit.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('0289188a')) {\n      api.createRecord('0289188a', component.options)\n    } else {\n      api.reload('0289188a', component.options)\n    }\n    module.hot.accept(\"./edit.vue?vue&type=template&id=0289188a&\", function () {\n      api.rerender('0289188a', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/resource/assignment/edit.vue\"\nexport default component.exports","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=81706b78&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\nimport style0 from \"./form.vue?vue&type=style&index=0&id=81706b78&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('81706b78')) {\n      api.createRecord('81706b78', component.options)\n    } else {\n      api.reload('81706b78', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=81706b78&\", function () {\n      api.rerender('81706b78', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/resource/assignment/form.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./edit.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./edit.vue?vue&type=script&lang=js&\"","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./edit.vue?vue&type=template&id=0289188a&\""],"names":[],"sourceRoot":""}