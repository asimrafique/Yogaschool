"use strict";(self.webpackChunkInstiKit=self.webpackChunkInstiKit||[]).push([[5293],{83880:(e,t,s)=>{s.d(t,{Z:()=>a});var r=s(94015),n=s.n(r),o=s(23645),i=s.n(o)()(n());i.push([e.id,".loading-overlay.is-full-page{z-index:1060}","",{version:3,sources:["webpack://./resources/js/views/resource/notes/form.vue"],names:[],mappings:"AAoMA,8BACA,YACA",sourcesContent:['<template>\r\n    <div>\r\n        <form @submit.prevent="proceed" @keydown="notesForm.errors.clear($event.target.name)">\r\n            <div class="row">\r\n                <div class="col-12 col-sm-6">\r\n                    <div class="form-group">\r\n                        <label for="">{{trans(\'academic.batch\')}} </label>\r\n                        <v-select label="name" v-model="selected_batch" group-values="batches" group-label="course_group" :group-select="false" name="batch_id" id="batch_id" :options="batches" :placeholder="trans(\'academic.select_batch\')" @select="onBatchSelect" @close="notesForm.errors.clear(\'batch_id\')" @remove="notesForm.batch_id = \'\'">\r\n                            <div class="multiselect__option" slot="afterList" v-if="!batches.length">\r\n                                {{trans(\'general.no_option_found\')}}\r\n                            </div>\r\n                        </v-select>\r\n                        <show-error :form-name="notesForm" prop-name="batch_id"></show-error>\r\n                    </div>\r\n                    <div class="form-group" v-if="notesForm.batch_id">\r\n                        <label for="">{{trans(\'academic.subject\')}} </label>\r\n                        <v-select label="name" v-model="selected_subject" name="subject_id" id="subject_id" :options="subjects" :placeholder="trans(\'resource.select_subject\')" @select="onSubjectSelect" @close="notesForm.errors.clear(\'subject_id\')" @remove="notesForm.subject_id = \'\'">\r\n                            <div class="multiselect__option" slot="afterList" v-if="!subjects.length">\r\n                                {{trans(\'general.no_option_found\')}}\r\n                            </div>\r\n                        </v-select>\r\n                        <show-error :form-name="notesForm" prop-name="subject_id"></show-error>\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <label for="">{{trans(\'resource.notes_title\')}}</label>\r\n                        <input class="form-control" type="text" v-model="notesForm.title" name="title" :placeholder="trans(\'resource.notes_title\')">\r\n                        <show-error :form-name="notesForm" prop-name="title"></show-error>\r\n                    </div>\r\n                    <div class="form-group">\r\n                        <file-upload-input :button-text="trans(\'general.upload_document\')" :token="notesForm.upload_token" module="notes" :clear-file="clearAttachment" :module-id="module_id"></file-upload-input>\r\n                    </div>\r\n                </div>\r\n                <div class="col-12 col-sm-6">\r\n                    <div class="form-group">\r\n                        <html-editor name="description" :model.sync="notesForm.description" height="300" :isUpdate="uuid ? true : false" @clearErrors="notesForm.errors.clear(\'description\')"></html-editor>\r\n                        <show-error :form-name="notesForm" prop-name="description"></show-error>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class="card-footer text-right">\r\n                <router-link to="/resource/notes" class="btn btn-danger waves-effect waves-light " v-show="uuid">{{trans(\'general.cancel\')}}</router-link>\r\n                <button v-if="!uuid" type="button" class="btn btn-danger waves-effect waves-light " @click="$emit(\'cancel\')">{{trans(\'general.cancel\')}}</button>\r\n                <button type="submit" class="btn btn-info waves-effect waves-light">\r\n                    <span v-if="uuid">{{trans(\'general.update\')}}</span>\r\n                    <span v-else>{{trans(\'general.save\')}}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\n\r\n    export default {\r\n        components: {},\r\n        data() {\r\n            return {\r\n                notesForm: new Form({\r\n                    batch_id: \'\',\r\n                    subject_id: \'\',\r\n                    title: \'\',\r\n                    description: \'\',\r\n                    upload_token: \'\'\r\n                }),\r\n                batches: [],\r\n                selected_batch: null,\r\n                subjects: [],\r\n                selected_subject: null,\r\n                subject_detail: [],\r\n                module_id: \'\',\r\n                clearAttachment: true\r\n            };\r\n        },\r\n        props: [\'uuid\'],\r\n        mounted() {\r\n            if(!helper.hasPermission(\'create-notes\') && !helper.hasPermission(\'edit-notes\')){\r\n                helper.notAccessibleMsg();\r\n                this.$router.push(\'/dashboard\');\r\n            }\r\n\r\n            if(this.uuid)\r\n                this.get();\r\n            else\r\n                this.notesForm.upload_token = this.$uuid.v4();\r\n\r\n            this.getPreRequisite();\r\n        },\r\n        methods: {\r\n            hasPermission(permission){\r\n                return helper.hasPermission(permission);\r\n            },\r\n            getPreRequisite(){\r\n                let loader = this.$loading.show();\r\n                axios.get(\'/api/notes/pre-requisite\')\r\n                    .then(response => {\r\n                        this.batches = response.batches;\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    })\r\n            },\r\n            getSubjects(){\r\n                if (!this.uuid) {\r\n                    this.notesForm.subject_id = \'\';\r\n                    this.selected_subject = null;\r\n                }\r\n                let loader = this.$loading.show();\r\n                axios.post(\'/api/batch/\'+this.notesForm.batch_id+\'/subjects\')\r\n                    .then(response => {\r\n                        this.subjects = response.subjects;\r\n                        this.subject_details = response.subject_details;\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    })\r\n            },\r\n            proceed(){\r\n                if(this.uuid)\r\n                    this.update();\r\n                else\r\n                    this.store();\r\n            },\r\n            store(){\r\n                let loader = this.$loading.show();\r\n                this.notesForm.post(\'/api/notes\')\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        this.clearAttachment = !this.clearAttachment;\r\n                        this.notesForm.upload_token = this.$uuid.v4();\r\n                        this.selected_batch = null;\r\n                        this.selected_subject = null;\r\n                        this.$emit(\'completed\');\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            get(){\r\n                let loader = this.$loading.show();\r\n                axios.get(\'/api/notes/\'+this.uuid)\r\n                    .then(response => {\r\n                        let notes = response.notes;\r\n                        this.notesForm.title = notes.title;\r\n                        this.notesForm.description = notes.description;\r\n                        this.notesForm.batch_id = notes.subject.batch_id;\r\n                        this.notesForm.subject_id = notes.subject_id;\r\n                        this.selected_batch = this.notesForm.batch_id ? {id: notes.subject.batch_id, name: notes.subject.batch.course.name+\' \'+notes.subject.batch.name} : null;\r\n                        this.selected_subject = notes.subject_id ? {id: notes.subject_id, name: notes.subject.name+\' (\'+notes.subject.code+\')\'} : null;\r\n                        this.notesForm.upload_token = notes.upload_token;\r\n                        this.module_id = notes.id;\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                        this.$router.push(\'/resource/notes\');\r\n                    });\r\n            },\r\n            update(){\r\n                let loader = this.$loading.show();\r\n                this.notesForm.patch(\'/api/notes/\'+this.uuid)\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        loader.hide();\r\n                        this.$router.push(\'/resource/notes\');\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            onBatchSelect(selectedOption){\r\n                this.notesForm.batch_id = selectedOption.id;\r\n            },\r\n            onSubjectSelect(selectedOption){\r\n                this.notesForm.subject_id = selectedOption.id;\r\n            }\r\n        },\r\n        watch: {\r\n            \'notesForm.batch_id\': function(val) {\r\n                if (val) {\r\n                    this.getSubjects();\r\n                }\r\n            }\r\n        }\r\n    }\r\n<\/script>\r\n\r\n<style>\r\n.loading-overlay.is-full-page{\r\n    z-index: 1060;\r\n}\r\n</style>'],sourceRoot:""}]);const a=i},83230:(e,t,s)=>{s.r(t),s.d(t,{default:()=>n});const r={components:{notesForm:s(16079).Z},data:function(){return{uuid:this.$route.params.uuid}},mounted:function(){helper.hasPermission("edit-notes")||(helper.notAccessibleMsg(),this.$router.push("/dashboard"))}};const n=(0,s(51900).Z)(r,(function(){var e=this,t=e._self._c;return t("div",[t("div",{staticClass:"page-titles"},[t("div",{staticClass:"row"},[t("div",{staticClass:"col-12 col-sm-6"},[t("h3",{staticClass:"text-themecolor"},[e._v(e._s(e.trans("resource.edit_notes")))])]),e._v(" "),t("div",{staticClass:"col-12 col-sm-6"},[t("div",{staticClass:"action-buttons pull-right"},[t("button",{staticClass:"btn btn-info btn-sm",on:{click:function(t){return e.$router.push("/resource/notes")}}},[t("i",{staticClass:"fas fa-list"}),e._v(" "),t("span",{staticClass:"d-none d-sm-inline"},[e._v(e._s(e.trans("resource.notes")))])])])])])]),e._v(" "),t("div",{staticClass:"container-fluid"},[t("div",{staticClass:"card card-form"},[t("div",{staticClass:"card-body p-t-20"},[t("notes-form",{attrs:{uuid:e.uuid}})],1)])])])}),[],!1,null,null,null).exports},16079:(e,t,s)=>{s.d(t,{Z:()=>c});const r={components:{},data:function(){return{notesForm:new Form({batch_id:"",subject_id:"",title:"",description:"",upload_token:""}),batches:[],selected_batch:null,subjects:[],selected_subject:null,subject_detail:[],module_id:"",clearAttachment:!0}},props:["uuid"],mounted:function(){helper.hasPermission("create-notes")||helper.hasPermission("edit-notes")||(helper.notAccessibleMsg(),this.$router.push("/dashboard")),this.uuid?this.get():this.notesForm.upload_token=this.$uuid.v4(),this.getPreRequisite()},methods:{hasPermission:function(e){return helper.hasPermission(e)},getPreRequisite:function(){var e=this,t=this.$loading.show();axios.get("/api/notes/pre-requisite").then((function(s){e.batches=s.batches,t.hide()})).catch((function(e){t.hide(),helper.showErrorMsg(e)}))},getSubjects:function(){var e=this;this.uuid||(this.notesForm.subject_id="",this.selected_subject=null);var t=this.$loading.show();axios.post("/api/batch/"+this.notesForm.batch_id+"/subjects").then((function(s){e.subjects=s.subjects,e.subject_details=s.subject_details,t.hide()})).catch((function(e){t.hide(),helper.showErrorMsg(e)}))},proceed:function(){this.uuid?this.update():this.store()},store:function(){var e=this,t=this.$loading.show();this.notesForm.post("/api/notes").then((function(s){toastr.success(s.message),e.clearAttachment=!e.clearAttachment,e.notesForm.upload_token=e.$uuid.v4(),e.selected_batch=null,e.selected_subject=null,e.$emit("completed"),t.hide()})).catch((function(e){t.hide(),helper.showErrorMsg(e)}))},get:function(){var e=this,t=this.$loading.show();axios.get("/api/notes/"+this.uuid).then((function(s){var r=s.notes;e.notesForm.title=r.title,e.notesForm.description=r.description,e.notesForm.batch_id=r.subject.batch_id,e.notesForm.subject_id=r.subject_id,e.selected_batch=e.notesForm.batch_id?{id:r.subject.batch_id,name:r.subject.batch.course.name+" "+r.subject.batch.name}:null,e.selected_subject=r.subject_id?{id:r.subject_id,name:r.subject.name+" ("+r.subject.code+")"}:null,e.notesForm.upload_token=r.upload_token,e.module_id=r.id,t.hide()})).catch((function(s){t.hide(),helper.showErrorMsg(s),e.$router.push("/resource/notes")}))},update:function(){var e=this,t=this.$loading.show();this.notesForm.patch("/api/notes/"+this.uuid).then((function(s){toastr.success(s.message),t.hide(),e.$router.push("/resource/notes")})).catch((function(e){t.hide(),helper.showErrorMsg(e)}))},onBatchSelect:function(e){this.notesForm.batch_id=e.id},onSubjectSelect:function(e){this.notesForm.subject_id=e.id}},watch:{"notesForm.batch_id":function(e){e&&this.getSubjects()}}};var n=s(93379),o=s.n(n),i=s(83880),a={insert:"head",singleton:!1};o()(i.Z,a);i.Z.locals;const c=(0,s(51900).Z)(r,(function(){var e=this,t=e._self._c;return t("div",[t("form",{on:{submit:function(t){return t.preventDefault(),e.proceed.apply(null,arguments)},keydown:function(t){return e.notesForm.errors.clear(t.target.name)}}},[t("div",{staticClass:"row"},[t("div",{staticClass:"col-12 col-sm-6"},[t("div",{staticClass:"form-group"},[t("label",{attrs:{for:""}},[e._v(e._s(e.trans("academic.batch"))+" ")]),e._v(" "),t("v-select",{attrs:{label:"name","group-values":"batches","group-label":"course_group","group-select":!1,name:"batch_id",id:"batch_id",options:e.batches,placeholder:e.trans("academic.select_batch")},on:{select:e.onBatchSelect,close:function(t){return e.notesForm.errors.clear("batch_id")},remove:function(t){e.notesForm.batch_id=""}},model:{value:e.selected_batch,callback:function(t){e.selected_batch=t},expression:"selected_batch"}},[e.batches.length?e._e():t("div",{staticClass:"multiselect__option",attrs:{slot:"afterList"},slot:"afterList"},[e._v("\n                            "+e._s(e.trans("general.no_option_found"))+"\n                        ")])]),e._v(" "),t("show-error",{attrs:{"form-name":e.notesForm,"prop-name":"batch_id"}})],1),e._v(" "),e.notesForm.batch_id?t("div",{staticClass:"form-group"},[t("label",{attrs:{for:""}},[e._v(e._s(e.trans("academic.subject"))+" ")]),e._v(" "),t("v-select",{attrs:{label:"name",name:"subject_id",id:"subject_id",options:e.subjects,placeholder:e.trans("resource.select_subject")},on:{select:e.onSubjectSelect,close:function(t){return e.notesForm.errors.clear("subject_id")},remove:function(t){e.notesForm.subject_id=""}},model:{value:e.selected_subject,callback:function(t){e.selected_subject=t},expression:"selected_subject"}},[e.subjects.length?e._e():t("div",{staticClass:"multiselect__option",attrs:{slot:"afterList"},slot:"afterList"},[e._v("\n                            "+e._s(e.trans("general.no_option_found"))+"\n                        ")])]),e._v(" "),t("show-error",{attrs:{"form-name":e.notesForm,"prop-name":"subject_id"}})],1):e._e(),e._v(" "),t("div",{staticClass:"form-group"},[t("label",{attrs:{for:""}},[e._v(e._s(e.trans("resource.notes_title")))]),e._v(" "),t("input",{directives:[{name:"model",rawName:"v-model",value:e.notesForm.title,expression:"notesForm.title"}],staticClass:"form-control",attrs:{type:"text",name:"title",placeholder:e.trans("resource.notes_title")},domProps:{value:e.notesForm.title},on:{input:function(t){t.target.composing||e.$set(e.notesForm,"title",t.target.value)}}}),e._v(" "),t("show-error",{attrs:{"form-name":e.notesForm,"prop-name":"title"}})],1),e._v(" "),t("div",{staticClass:"form-group"},[t("file-upload-input",{attrs:{"button-text":e.trans("general.upload_document"),token:e.notesForm.upload_token,module:"notes","clear-file":e.clearAttachment,"module-id":e.module_id}})],1)]),e._v(" "),t("div",{staticClass:"col-12 col-sm-6"},[t("div",{staticClass:"form-group"},[t("html-editor",{attrs:{name:"description",model:e.notesForm.description,height:"300",isUpdate:!!e.uuid},on:{"update:model":function(t){return e.$set(e.notesForm,"description",t)},clearErrors:function(t){return e.notesForm.errors.clear("description")}}}),e._v(" "),t("show-error",{attrs:{"form-name":e.notesForm,"prop-name":"description"}})],1)])]),e._v(" "),t("div",{staticClass:"card-footer text-right"},[t("router-link",{directives:[{name:"show",rawName:"v-show",value:e.uuid,expression:"uuid"}],staticClass:"btn btn-danger waves-effect waves-light",attrs:{to:"/resource/notes"}},[e._v(e._s(e.trans("general.cancel")))]),e._v(" "),e.uuid?e._e():t("button",{staticClass:"btn btn-danger waves-effect waves-light",attrs:{type:"button"},on:{click:function(t){return e.$emit("cancel")}}},[e._v(e._s(e.trans("general.cancel")))]),e._v(" "),t("button",{staticClass:"btn btn-info waves-effect waves-light",attrs:{type:"submit"}},[e.uuid?t("span",[e._v(e._s(e.trans("general.update")))]):t("span",[e._v(e._s(e.trans("general.save")))])])],1)])])}),[],!1,null,null,null).exports}}]);