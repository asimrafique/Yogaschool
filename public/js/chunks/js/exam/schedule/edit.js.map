{"version":3,"file":"js/chunks/js/exam/schedule/edit.js?id=eed22edad1b41229","mappings":";;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChHA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC0GA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;AClZA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;ACpOA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAUA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AAAA;AAEA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AAWA;AAOA;AAEA;AAAA;AAEA;AAAA;AACA;AAAA;AAMA;AAAA;AAGA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAaA;AAAA;AAGA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAQA;AACA;AACA;AAKA;AACA;AACA;AACA;AAIA;AAAA;AAiBA;AAAA;AAGA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AAIA;AACA;AAQA;AAMA;AAIA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AACA;AAeA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AAGA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAOA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC5wBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;ACvCA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA","sources":["webpack://InstiKit/resources/js/views/exam/form.vue","webpack://InstiKit/resources/js/views/exam/schedule/edit.vue","webpack://InstiKit/resources/js/views/exam/schedule/form.vue","webpack://InstiKit/./resources/js/views/exam/form.vue","webpack://InstiKit/./resources/js/views/exam/schedule/edit.vue","webpack://InstiKit/./resources/js/views/exam/schedule/form.vue","webpack://InstiKit/./resources/js/views/exam/schedule/form.vue?950c","webpack://InstiKit/./resources/js/views/exam/schedule/form.vue?10e2","webpack://InstiKit/./resources/js/views/exam/form.vue?bbc6","webpack://InstiKit/./resources/js/views/exam/schedule/edit.vue?a3e4","webpack://InstiKit/./resources/js/views/exam/schedule/form.vue?d6cb","webpack://InstiKit/./resources/js/views/exam/form.vue?4eac","webpack://InstiKit/./resources/js/views/exam/schedule/edit.vue?9328","webpack://InstiKit/./resources/js/views/exam/schedule/form.vue?a09a","webpack://InstiKit/./resources/js/views/exam/schedule/edit.vue?f1e1"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"proceed\" @keydown=\"examForm.errors.clear($event.target.name)\">\r\n        <div class=\"row\">\r\n            <div class=\"col-12 col-sm-4\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"\">{{trans('exam.term')}} </label>\r\n                    <v-select label=\"name\" v-model=\"selected_exam_term\" name=\"exam_term_id\" id=\"exam_term_id\" :options=\"exam_terms\" :placeholder=\"trans('exam.select_term')\" @select=\"onExamTermSelect\" @close=\"examForm.errors.clear('exam_term_id')\" @remove=\"examForm.exam_term_id = ''\">\r\n                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!exam_terms.length\">\r\n                            {{trans('general.no_option_found')}}\r\n                        </div>\r\n                    </v-select>\r\n                    <show-error :form-name=\"examForm\" prop-name=\"exam_term_id\"></show-error>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-12 col-sm-4\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"\">{{trans('exam.exam_name')}}</label>\r\n                    <input class=\"form-control\" type=\"text\" v-model=\"examForm.name\" name=\"name\" :placeholder=\"trans('exam.exam_name')\">\r\n                    <show-error :form-name=\"examForm\" prop-name=\"name\"></show-error>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-12 col-sm-4\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"\">{{trans('exam.exam_description')}}</label>\r\n                    <input class=\"form-control\" type=\"text\" v-model=\"examForm.description\" name=\"description\" :placeholder=\"trans('exam.exam_description')\">\r\n                    <show-error :form-name=\"examForm\" prop-name=\"description\"></show-error>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"card-footer text-right\">\r\n            <router-link to=\"/exam\" class=\"btn btn-danger waves-effect waves-light \" v-show=\"id\">{{trans('general.cancel')}}</router-link>\r\n            <button v-if=\"!id\" type=\"button\" class=\"btn btn-danger waves-effect waves-light \" @click=\"$emit('cancel')\">{{trans('general.cancel')}}</button>\r\n            <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\r\n                <span v-if=\"id\">{{trans('general.update')}}</span>\r\n                <span v-else>{{trans('general.save')}}</span>\r\n            </button>\r\n        </div>\r\n    </form>\r\n</template>\r\n\r\n\r\n<script>\r\n    export default {\r\n        components: {},\r\n        data() {\r\n            return {\r\n                examForm: new Form({\r\n                    name : '',\r\n                    exam_term_id: '',\r\n                    description : ''\r\n                }),\r\n                exam_terms: [],\r\n                selected_exam_term: null\r\n            };\r\n        },\r\n        props: ['id'],\r\n        mounted() {\r\n            if(!helper.hasPermission('create-exam') && !helper.hasPermission('edit-exam')){\r\n                helper.notAccessibleMsg();\r\n                this.$router.push('/dashboard');\r\n            }\r\n\r\n            this.getPreRequisite();\r\n        },\r\n        methods: {\r\n            proceed(){\r\n                if(this.id)\r\n                    this.update();\r\n                else\r\n                    this.store();\r\n            },\r\n            getPreRequisite(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/exam/pre-requisite')\r\n                    .then(response => {\r\n                        this.exam_terms = response.exam_terms;\r\n\r\n                        if(this.id)\r\n                            this.get();\r\n\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    })\r\n            },\r\n            store(){\r\n                let loader = this.$loading.show();\r\n                this.examForm.post('/api/exam')\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        this.selected_exam_term = null;\r\n                        this.$emit('completed');\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            get(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/exam/'+this.id)\r\n                    .then(response => {\r\n                        this.examForm.name = response.name;\r\n                        this.examForm.exam_term_id = response.exam_term_id;\r\n                        this.selected_exam_term = response.exam_term_id ? {id:response.exam_term_id, name:response.term.name+' ('+response.term.course_group.name+')'} : null;\r\n                        this.examForm.description = response.description;\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                        this.$router.push('/exam');\r\n                    });\r\n            },\r\n            update(){\r\n                let loader = this.$loading.show();\r\n                this.examForm.patch('/api/exam/'+this.id)\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        loader.hide();\r\n                        this.$router.push('/exam');\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            getConfig(config) {\r\n                return helper.getConfig(config);\r\n            },\r\n            onExamTermSelect(selectedOption){\r\n                this.examForm.exam_term_id = selectedOption.id;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n","<template>\r\n    <div>\r\n        <div class=\"page-titles\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12 col-sm-6\">\r\n                    <h3 class=\"text-themecolor\">{{trans('exam.edit_schedule')}}</h3>\r\n                </div>\r\n                <div class=\"col-12 col-sm-6\">\r\n                    <div class=\"action-buttons pull-right\">\r\n                        <button class=\"btn btn-info btn-sm\" @click=\"$router.push('/exam/schedule')\"><i class=\"fas fa-list\"></i> <span class=\"d-none d-sm-inline\">{{trans('exam.schedule')}}</span></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"container-fluid\">\r\n            <div class=\"card card-form\">\r\n                <div class=\"card-body p-t-20\">\r\n                    <exam-schedule-form :id=\"id\"></exam-schedule-form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    import examScheduleForm from './form';\r\n\r\n    export default {\r\n        components : { examScheduleForm },\r\n        data() {\r\n            return {\r\n                id:this.$route.params.id\r\n            }\r\n        },\r\n        mounted(){\r\n            if(!helper.hasPermission('edit-exam-schedule')){\r\n                helper.notAccessibleMsg();\r\n                this.$router.push('/dashboard');\r\n            }\r\n        }\r\n    }\r\n</script>\r\n","<template>\r\n    <div>\r\n        <form @submit.prevent=\"proceed\" @keydown=\"scheduleForm.errors.clear($event.target.name)\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.exam')}} </label> <button type=\"button\" class=\"btn btn-xs btn-info pull-right\" v-if=\"hasPermission('create-exam')\" @click=\"showExamModal = true\">{{trans('general.add_new')}}</button>\r\n                        <v-select label=\"name\" v-model=\"selected_exam\" name=\"exam_id\" id=\"exam_id\" :options=\"exams\" :placeholder=\"trans('exam.select_exam')\" @select=\"onExamSelect\" @close=\"scheduleForm.errors.clear('exam_id')\" @remove=\"scheduleForm.exam_id = ''\" :disabled=\"id ? true : false\">\r\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!exams.length\">\r\n                                {{trans('general.no_option_found')}}\r\n                            </div>\r\n                        </v-select>\r\n                        <show-error :form-name=\"scheduleForm\" prop-name=\"exam_id\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('academic.batch')}} </label>\r\n                        <v-select label=\"name\" v-model=\"selected_batch\" group-values=\"batches\" group-label=\"course_group\" :group-select=\"false\" name=\"batch_id\" id=\"batch_id\" :options=\"batches\" :placeholder=\"trans('academic.select_batch')\" @select=\"onBatchSelect\" @close=\"scheduleForm.errors.clear('batch_id')\" @remove=\"scheduleForm.batch_id = ''\" :disabled=\"id ? true : false\">\r\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!batches.length\">\r\n                                {{trans('general.no_option_found')}}\r\n                            </div>\r\n                        </v-select>\r\n                        <show-error :form-name=\"scheduleForm\" prop-name=\"batch_id\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.grade')}} </label>\r\n                        <v-select label=\"name\" v-model=\"selected_exam_grade\" name=\"exam_grade_id\" id=\"exam_grade_id\" :options=\"exam_grades\" :placeholder=\"trans('exam.select_grade')\" @select=\"onExamGradeSelect\" @close=\"scheduleForm.errors.clear('exam_grade_id')\" @remove=\"scheduleForm.exam_grade_id = ''\">\r\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!exam_grades.length\">\r\n                                {{trans('general.no_option_found')}}\r\n                            </div>\r\n                        </v-select>\r\n                        <show-error :form-name=\"scheduleForm\" prop-name=\"exam_grade_id\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.assessment')}} </label>\r\n                        <v-select label=\"name\" v-model=\"selected_exam_assessment\" name=\"exam_assessment_id\" id=\"exam_assessment_id\" :options=\"exam_assessments\" :placeholder=\"trans('exam.select_assessment')\" @select=\"onExamAssessmentSelect\" @close=\"scheduleForm.errors.clear('exam_assessment_id')\" @remove=\"scheduleForm.exam_assessment_id = ''\">\r\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!exam_assessments.length\">\r\n                                {{trans('general.no_option_found')}}\r\n                            </div>\r\n                        </v-select>\r\n                        <show-error :form-name=\"scheduleForm\" prop-name=\"exam_assessment_id\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.overall_pass_percentage')}}</label>\r\n                        <input class=\"form-control\" type=\"text\" v-model=\"scheduleForm.overall_pass_percentage\" name=\"overall_pass_percentage\" :placeholder=\"trans('exam.overall_pass_percentage')\">\r\n                        <show-error :form-name=\"scheduleForm\" prop-name=\"overall_pass_percentage\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <switches class=\"m-l-20\" v-model=\"scheduleForm.show_result\" theme=\"bootstrap\" color=\"success\"></switches> {{trans('exam.show_result')}}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row m-b-10\" v-if=\"scheduleForm.records.length && exam_assessment\">\r\n                <div class=\"col-12 col-sm-3\">\r\n\r\n                </div>\r\n                <div class=\"col-12 col-sm-3\">\r\n\r\n                </div>\r\n                <div class=\"col-12 col-sm-3\" v-for=\"detail in exam_assessment.details\">\r\n                    {{detail.name}} {{trans('exam.observation_detail_max_mark')}}\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row\" v-for=\"(record,index) in scheduleForm.records\">\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        {{record.subject_name}}\r\n                        <div class=\"form-group\">\r\n                            <label class=\"custom-control custom-checkbox\">\r\n                                <input type=\"checkbox\" class=\"custom-control-input\" value=\"1\" v-model=\"record.has_no_exam\">\r\n                                <span class=\"custom-control-label\">{{trans('academic.subject_has_no_exam')}}</span>\r\n                            </label>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <template v-if=\"! record.has_no_exam\">\r\n                    <div class=\"col-12 col-sm-3\">\r\n                        <div class=\"form-group\">\r\n                            <datepicker v-model=\"record.date\" :bootstrapStyling=\"true\" @selected=\"scheduleForm.errors.clear(getScheduleDateName(index))\" :placeholder=\"trans('exam.schedule_date')\"></datepicker>\r\n                            <show-error :form-name=\"scheduleForm\" :prop-name=\"getScheduleDateName(index)\"></show-error>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"col-12 col-sm-3\" v-for=\"(detail,idx) in record.assessment_details\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12 col-sm-3\">\r\n                                <div class=\"form-group\">\r\n                                    <label class=\"custom-control custom-checkbox\">\r\n                                        <input type=\"checkbox\" class=\"custom-control-input\" value=\"1\" v-model=\"detail.is_applicable\">\r\n                                        <span class=\"custom-control-label\">{{trans('assessment.is_applicable')}}</span>\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-9\" v-if=\"detail.is_applicable\">\r\n                                <div class=\"form-group\">\r\n                                    <input class=\"form-control\" type=\"text\" v-model=\"detail.max_mark\" :name=\"getDetailMaxMark(index, idx)\" :placeholder=\"trans('exam.assessment_detail_max_mark')\">\r\n                                    <show-error :form-name=\"scheduleForm\" :prop-name=\"getDetailMaxMark(index, idx)\"></show-error>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </template>\r\n            </div>\r\n            <div class=\"card-footer text-right\">\r\n                <router-link to=\"/exam/schedule\" class=\"btn btn-danger waves-effect waves-light \">{{trans('general.cancel')}}</router-link>\r\n                <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\r\n                    <span v-if=\"id\">{{trans('general.update')}}</span>\r\n                    <span v-else>{{trans('general.save')}}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n\r\n        <transition name=\"modal\" v-if=\"showExamModal\">\r\n            <div class=\"modal-mask\">\r\n                <div class=\"modal-wrapper\">\r\n                    <div class=\"modal-container modal-lg\">\r\n                        <div class=\"modal-header\">\r\n                            <slot name=\"header\">\r\n                                {{trans('exam.add_new_exam')}}\r\n                                <span class=\"float-right pointer\" @click=\"showExamModal = false\">x</span>\r\n                            </slot>\r\n                        </div>\r\n                        <div class=\"modal-body\">\r\n                            <slot name=\"body\">\r\n                                <exam-form @completed=\"getPreRequisite\" @cancel=\"showExamModal = false\"></exam-form>\r\n                                <div class=\"clearfix\"></div>\r\n                            </slot>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </transition>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\n    import examForm from '../form'\r\n\r\n    export default {\r\n        components: {examForm},\r\n        data() {\r\n            return {\r\n                scheduleForm: new Form({\r\n                    batch_id: '',\r\n                    exam_id: '',\r\n                    exam_grade_id: '',\r\n                    exam_assessment_id: '',\r\n                    description: '',\r\n                    overall_pass_percentage: '',\r\n                    show_result: 0,\r\n                    records: []\r\n                }),\r\n                all_batches: [],\r\n                batches: [],\r\n                selected_batch: null,\r\n                exams: [],\r\n                selected_exam: null,\r\n                exam_grades: [],\r\n                selected_exam_grade: null,\r\n                exam_assessments: [],\r\n                selected_exam_assessment: null,\r\n                exam_assessments: [],\r\n                batch_with_subjects: [],\r\n                exam_assessment_with_details: [],\r\n                exam_assessment: {},\r\n                showExamModal: false\r\n            };\r\n        },\r\n        props: ['id'],\r\n        mounted() {\r\n            if(!helper.hasPermission('create-exam-schedule') && !helper.hasPermission('edit-exam-schedule')){\r\n                helper.notAccessibleMsg();\r\n                this.$router.push('/dashboard');\r\n            }\r\n\r\n            this.getPreRequisite();\r\n        },\r\n        methods: {\r\n            hasPermission(permission){\r\n                return helper.hasPermission(permission);\r\n            },\r\n            getScheduleDateName(index){\r\n                return index+'_schedule_date';\r\n            },\r\n            getDetailMaxMark(index, idx){\r\n                return index+'_'+idx+'_max_mark';\r\n            },\r\n            getPreRequisite(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/exam/schedule/pre-requisite')\r\n                    .then(response => {\r\n                        this.all_batches = response.batches;\r\n                        this.exams = response.exams;\r\n                        this.exam_grades = response.exam_grades;\r\n                        this.exam_assessments = response.exam_assessments;\r\n                        this.batch_with_subjects = response.batch_with_subjects;\r\n                        this.exam_assessment_with_details = response.exam_assessment_with_details;\r\n\r\n                        if(this.id)\r\n                            this.get();\r\n\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    })\r\n            },\r\n            getSubjects(){\r\n                let loader = this.$loading.show();\r\n\r\n                let batch = this.batch_with_subjects.find(o => o.id == this.scheduleForm.batch_id);\r\n\r\n                if (typeof batch == 'undefined') {\r\n                    loader.hide();\r\n                    return;\r\n                }\r\n\r\n                this.scheduleForm.records = [];\r\n\r\n                batch.subjects.forEach(subject => {\r\n                    this.scheduleForm.records.push({\r\n                        subject_id: subject.id,\r\n                        subject_name: subject.name+' ('+subject.code+')',\r\n                        has_no_exam: subject.has_no_exam,\r\n                        date: '',\r\n                        assessment_details: []\r\n                    })\r\n                });\r\n                this.selected_exam_assessment = null;\r\n                this.scheduleForm.exam_assessment_id = '';\r\n                \r\n                loader.hide();\r\n            },\r\n            proceed(){\r\n                if(this.id)\r\n                    this.update();\r\n                else\r\n                    this.store();\r\n            },\r\n            store(){\r\n                let loader = this.$loading.show();\r\n                this.scheduleForm.post('/api/exam/schedule')\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        this.selected_batch = null;\r\n                        this.selected_exam = null;\r\n                        this.selected_exam_grade = null;\r\n                        this.selected_exam_assessment = null;\r\n                        this.scheduleForm.records = [];\r\n                        this.$emit('completed');\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            get(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/exam/schedule/'+this.id)\r\n                    .then(response => {\r\n                        this.selected_exam = response.selected_exam;\r\n                        response = response.exam_schedule;\r\n\r\n                        this.scheduleForm.overall_pass_percentage = response.options.overall_pass_percentage;\r\n                        this.scheduleForm.show_result = response.options.show_result;\r\n\r\n                        if (this.selected_exam && this.selected_exam.course_group_id)\r\n                            this.batches = this.all_batches.filter(o => o.course_group === this.selected_exam.course_group_name);\r\n                        else\r\n                            this.batches = this.all_batches;\r\n\r\n                        this.scheduleForm.batch_id = response.batch_id;\r\n                        this.selected_batch = this.scheduleForm.batch_id ? {id: response.batch_id, name: response.batch.course.name+' '+response.batch.name} : null;\r\n\r\n                        this.scheduleForm.exam_id = response.exam_id;\r\n\r\n                        this.scheduleForm.exam_grade_id = response.exam_grade_id;\r\n                        this.selected_exam_grade = this.scheduleForm.exam_grade_id ? {id: response.exam_grade_id, name: response.grade.name} : null;\r\n\r\n                        this.scheduleForm.exam_assessment_id = response.exam_assessment_id;\r\n                        this.selected_exam_assessment = this.scheduleForm.exam_assessment_id ? {id: response.exam_assessment_id, name: response.assessment.name} : null;\r\n                        this.exam_assessment = this.scheduleForm.exam_assessment_id ? response.assessment : {};\r\n\r\n                        let batch = this.batch_with_subjects.find(o => o.id == this.scheduleForm.batch_id);\r\n                        this.scheduleForm.records = [];\r\n\r\n                        let record = {};\r\n                        batch.subjects.forEach(subject => {\r\n                            record = response.records.find(o => o.subject_id == subject.id);\r\n\r\n                            if (typeof record == 'undefined') {\r\n                                record = {\r\n                                    options: {has_no_exam: 0},\r\n                                    date: ''\r\n                                }\r\n                            }\r\n\r\n                            let assessment_details = [];\r\n                            if (record.options.assessment_details && Array.isArray(record.options.assessment_details)) {\r\n                                record.options.assessment_details.forEach(detail => {\r\n                                    assessment_details.push({\r\n                                        id: detail.id,\r\n                                        is_applicable: detail.is_applicable,\r\n                                        max_mark: detail.max_mark,\r\n                                        pass_percentage: detail.pass_percentage\r\n                                    })\r\n                                })\r\n                            } else {\r\n                                response.assessment.details.forEach(detail => {\r\n                                    assessment_details.push({\r\n                                        id: detail.id,\r\n                                        is_applicable: true,\r\n                                        max_mark: detail.max_mark,\r\n                                        pass_percentage: detail.pass_percentage\r\n                                    })\r\n                                })\r\n                            }\r\n\r\n                            this.scheduleForm.records.push({\r\n                                subject_id: subject.id,\r\n                                subject_name: subject.name+' ('+subject.code+')',\r\n                                has_no_exam: record.date ? 0 : 1,\r\n                                date: record.date,\r\n                                assessment_details: assessment_details\r\n                            });\r\n                        });\r\n                        \r\n                        this.module_id = response.id;\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                        // this.$router.push('/exam/schedule');\r\n                    });\r\n            },\r\n            update(){\r\n                let loader = this.$loading.show();\r\n                this.scheduleForm.patch('/api/exam/schedule/'+this.id)\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        loader.hide();\r\n                        this.$router.push('/exam/schedule');\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            onBatchSelect(selectedOption){\r\n                this.scheduleForm.batch_id = selectedOption.id;\r\n            },\r\n            onExamSelect(selectedOption){\r\n                this.scheduleForm.batch_id = '';\r\n                this.selected_batch = null;\r\n                this.scheduleForm.records = [];\r\n                if (selectedOption.course_group_id)\r\n                    this.batches = this.all_batches.filter(o => o.course_group === selectedOption.course_group_name);\r\n                else\r\n                    this.batches = this.all_batches;\r\n                this.scheduleForm.exam_id = selectedOption.id;\r\n            },\r\n            onExamGradeSelect(selectedOption){\r\n                this.scheduleForm.exam_grade_id = selectedOption.id;\r\n            },\r\n            onExamAssessmentSelect(selectedOption){\r\n                this.scheduleForm.exam_assessment_id = selectedOption.id;\r\n                this.exam_assessment = this.exam_assessment_with_details.find(o => o.id == selectedOption.id);\r\n                this.scheduleForm.records.forEach(record => {\r\n                    record.assessment_details = [];\r\n                    this.exam_assessment.details.forEach(detail => {\r\n                        record.assessment_details.push({\r\n                            id: detail.id,\r\n                            is_applicable: true,\r\n                            max_mark: detail.max_mark,\r\n                            pass_percentage: detail.pass_percentage\r\n                        });\r\n                    });\r\n                })\r\n            },\r\n            hideExamForm(){\r\n                $('.add-exam-form').modal('hide');\r\n            }\r\n        },\r\n        watch: {\r\n            'scheduleForm.batch_id': function(val) {\r\n                if (!this.id)\r\n                    this.getSubjects();\r\n            }\r\n        }\r\n    }\r\n</script>\r\n\r\n<style>\r\n.loading-overlay.is-full-page{\r\n    z-index: 1060;\r\n}\r\n</style>","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"form\",\n    {\n      on: {\n        submit: function ($event) {\n          $event.preventDefault()\n          return _vm.proceed.apply(null, arguments)\n        },\n        keydown: function ($event) {\n          return _vm.examForm.errors.clear($event.target.name)\n        },\n      },\n    },\n    [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"exam.term\")) + \" \"),\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"v-select\",\n                {\n                  attrs: {\n                    label: \"name\",\n                    name: \"exam_term_id\",\n                    id: \"exam_term_id\",\n                    options: _vm.exam_terms,\n                    placeholder: _vm.trans(\"exam.select_term\"),\n                  },\n                  on: {\n                    select: _vm.onExamTermSelect,\n                    close: function ($event) {\n                      return _vm.examForm.errors.clear(\"exam_term_id\")\n                    },\n                    remove: function ($event) {\n                      _vm.examForm.exam_term_id = \"\"\n                    },\n                  },\n                  model: {\n                    value: _vm.selected_exam_term,\n                    callback: function ($$v) {\n                      _vm.selected_exam_term = $$v\n                    },\n                    expression: \"selected_exam_term\",\n                  },\n                },\n                [\n                  !_vm.exam_terms.length\n                    ? _c(\n                        \"div\",\n                        {\n                          staticClass: \"multiselect__option\",\n                          attrs: { slot: \"afterList\" },\n                          slot: \"afterList\",\n                        },\n                        [\n                          _vm._v(\n                            \"\\n                        \" +\n                              _vm._s(_vm.trans(\"general.no_option_found\")) +\n                              \"\\n                    \"\n                          ),\n                        ]\n                      )\n                    : _vm._e(),\n                ]\n              ),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.examForm,\n                  \"prop-name\": \"exam_term_id\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"exam.exam_name\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.examForm.name,\n                    expression: \"examForm.name\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"name\",\n                  placeholder: _vm.trans(\"exam.exam_name\"),\n                },\n                domProps: { value: _vm.examForm.name },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(_vm.examForm, \"name\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.examForm, \"prop-name\": \"name\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"exam.exam_description\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.examForm.description,\n                    expression: \"examForm.description\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"description\",\n                  placeholder: _vm.trans(\"exam.exam_description\"),\n                },\n                domProps: { value: _vm.examForm.description },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(_vm.examForm, \"description\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.examForm,\n                  \"prop-name\": \"description\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        { staticClass: \"card-footer text-right\" },\n        [\n          _c(\n            \"router-link\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.id,\n                  expression: \"id\",\n                },\n              ],\n              staticClass: \"btn btn-danger waves-effect waves-light\",\n              attrs: { to: \"/exam\" },\n            },\n            [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n          ),\n          _vm._v(\" \"),\n          !_vm.id\n            ? _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn-danger waves-effect waves-light\",\n                  attrs: { type: \"button\" },\n                  on: {\n                    click: function ($event) {\n                      return _vm.$emit(\"cancel\")\n                    },\n                  },\n                },\n                [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\n            \"button\",\n            {\n              staticClass: \"btn btn-info waves-effect waves-light\",\n              attrs: { type: \"submit\" },\n            },\n            [\n              _vm.id\n                ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n            ]\n          ),\n        ],\n        1\n      ),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"page-titles\" }, [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\"h3\", { staticClass: \"text-themecolor\" }, [\n            _vm._v(_vm._s(_vm.trans(\"exam.edit_schedule\"))),\n          ]),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\"div\", { staticClass: \"action-buttons pull-right\" }, [\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-info btn-sm\",\n                on: {\n                  click: function ($event) {\n                    return _vm.$router.push(\"/exam/schedule\")\n                  },\n                },\n              },\n              [\n                _c(\"i\", { staticClass: \"fas fa-list\" }),\n                _vm._v(\" \"),\n                _c(\"span\", { staticClass: \"d-none d-sm-inline\" }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.schedule\"))),\n                ]),\n              ]\n            ),\n          ]),\n        ]),\n      ]),\n    ]),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"container-fluid\" }, [\n      _c(\"div\", { staticClass: \"card card-form\" }, [\n        _c(\n          \"div\",\n          { staticClass: \"card-body p-t-20\" },\n          [_c(\"exam-schedule-form\", { attrs: { id: _vm.id } })],\n          1\n        ),\n      ]),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"div\",\n    [\n      _c(\n        \"form\",\n        {\n          on: {\n            submit: function ($event) {\n              $event.preventDefault()\n              return _vm.proceed.apply(null, arguments)\n            },\n            keydown: function ($event) {\n              return _vm.scheduleForm.errors.clear($event.target.name)\n            },\n          },\n        },\n        [\n          _c(\"div\", { staticClass: \"row\" }, [\n            _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"exam.exam\")) + \" \"),\n                  ]),\n                  _vm._v(\" \"),\n                  _vm.hasPermission(\"create-exam\")\n                    ? _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-xs btn-info pull-right\",\n                          attrs: { type: \"button\" },\n                          on: {\n                            click: function ($event) {\n                              _vm.showExamModal = true\n                            },\n                          },\n                        },\n                        [_vm._v(_vm._s(_vm.trans(\"general.add_new\")))]\n                      )\n                    : _vm._e(),\n                  _vm._v(\" \"),\n                  _c(\n                    \"v-select\",\n                    {\n                      attrs: {\n                        label: \"name\",\n                        name: \"exam_id\",\n                        id: \"exam_id\",\n                        options: _vm.exams,\n                        placeholder: _vm.trans(\"exam.select_exam\"),\n                        disabled: _vm.id ? true : false,\n                      },\n                      on: {\n                        select: _vm.onExamSelect,\n                        close: function ($event) {\n                          return _vm.scheduleForm.errors.clear(\"exam_id\")\n                        },\n                        remove: function ($event) {\n                          _vm.scheduleForm.exam_id = \"\"\n                        },\n                      },\n                      model: {\n                        value: _vm.selected_exam,\n                        callback: function ($$v) {\n                          _vm.selected_exam = $$v\n                        },\n                        expression: \"selected_exam\",\n                      },\n                    },\n                    [\n                      !_vm.exams.length\n                        ? _c(\n                            \"div\",\n                            {\n                              staticClass: \"multiselect__option\",\n                              attrs: { slot: \"afterList\" },\n                              slot: \"afterList\",\n                            },\n                            [\n                              _vm._v(\n                                \"\\n                            \" +\n                                  _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                  \"\\n                        \"\n                              ),\n                            ]\n                          )\n                        : _vm._e(),\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.scheduleForm,\n                      \"prop-name\": \"exam_id\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"academic.batch\")) + \" \"),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"v-select\",\n                    {\n                      attrs: {\n                        label: \"name\",\n                        \"group-values\": \"batches\",\n                        \"group-label\": \"course_group\",\n                        \"group-select\": false,\n                        name: \"batch_id\",\n                        id: \"batch_id\",\n                        options: _vm.batches,\n                        placeholder: _vm.trans(\"academic.select_batch\"),\n                        disabled: _vm.id ? true : false,\n                      },\n                      on: {\n                        select: _vm.onBatchSelect,\n                        close: function ($event) {\n                          return _vm.scheduleForm.errors.clear(\"batch_id\")\n                        },\n                        remove: function ($event) {\n                          _vm.scheduleForm.batch_id = \"\"\n                        },\n                      },\n                      model: {\n                        value: _vm.selected_batch,\n                        callback: function ($$v) {\n                          _vm.selected_batch = $$v\n                        },\n                        expression: \"selected_batch\",\n                      },\n                    },\n                    [\n                      !_vm.batches.length\n                        ? _c(\n                            \"div\",\n                            {\n                              staticClass: \"multiselect__option\",\n                              attrs: { slot: \"afterList\" },\n                              slot: \"afterList\",\n                            },\n                            [\n                              _vm._v(\n                                \"\\n                            \" +\n                                  _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                  \"\\n                        \"\n                              ),\n                            ]\n                          )\n                        : _vm._e(),\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.scheduleForm,\n                      \"prop-name\": \"batch_id\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"exam.grade\")) + \" \"),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"v-select\",\n                    {\n                      attrs: {\n                        label: \"name\",\n                        name: \"exam_grade_id\",\n                        id: \"exam_grade_id\",\n                        options: _vm.exam_grades,\n                        placeholder: _vm.trans(\"exam.select_grade\"),\n                      },\n                      on: {\n                        select: _vm.onExamGradeSelect,\n                        close: function ($event) {\n                          return _vm.scheduleForm.errors.clear(\"exam_grade_id\")\n                        },\n                        remove: function ($event) {\n                          _vm.scheduleForm.exam_grade_id = \"\"\n                        },\n                      },\n                      model: {\n                        value: _vm.selected_exam_grade,\n                        callback: function ($$v) {\n                          _vm.selected_exam_grade = $$v\n                        },\n                        expression: \"selected_exam_grade\",\n                      },\n                    },\n                    [\n                      !_vm.exam_grades.length\n                        ? _c(\n                            \"div\",\n                            {\n                              staticClass: \"multiselect__option\",\n                              attrs: { slot: \"afterList\" },\n                              slot: \"afterList\",\n                            },\n                            [\n                              _vm._v(\n                                \"\\n                            \" +\n                                  _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                  \"\\n                        \"\n                              ),\n                            ]\n                          )\n                        : _vm._e(),\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.scheduleForm,\n                      \"prop-name\": \"exam_grade_id\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"exam.assessment\")) + \" \"),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"v-select\",\n                    {\n                      attrs: {\n                        label: \"name\",\n                        name: \"exam_assessment_id\",\n                        id: \"exam_assessment_id\",\n                        options: _vm.exam_assessments,\n                        placeholder: _vm.trans(\"exam.select_assessment\"),\n                      },\n                      on: {\n                        select: _vm.onExamAssessmentSelect,\n                        close: function ($event) {\n                          return _vm.scheduleForm.errors.clear(\n                            \"exam_assessment_id\"\n                          )\n                        },\n                        remove: function ($event) {\n                          _vm.scheduleForm.exam_assessment_id = \"\"\n                        },\n                      },\n                      model: {\n                        value: _vm.selected_exam_assessment,\n                        callback: function ($$v) {\n                          _vm.selected_exam_assessment = $$v\n                        },\n                        expression: \"selected_exam_assessment\",\n                      },\n                    },\n                    [\n                      !_vm.exam_assessments.length\n                        ? _c(\n                            \"div\",\n                            {\n                              staticClass: \"multiselect__option\",\n                              attrs: { slot: \"afterList\" },\n                              slot: \"afterList\",\n                            },\n                            [\n                              _vm._v(\n                                \"\\n                            \" +\n                                  _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                  \"\\n                        \"\n                              ),\n                            ]\n                          )\n                        : _vm._e(),\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.scheduleForm,\n                      \"prop-name\": \"exam_assessment_id\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"exam.overall_pass_percentage\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.scheduleForm.overall_pass_percentage,\n                        expression: \"scheduleForm.overall_pass_percentage\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    attrs: {\n                      type: \"text\",\n                      name: \"overall_pass_percentage\",\n                      placeholder: _vm.trans(\"exam.overall_pass_percentage\"),\n                    },\n                    domProps: {\n                      value: _vm.scheduleForm.overall_pass_percentage,\n                    },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) return\n                        _vm.$set(\n                          _vm.scheduleForm,\n                          \"overall_pass_percentage\",\n                          $event.target.value\n                        )\n                      },\n                    },\n                  }),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.scheduleForm,\n                      \"prop-name\": \"overall_pass_percentage\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ]),\n            _vm._v(\" \"),\n            _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"switches\", {\n                    staticClass: \"m-l-20\",\n                    attrs: { theme: \"bootstrap\", color: \"success\" },\n                    model: {\n                      value: _vm.scheduleForm.show_result,\n                      callback: function ($$v) {\n                        _vm.$set(_vm.scheduleForm, \"show_result\", $$v)\n                      },\n                      expression: \"scheduleForm.show_result\",\n                    },\n                  }),\n                  _vm._v(\n                    \" \" +\n                      _vm._s(_vm.trans(\"exam.show_result\")) +\n                      \"\\n                \"\n                  ),\n                ],\n                1\n              ),\n            ]),\n          ]),\n          _vm._v(\" \"),\n          _vm.scheduleForm.records.length && _vm.exam_assessment\n            ? _c(\n                \"div\",\n                { staticClass: \"row m-b-10\" },\n                [\n                  _c(\"div\", { staticClass: \"col-12 col-sm-3\" }),\n                  _vm._v(\" \"),\n                  _c(\"div\", { staticClass: \"col-12 col-sm-3\" }),\n                  _vm._v(\" \"),\n                  _vm._l(_vm.exam_assessment.details, function (detail) {\n                    return _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                      _vm._v(\n                        \"\\n                \" +\n                          _vm._s(detail.name) +\n                          \" \" +\n                          _vm._s(\n                            _vm.trans(\"exam.observation_detail_max_mark\")\n                          ) +\n                          \"\\n            \"\n                      ),\n                    ])\n                  }),\n                ],\n                2\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _vm._l(_vm.scheduleForm.records, function (record, index) {\n            return _c(\n              \"div\",\n              { staticClass: \"row\" },\n              [\n                _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                  _c(\"div\", { staticClass: \"form-group\" }, [\n                    _vm._v(\n                      \"\\n                    \" +\n                        _vm._s(record.subject_name) +\n                        \"\\n                    \"\n                    ),\n                    _c(\"div\", { staticClass: \"form-group\" }, [\n                      _c(\n                        \"label\",\n                        { staticClass: \"custom-control custom-checkbox\" },\n                        [\n                          _c(\"input\", {\n                            directives: [\n                              {\n                                name: \"model\",\n                                rawName: \"v-model\",\n                                value: record.has_no_exam,\n                                expression: \"record.has_no_exam\",\n                              },\n                            ],\n                            staticClass: \"custom-control-input\",\n                            attrs: { type: \"checkbox\", value: \"1\" },\n                            domProps: {\n                              checked: Array.isArray(record.has_no_exam)\n                                ? _vm._i(record.has_no_exam, \"1\") > -1\n                                : record.has_no_exam,\n                            },\n                            on: {\n                              change: function ($event) {\n                                var $$a = record.has_no_exam,\n                                  $$el = $event.target,\n                                  $$c = $$el.checked ? true : false\n                                if (Array.isArray($$a)) {\n                                  var $$v = \"1\",\n                                    $$i = _vm._i($$a, $$v)\n                                  if ($$el.checked) {\n                                    $$i < 0 &&\n                                      _vm.$set(\n                                        record,\n                                        \"has_no_exam\",\n                                        $$a.concat([$$v])\n                                      )\n                                  } else {\n                                    $$i > -1 &&\n                                      _vm.$set(\n                                        record,\n                                        \"has_no_exam\",\n                                        $$a\n                                          .slice(0, $$i)\n                                          .concat($$a.slice($$i + 1))\n                                      )\n                                  }\n                                } else {\n                                  _vm.$set(record, \"has_no_exam\", $$c)\n                                }\n                              },\n                            },\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"span\", { staticClass: \"custom-control-label\" }, [\n                            _vm._v(\n                              _vm._s(_vm.trans(\"academic.subject_has_no_exam\"))\n                            ),\n                          ]),\n                        ]\n                      ),\n                    ]),\n                  ]),\n                ]),\n                _vm._v(\" \"),\n                !record.has_no_exam\n                  ? [\n                      _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                        _c(\n                          \"div\",\n                          { staticClass: \"form-group\" },\n                          [\n                            _c(\"datepicker\", {\n                              attrs: {\n                                bootstrapStyling: true,\n                                placeholder: _vm.trans(\"exam.schedule_date\"),\n                              },\n                              on: {\n                                selected: function ($event) {\n                                  _vm.scheduleForm.errors.clear(\n                                    _vm.getScheduleDateName(index)\n                                  )\n                                },\n                              },\n                              model: {\n                                value: record.date,\n                                callback: function ($$v) {\n                                  _vm.$set(record, \"date\", $$v)\n                                },\n                                expression: \"record.date\",\n                              },\n                            }),\n                            _vm._v(\" \"),\n                            _c(\"show-error\", {\n                              attrs: {\n                                \"form-name\": _vm.scheduleForm,\n                                \"prop-name\": _vm.getScheduleDateName(index),\n                              },\n                            }),\n                          ],\n                          1\n                        ),\n                      ]),\n                      _vm._v(\" \"),\n                      _vm._l(record.assessment_details, function (detail, idx) {\n                        return _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                          _c(\"div\", { staticClass: \"row\" }, [\n                            _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                              _c(\"div\", { staticClass: \"form-group\" }, [\n                                _c(\n                                  \"label\",\n                                  {\n                                    staticClass:\n                                      \"custom-control custom-checkbox\",\n                                  },\n                                  [\n                                    _c(\"input\", {\n                                      directives: [\n                                        {\n                                          name: \"model\",\n                                          rawName: \"v-model\",\n                                          value: detail.is_applicable,\n                                          expression: \"detail.is_applicable\",\n                                        },\n                                      ],\n                                      staticClass: \"custom-control-input\",\n                                      attrs: { type: \"checkbox\", value: \"1\" },\n                                      domProps: {\n                                        checked: Array.isArray(\n                                          detail.is_applicable\n                                        )\n                                          ? _vm._i(detail.is_applicable, \"1\") >\n                                            -1\n                                          : detail.is_applicable,\n                                      },\n                                      on: {\n                                        change: function ($event) {\n                                          var $$a = detail.is_applicable,\n                                            $$el = $event.target,\n                                            $$c = $$el.checked ? true : false\n                                          if (Array.isArray($$a)) {\n                                            var $$v = \"1\",\n                                              $$i = _vm._i($$a, $$v)\n                                            if ($$el.checked) {\n                                              $$i < 0 &&\n                                                _vm.$set(\n                                                  detail,\n                                                  \"is_applicable\",\n                                                  $$a.concat([$$v])\n                                                )\n                                            } else {\n                                              $$i > -1 &&\n                                                _vm.$set(\n                                                  detail,\n                                                  \"is_applicable\",\n                                                  $$a\n                                                    .slice(0, $$i)\n                                                    .concat($$a.slice($$i + 1))\n                                                )\n                                            }\n                                          } else {\n                                            _vm.$set(\n                                              detail,\n                                              \"is_applicable\",\n                                              $$c\n                                            )\n                                          }\n                                        },\n                                      },\n                                    }),\n                                    _vm._v(\" \"),\n                                    _c(\n                                      \"span\",\n                                      { staticClass: \"custom-control-label\" },\n                                      [\n                                        _vm._v(\n                                          _vm._s(\n                                            _vm.trans(\n                                              \"assessment.is_applicable\"\n                                            )\n                                          )\n                                        ),\n                                      ]\n                                    ),\n                                  ]\n                                ),\n                              ]),\n                            ]),\n                            _vm._v(\" \"),\n                            detail.is_applicable\n                              ? _c(\"div\", { staticClass: \"col-12 col-sm-9\" }, [\n                                  _c(\n                                    \"div\",\n                                    { staticClass: \"form-group\" },\n                                    [\n                                      _c(\"input\", {\n                                        directives: [\n                                          {\n                                            name: \"model\",\n                                            rawName: \"v-model\",\n                                            value: detail.max_mark,\n                                            expression: \"detail.max_mark\",\n                                          },\n                                        ],\n                                        staticClass: \"form-control\",\n                                        attrs: {\n                                          type: \"text\",\n                                          name: _vm.getDetailMaxMark(\n                                            index,\n                                            idx\n                                          ),\n                                          placeholder: _vm.trans(\n                                            \"exam.assessment_detail_max_mark\"\n                                          ),\n                                        },\n                                        domProps: { value: detail.max_mark },\n                                        on: {\n                                          input: function ($event) {\n                                            if ($event.target.composing) return\n                                            _vm.$set(\n                                              detail,\n                                              \"max_mark\",\n                                              $event.target.value\n                                            )\n                                          },\n                                        },\n                                      }),\n                                      _vm._v(\" \"),\n                                      _c(\"show-error\", {\n                                        attrs: {\n                                          \"form-name\": _vm.scheduleForm,\n                                          \"prop-name\": _vm.getDetailMaxMark(\n                                            index,\n                                            idx\n                                          ),\n                                        },\n                                      }),\n                                    ],\n                                    1\n                                  ),\n                                ])\n                              : _vm._e(),\n                          ]),\n                        ])\n                      }),\n                    ]\n                  : _vm._e(),\n              ],\n              2\n            )\n          }),\n          _vm._v(\" \"),\n          _c(\n            \"div\",\n            { staticClass: \"card-footer text-right\" },\n            [\n              _c(\n                \"router-link\",\n                {\n                  staticClass: \"btn btn-danger waves-effect waves-light\",\n                  attrs: { to: \"/exam/schedule\" },\n                },\n                [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n              ),\n              _vm._v(\" \"),\n              _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn-info waves-effect waves-light\",\n                  attrs: { type: \"submit\" },\n                },\n                [\n                  _vm.id\n                    ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                    : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n                ]\n              ),\n            ],\n            1\n          ),\n        ],\n        2\n      ),\n      _vm._v(\" \"),\n      _vm.showExamModal\n        ? _c(\"transition\", { attrs: { name: \"modal\" } }, [\n            _c(\"div\", { staticClass: \"modal-mask\" }, [\n              _c(\"div\", { staticClass: \"modal-wrapper\" }, [\n                _c(\"div\", { staticClass: \"modal-container modal-lg\" }, [\n                  _c(\n                    \"div\",\n                    { staticClass: \"modal-header\" },\n                    [\n                      _vm._t(\"header\", function () {\n                        return [\n                          _vm._v(\n                            \"\\n                            \" +\n                              _vm._s(_vm.trans(\"exam.add_new_exam\")) +\n                              \"\\n                            \"\n                          ),\n                          _c(\n                            \"span\",\n                            {\n                              staticClass: \"float-right pointer\",\n                              on: {\n                                click: function ($event) {\n                                  _vm.showExamModal = false\n                                },\n                              },\n                            },\n                            [_vm._v(\"x\")]\n                          ),\n                        ]\n                      }),\n                    ],\n                    2\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"div\",\n                    { staticClass: \"modal-body\" },\n                    [\n                      _vm._t(\"body\", function () {\n                        return [\n                          _c(\"exam-form\", {\n                            on: {\n                              completed: _vm.getPreRequisite,\n                              cancel: function ($event) {\n                                _vm.showExamModal = false\n                              },\n                            },\n                          }),\n                          _vm._v(\" \"),\n                          _c(\"div\", { staticClass: \"clearfix\" }),\n                        ]\n                      }),\n                    ],\n                    2\n                  ),\n                ]),\n              ]),\n            ]),\n          ])\n        : _vm._e(),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n.loading-overlay.is-full-page{\\r\\n    z-index: 1060;\\n}\\r\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./resources/js/views/exam/schedule/form.vue\"],\"names\":[],\"mappings\":\";AAsZA;IACA,aAAA;AACA\",\"sourcesContent\":[\"<template>\\r\\n    <div>\\r\\n        <form @submit.prevent=\\\"proceed\\\" @keydown=\\\"scheduleForm.errors.clear($event.target.name)\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n                <div class=\\\"col-12 col-sm-3\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"\\\">{{trans('exam.exam')}} </label> <button type=\\\"button\\\" class=\\\"btn btn-xs btn-info pull-right\\\" v-if=\\\"hasPermission('create-exam')\\\" @click=\\\"showExamModal = true\\\">{{trans('general.add_new')}}</button>\\r\\n                        <v-select label=\\\"name\\\" v-model=\\\"selected_exam\\\" name=\\\"exam_id\\\" id=\\\"exam_id\\\" :options=\\\"exams\\\" :placeholder=\\\"trans('exam.select_exam')\\\" @select=\\\"onExamSelect\\\" @close=\\\"scheduleForm.errors.clear('exam_id')\\\" @remove=\\\"scheduleForm.exam_id = ''\\\" :disabled=\\\"id ? true : false\\\">\\r\\n                            <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!exams.length\\\">\\r\\n                                {{trans('general.no_option_found')}}\\r\\n                            </div>\\r\\n                        </v-select>\\r\\n                        <show-error :form-name=\\\"scheduleForm\\\" prop-name=\\\"exam_id\\\"></show-error>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-12 col-sm-3\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"\\\">{{trans('academic.batch')}} </label>\\r\\n                        <v-select label=\\\"name\\\" v-model=\\\"selected_batch\\\" group-values=\\\"batches\\\" group-label=\\\"course_group\\\" :group-select=\\\"false\\\" name=\\\"batch_id\\\" id=\\\"batch_id\\\" :options=\\\"batches\\\" :placeholder=\\\"trans('academic.select_batch')\\\" @select=\\\"onBatchSelect\\\" @close=\\\"scheduleForm.errors.clear('batch_id')\\\" @remove=\\\"scheduleForm.batch_id = ''\\\" :disabled=\\\"id ? true : false\\\">\\r\\n                            <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!batches.length\\\">\\r\\n                                {{trans('general.no_option_found')}}\\r\\n                            </div>\\r\\n                        </v-select>\\r\\n                        <show-error :form-name=\\\"scheduleForm\\\" prop-name=\\\"batch_id\\\"></show-error>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-12 col-sm-3\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"\\\">{{trans('exam.grade')}} </label>\\r\\n                        <v-select label=\\\"name\\\" v-model=\\\"selected_exam_grade\\\" name=\\\"exam_grade_id\\\" id=\\\"exam_grade_id\\\" :options=\\\"exam_grades\\\" :placeholder=\\\"trans('exam.select_grade')\\\" @select=\\\"onExamGradeSelect\\\" @close=\\\"scheduleForm.errors.clear('exam_grade_id')\\\" @remove=\\\"scheduleForm.exam_grade_id = ''\\\">\\r\\n                            <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!exam_grades.length\\\">\\r\\n                                {{trans('general.no_option_found')}}\\r\\n                            </div>\\r\\n                        </v-select>\\r\\n                        <show-error :form-name=\\\"scheduleForm\\\" prop-name=\\\"exam_grade_id\\\"></show-error>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-12 col-sm-3\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"\\\">{{trans('exam.assessment')}} </label>\\r\\n                        <v-select label=\\\"name\\\" v-model=\\\"selected_exam_assessment\\\" name=\\\"exam_assessment_id\\\" id=\\\"exam_assessment_id\\\" :options=\\\"exam_assessments\\\" :placeholder=\\\"trans('exam.select_assessment')\\\" @select=\\\"onExamAssessmentSelect\\\" @close=\\\"scheduleForm.errors.clear('exam_assessment_id')\\\" @remove=\\\"scheduleForm.exam_assessment_id = ''\\\">\\r\\n                            <div class=\\\"multiselect__option\\\" slot=\\\"afterList\\\" v-if=\\\"!exam_assessments.length\\\">\\r\\n                                {{trans('general.no_option_found')}}\\r\\n                            </div>\\r\\n                        </v-select>\\r\\n                        <show-error :form-name=\\\"scheduleForm\\\" prop-name=\\\"exam_assessment_id\\\"></show-error>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-12 col-sm-3\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <label for=\\\"\\\">{{trans('exam.overall_pass_percentage')}}</label>\\r\\n                        <input class=\\\"form-control\\\" type=\\\"text\\\" v-model=\\\"scheduleForm.overall_pass_percentage\\\" name=\\\"overall_pass_percentage\\\" :placeholder=\\\"trans('exam.overall_pass_percentage')\\\">\\r\\n                        <show-error :form-name=\\\"scheduleForm\\\" prop-name=\\\"overall_pass_percentage\\\"></show-error>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <div class=\\\"col-12 col-sm-3\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        <switches class=\\\"m-l-20\\\" v-model=\\\"scheduleForm.show_result\\\" theme=\\\"bootstrap\\\" color=\\\"success\\\"></switches> {{trans('exam.show_result')}}\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\\\"row m-b-10\\\" v-if=\\\"scheduleForm.records.length && exam_assessment\\\">\\r\\n                <div class=\\\"col-12 col-sm-3\\\">\\r\\n\\r\\n                </div>\\r\\n                <div class=\\\"col-12 col-sm-3\\\">\\r\\n\\r\\n                </div>\\r\\n                <div class=\\\"col-12 col-sm-3\\\" v-for=\\\"detail in exam_assessment.details\\\">\\r\\n                    {{detail.name}} {{trans('exam.observation_detail_max_mark')}}\\r\\n                </div>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"row\\\" v-for=\\\"(record,index) in scheduleForm.records\\\">\\r\\n                <div class=\\\"col-12 col-sm-3\\\">\\r\\n                    <div class=\\\"form-group\\\">\\r\\n                        {{record.subject_name}}\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <label class=\\\"custom-control custom-checkbox\\\">\\r\\n                                <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" value=\\\"1\\\" v-model=\\\"record.has_no_exam\\\">\\r\\n                                <span class=\\\"custom-control-label\\\">{{trans('academic.subject_has_no_exam')}}</span>\\r\\n                            </label>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n                <template v-if=\\\"! record.has_no_exam\\\">\\r\\n                    <div class=\\\"col-12 col-sm-3\\\">\\r\\n                        <div class=\\\"form-group\\\">\\r\\n                            <datepicker v-model=\\\"record.date\\\" :bootstrapStyling=\\\"true\\\" @selected=\\\"scheduleForm.errors.clear(getScheduleDateName(index))\\\" :placeholder=\\\"trans('exam.schedule_date')\\\"></datepicker>\\r\\n                            <show-error :form-name=\\\"scheduleForm\\\" :prop-name=\\\"getScheduleDateName(index)\\\"></show-error>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-12 col-sm-3\\\" v-for=\\\"(detail,idx) in record.assessment_details\\\">\\r\\n                        <div class=\\\"row\\\">\\r\\n                            <div class=\\\"col-12 col-sm-3\\\">\\r\\n                                <div class=\\\"form-group\\\">\\r\\n                                    <label class=\\\"custom-control custom-checkbox\\\">\\r\\n                                        <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" value=\\\"1\\\" v-model=\\\"detail.is_applicable\\\">\\r\\n                                        <span class=\\\"custom-control-label\\\">{{trans('assessment.is_applicable')}}</span>\\r\\n                                    </label>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                            <div class=\\\"col-12 col-sm-9\\\" v-if=\\\"detail.is_applicable\\\">\\r\\n                                <div class=\\\"form-group\\\">\\r\\n                                    <input class=\\\"form-control\\\" type=\\\"text\\\" v-model=\\\"detail.max_mark\\\" :name=\\\"getDetailMaxMark(index, idx)\\\" :placeholder=\\\"trans('exam.assessment_detail_max_mark')\\\">\\r\\n                                    <show-error :form-name=\\\"scheduleForm\\\" :prop-name=\\\"getDetailMaxMark(index, idx)\\\"></show-error>\\r\\n                                </div>\\r\\n                            </div>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </template>\\r\\n            </div>\\r\\n            <div class=\\\"card-footer text-right\\\">\\r\\n                <router-link to=\\\"/exam/schedule\\\" class=\\\"btn btn-danger waves-effect waves-light \\\">{{trans('general.cancel')}}</router-link>\\r\\n                <button type=\\\"submit\\\" class=\\\"btn btn-info waves-effect waves-light\\\">\\r\\n                    <span v-if=\\\"id\\\">{{trans('general.update')}}</span>\\r\\n                    <span v-else>{{trans('general.save')}}</span>\\r\\n                </button>\\r\\n            </div>\\r\\n        </form>\\r\\n\\r\\n        <transition name=\\\"modal\\\" v-if=\\\"showExamModal\\\">\\r\\n            <div class=\\\"modal-mask\\\">\\r\\n                <div class=\\\"modal-wrapper\\\">\\r\\n                    <div class=\\\"modal-container modal-lg\\\">\\r\\n                        <div class=\\\"modal-header\\\">\\r\\n                            <slot name=\\\"header\\\">\\r\\n                                {{trans('exam.add_new_exam')}}\\r\\n                                <span class=\\\"float-right pointer\\\" @click=\\\"showExamModal = false\\\">x</span>\\r\\n                            </slot>\\r\\n                        </div>\\r\\n                        <div class=\\\"modal-body\\\">\\r\\n                            <slot name=\\\"body\\\">\\r\\n                                <exam-form @completed=\\\"getPreRequisite\\\" @cancel=\\\"showExamModal = false\\\"></exam-form>\\r\\n                                <div class=\\\"clearfix\\\"></div>\\r\\n                            </slot>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </transition>\\r\\n    </div>\\r\\n</template>\\r\\n\\r\\n\\r\\n<script>\\r\\n    import examForm from '../form'\\r\\n\\r\\n    export default {\\r\\n        components: {examForm},\\r\\n        data() {\\r\\n            return {\\r\\n                scheduleForm: new Form({\\r\\n                    batch_id: '',\\r\\n                    exam_id: '',\\r\\n                    exam_grade_id: '',\\r\\n                    exam_assessment_id: '',\\r\\n                    description: '',\\r\\n                    overall_pass_percentage: '',\\r\\n                    show_result: 0,\\r\\n                    records: []\\r\\n                }),\\r\\n                all_batches: [],\\r\\n                batches: [],\\r\\n                selected_batch: null,\\r\\n                exams: [],\\r\\n                selected_exam: null,\\r\\n                exam_grades: [],\\r\\n                selected_exam_grade: null,\\r\\n                exam_assessments: [],\\r\\n                selected_exam_assessment: null,\\r\\n                exam_assessments: [],\\r\\n                batch_with_subjects: [],\\r\\n                exam_assessment_with_details: [],\\r\\n                exam_assessment: {},\\r\\n                showExamModal: false\\r\\n            };\\r\\n        },\\r\\n        props: ['id'],\\r\\n        mounted() {\\r\\n            if(!helper.hasPermission('create-exam-schedule') && !helper.hasPermission('edit-exam-schedule')){\\r\\n                helper.notAccessibleMsg();\\r\\n                this.$router.push('/dashboard');\\r\\n            }\\r\\n\\r\\n            this.getPreRequisite();\\r\\n        },\\r\\n        methods: {\\r\\n            hasPermission(permission){\\r\\n                return helper.hasPermission(permission);\\r\\n            },\\r\\n            getScheduleDateName(index){\\r\\n                return index+'_schedule_date';\\r\\n            },\\r\\n            getDetailMaxMark(index, idx){\\r\\n                return index+'_'+idx+'_max_mark';\\r\\n            },\\r\\n            getPreRequisite(){\\r\\n                let loader = this.$loading.show();\\r\\n                axios.get('/api/exam/schedule/pre-requisite')\\r\\n                    .then(response => {\\r\\n                        this.all_batches = response.batches;\\r\\n                        this.exams = response.exams;\\r\\n                        this.exam_grades = response.exam_grades;\\r\\n                        this.exam_assessments = response.exam_assessments;\\r\\n                        this.batch_with_subjects = response.batch_with_subjects;\\r\\n                        this.exam_assessment_with_details = response.exam_assessment_with_details;\\r\\n\\r\\n                        if(this.id)\\r\\n                            this.get();\\r\\n\\r\\n                        loader.hide();\\r\\n                    })\\r\\n                    .catch(error => {\\r\\n                        loader.hide();\\r\\n                        helper.showErrorMsg(error);\\r\\n                    })\\r\\n            },\\r\\n            getSubjects(){\\r\\n                let loader = this.$loading.show();\\r\\n\\r\\n                let batch = this.batch_with_subjects.find(o => o.id == this.scheduleForm.batch_id);\\r\\n\\r\\n                if (typeof batch == 'undefined') {\\r\\n                    loader.hide();\\r\\n                    return;\\r\\n                }\\r\\n\\r\\n                this.scheduleForm.records = [];\\r\\n\\r\\n                batch.subjects.forEach(subject => {\\r\\n                    this.scheduleForm.records.push({\\r\\n                        subject_id: subject.id,\\r\\n                        subject_name: subject.name+' ('+subject.code+')',\\r\\n                        has_no_exam: subject.has_no_exam,\\r\\n                        date: '',\\r\\n                        assessment_details: []\\r\\n                    })\\r\\n                });\\r\\n                this.selected_exam_assessment = null;\\r\\n                this.scheduleForm.exam_assessment_id = '';\\r\\n                \\r\\n                loader.hide();\\r\\n            },\\r\\n            proceed(){\\r\\n                if(this.id)\\r\\n                    this.update();\\r\\n                else\\r\\n                    this.store();\\r\\n            },\\r\\n            store(){\\r\\n                let loader = this.$loading.show();\\r\\n                this.scheduleForm.post('/api/exam/schedule')\\r\\n                    .then(response => {\\r\\n                        toastr.success(response.message);\\r\\n                        this.selected_batch = null;\\r\\n                        this.selected_exam = null;\\r\\n                        this.selected_exam_grade = null;\\r\\n                        this.selected_exam_assessment = null;\\r\\n                        this.scheduleForm.records = [];\\r\\n                        this.$emit('completed');\\r\\n                        loader.hide();\\r\\n                    })\\r\\n                    .catch(error => {\\r\\n                        loader.hide();\\r\\n                        helper.showErrorMsg(error);\\r\\n                    });\\r\\n            },\\r\\n            get(){\\r\\n                let loader = this.$loading.show();\\r\\n                axios.get('/api/exam/schedule/'+this.id)\\r\\n                    .then(response => {\\r\\n                        this.selected_exam = response.selected_exam;\\r\\n                        response = response.exam_schedule;\\r\\n\\r\\n                        this.scheduleForm.overall_pass_percentage = response.options.overall_pass_percentage;\\r\\n                        this.scheduleForm.show_result = response.options.show_result;\\r\\n\\r\\n                        if (this.selected_exam && this.selected_exam.course_group_id)\\r\\n                            this.batches = this.all_batches.filter(o => o.course_group === this.selected_exam.course_group_name);\\r\\n                        else\\r\\n                            this.batches = this.all_batches;\\r\\n\\r\\n                        this.scheduleForm.batch_id = response.batch_id;\\r\\n                        this.selected_batch = this.scheduleForm.batch_id ? {id: response.batch_id, name: response.batch.course.name+' '+response.batch.name} : null;\\r\\n\\r\\n                        this.scheduleForm.exam_id = response.exam_id;\\r\\n\\r\\n                        this.scheduleForm.exam_grade_id = response.exam_grade_id;\\r\\n                        this.selected_exam_grade = this.scheduleForm.exam_grade_id ? {id: response.exam_grade_id, name: response.grade.name} : null;\\r\\n\\r\\n                        this.scheduleForm.exam_assessment_id = response.exam_assessment_id;\\r\\n                        this.selected_exam_assessment = this.scheduleForm.exam_assessment_id ? {id: response.exam_assessment_id, name: response.assessment.name} : null;\\r\\n                        this.exam_assessment = this.scheduleForm.exam_assessment_id ? response.assessment : {};\\r\\n\\r\\n                        let batch = this.batch_with_subjects.find(o => o.id == this.scheduleForm.batch_id);\\r\\n                        this.scheduleForm.records = [];\\r\\n\\r\\n                        let record = {};\\r\\n                        batch.subjects.forEach(subject => {\\r\\n                            record = response.records.find(o => o.subject_id == subject.id);\\r\\n\\r\\n                            if (typeof record == 'undefined') {\\r\\n                                record = {\\r\\n                                    options: {has_no_exam: 0},\\r\\n                                    date: ''\\r\\n                                }\\r\\n                            }\\r\\n\\r\\n                            let assessment_details = [];\\r\\n                            if (record.options.assessment_details && Array.isArray(record.options.assessment_details)) {\\r\\n                                record.options.assessment_details.forEach(detail => {\\r\\n                                    assessment_details.push({\\r\\n                                        id: detail.id,\\r\\n                                        is_applicable: detail.is_applicable,\\r\\n                                        max_mark: detail.max_mark,\\r\\n                                        pass_percentage: detail.pass_percentage\\r\\n                                    })\\r\\n                                })\\r\\n                            } else {\\r\\n                                response.assessment.details.forEach(detail => {\\r\\n                                    assessment_details.push({\\r\\n                                        id: detail.id,\\r\\n                                        is_applicable: true,\\r\\n                                        max_mark: detail.max_mark,\\r\\n                                        pass_percentage: detail.pass_percentage\\r\\n                                    })\\r\\n                                })\\r\\n                            }\\r\\n\\r\\n                            this.scheduleForm.records.push({\\r\\n                                subject_id: subject.id,\\r\\n                                subject_name: subject.name+' ('+subject.code+')',\\r\\n                                has_no_exam: record.date ? 0 : 1,\\r\\n                                date: record.date,\\r\\n                                assessment_details: assessment_details\\r\\n                            });\\r\\n                        });\\r\\n                        \\r\\n                        this.module_id = response.id;\\r\\n                        loader.hide();\\r\\n                    })\\r\\n                    .catch(error => {\\r\\n                        loader.hide();\\r\\n                        helper.showErrorMsg(error);\\r\\n                        // this.$router.push('/exam/schedule');\\r\\n                    });\\r\\n            },\\r\\n            update(){\\r\\n                let loader = this.$loading.show();\\r\\n                this.scheduleForm.patch('/api/exam/schedule/'+this.id)\\r\\n                    .then(response => {\\r\\n                        toastr.success(response.message);\\r\\n                        loader.hide();\\r\\n                        this.$router.push('/exam/schedule');\\r\\n                    })\\r\\n                    .catch(error => {\\r\\n                        loader.hide();\\r\\n                        helper.showErrorMsg(error);\\r\\n                    });\\r\\n            },\\r\\n            onBatchSelect(selectedOption){\\r\\n                this.scheduleForm.batch_id = selectedOption.id;\\r\\n            },\\r\\n            onExamSelect(selectedOption){\\r\\n                this.scheduleForm.batch_id = '';\\r\\n                this.selected_batch = null;\\r\\n                this.scheduleForm.records = [];\\r\\n                if (selectedOption.course_group_id)\\r\\n                    this.batches = this.all_batches.filter(o => o.course_group === selectedOption.course_group_name);\\r\\n                else\\r\\n                    this.batches = this.all_batches;\\r\\n                this.scheduleForm.exam_id = selectedOption.id;\\r\\n            },\\r\\n            onExamGradeSelect(selectedOption){\\r\\n                this.scheduleForm.exam_grade_id = selectedOption.id;\\r\\n            },\\r\\n            onExamAssessmentSelect(selectedOption){\\r\\n                this.scheduleForm.exam_assessment_id = selectedOption.id;\\r\\n                this.exam_assessment = this.exam_assessment_with_details.find(o => o.id == selectedOption.id);\\r\\n                this.scheduleForm.records.forEach(record => {\\r\\n                    record.assessment_details = [];\\r\\n                    this.exam_assessment.details.forEach(detail => {\\r\\n                        record.assessment_details.push({\\r\\n                            id: detail.id,\\r\\n                            is_applicable: true,\\r\\n                            max_mark: detail.max_mark,\\r\\n                            pass_percentage: detail.pass_percentage\\r\\n                        });\\r\\n                    });\\r\\n                })\\r\\n            },\\r\\n            hideExamForm(){\\r\\n                $('.add-exam-form').modal('hide');\\r\\n            }\\r\\n        },\\r\\n        watch: {\\r\\n            'scheduleForm.batch_id': function(val) {\\r\\n                if (!this.id)\\r\\n                    this.getSubjects();\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n</script>\\r\\n\\r\\n<style>\\r\\n.loading-overlay.is-full-page{\\r\\n    z-index: 1060;\\r\\n}\\r\\n</style>\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-16.use[1]!../../../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-16.use[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=style&index=0&id=e05f7eea&lang=css&\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=6200c8c5&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6200c8c5')) {\n      api.createRecord('6200c8c5', component.options)\n    } else {\n      api.reload('6200c8c5', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=6200c8c5&\", function () {\n      api.rerender('6200c8c5', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/exam/form.vue\"\nexport default component.exports","import { render, staticRenderFns } from \"./edit.vue?vue&type=template&id=59dce25e&\"\nimport script from \"./edit.vue?vue&type=script&lang=js&\"\nexport * from \"./edit.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('59dce25e')) {\n      api.createRecord('59dce25e', component.options)\n    } else {\n      api.reload('59dce25e', component.options)\n    }\n    module.hot.accept(\"./edit.vue?vue&type=template&id=59dce25e&\", function () {\n      api.rerender('59dce25e', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/exam/schedule/edit.vue\"\nexport default component.exports","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=e05f7eea&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\nimport style0 from \"./form.vue?vue&type=style&index=0&id=e05f7eea&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('e05f7eea')) {\n      api.createRecord('e05f7eea', component.options)\n    } else {\n      api.reload('e05f7eea', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=e05f7eea&\", function () {\n      api.rerender('e05f7eea', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/exam/schedule/form.vue\"\nexport default component.exports","import mod from \"-!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./edit.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./edit.vue?vue&type=script&lang=js&\"","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./edit.vue?vue&type=template&id=59dce25e&\""],"names":[],"sourceRoot":""}