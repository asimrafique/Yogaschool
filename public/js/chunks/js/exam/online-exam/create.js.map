{"version":3,"file":"js/chunks/js/exam/online-exam/create.js?id=102ab1c5bd16dc83","mappings":";;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;AChHA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAGA;AAGA;;;;;;;;;;;;;;;ACmEA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;AClSA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;ACpOA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAUA;AAAA;AACA;AAAA;AAGA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAMA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAUA;AAAA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AASA;AAAA;AAKA;AACA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AACA;AAaA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAEA;;;;;;;;;;;;;;;;;;AChmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;ACtCA;;;;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA","sources":["webpack://InstiKit/resources/js/views/exam/form.vue","webpack://InstiKit/resources/js/views/exam/online-exam/create.vue","webpack://InstiKit/resources/js/views/exam/online-exam/form.vue","webpack://InstiKit/./resources/js/views/exam/form.vue","webpack://InstiKit/./resources/js/views/exam/online-exam/create.vue","webpack://InstiKit/./resources/js/views/exam/online-exam/form.vue","webpack://InstiKit/./resources/js/views/exam/form.vue?bbc6","webpack://InstiKit/./resources/js/views/exam/online-exam/create.vue?7a06","webpack://InstiKit/./resources/js/views/exam/online-exam/form.vue?1346","webpack://InstiKit/./resources/js/views/exam/form.vue?4eac","webpack://InstiKit/./resources/js/views/exam/online-exam/create.vue?8a0e","webpack://InstiKit/./resources/js/views/exam/online-exam/form.vue?ca25","webpack://InstiKit/./resources/js/views/exam/form.vue?a90f","webpack://InstiKit/./resources/js/views/exam/online-exam/create.vue?5e51","webpack://InstiKit/./resources/js/views/exam/online-exam/form.vue?daa6"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"proceed\" @keydown=\"examForm.errors.clear($event.target.name)\">\r\n        <div class=\"row\">\r\n            <div class=\"col-12 col-sm-4\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"\">{{trans('exam.term')}} </label>\r\n                    <v-select label=\"name\" v-model=\"selected_exam_term\" name=\"exam_term_id\" id=\"exam_term_id\" :options=\"exam_terms\" :placeholder=\"trans('exam.select_term')\" @select=\"onExamTermSelect\" @close=\"examForm.errors.clear('exam_term_id')\" @remove=\"examForm.exam_term_id = ''\">\r\n                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!exam_terms.length\">\r\n                            {{trans('general.no_option_found')}}\r\n                        </div>\r\n                    </v-select>\r\n                    <show-error :form-name=\"examForm\" prop-name=\"exam_term_id\"></show-error>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-12 col-sm-4\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"\">{{trans('exam.exam_name')}}</label>\r\n                    <input class=\"form-control\" type=\"text\" v-model=\"examForm.name\" name=\"name\" :placeholder=\"trans('exam.exam_name')\">\r\n                    <show-error :form-name=\"examForm\" prop-name=\"name\"></show-error>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-12 col-sm-4\">\r\n                <div class=\"form-group\">\r\n                    <label for=\"\">{{trans('exam.exam_description')}}</label>\r\n                    <input class=\"form-control\" type=\"text\" v-model=\"examForm.description\" name=\"description\" :placeholder=\"trans('exam.exam_description')\">\r\n                    <show-error :form-name=\"examForm\" prop-name=\"description\"></show-error>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"card-footer text-right\">\r\n            <router-link to=\"/exam\" class=\"btn btn-danger waves-effect waves-light \" v-show=\"id\">{{trans('general.cancel')}}</router-link>\r\n            <button v-if=\"!id\" type=\"button\" class=\"btn btn-danger waves-effect waves-light \" @click=\"$emit('cancel')\">{{trans('general.cancel')}}</button>\r\n            <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\r\n                <span v-if=\"id\">{{trans('general.update')}}</span>\r\n                <span v-else>{{trans('general.save')}}</span>\r\n            </button>\r\n        </div>\r\n    </form>\r\n</template>\r\n\r\n\r\n<script>\r\n    export default {\r\n        components: {},\r\n        data() {\r\n            return {\r\n                examForm: new Form({\r\n                    name : '',\r\n                    exam_term_id: '',\r\n                    description : ''\r\n                }),\r\n                exam_terms: [],\r\n                selected_exam_term: null\r\n            };\r\n        },\r\n        props: ['id'],\r\n        mounted() {\r\n            if(!helper.hasPermission('create-exam') && !helper.hasPermission('edit-exam')){\r\n                helper.notAccessibleMsg();\r\n                this.$router.push('/dashboard');\r\n            }\r\n\r\n            this.getPreRequisite();\r\n        },\r\n        methods: {\r\n            proceed(){\r\n                if(this.id)\r\n                    this.update();\r\n                else\r\n                    this.store();\r\n            },\r\n            getPreRequisite(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/exam/pre-requisite')\r\n                    .then(response => {\r\n                        this.exam_terms = response.exam_terms;\r\n\r\n                        if(this.id)\r\n                            this.get();\r\n\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    })\r\n            },\r\n            store(){\r\n                let loader = this.$loading.show();\r\n                this.examForm.post('/api/exam')\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        this.selected_exam_term = null;\r\n                        this.$emit('completed');\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            get(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/exam/'+this.id)\r\n                    .then(response => {\r\n                        this.examForm.name = response.name;\r\n                        this.examForm.exam_term_id = response.exam_term_id;\r\n                        this.selected_exam_term = response.exam_term_id ? {id:response.exam_term_id, name:response.term.name+' ('+response.term.course_group.name+')'} : null;\r\n                        this.examForm.description = response.description;\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                        this.$router.push('/exam');\r\n                    });\r\n            },\r\n            update(){\r\n                let loader = this.$loading.show();\r\n                this.examForm.patch('/api/exam/'+this.id)\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        loader.hide();\r\n                        this.$router.push('/exam');\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            getConfig(config) {\r\n                return helper.getConfig(config);\r\n            },\r\n            onExamTermSelect(selectedOption){\r\n                this.examForm.exam_term_id = selectedOption.id;\r\n            }\r\n        }\r\n    }\r\n</script>\r\n","<template>\r\n\t<div>\r\n        <div class=\"page-titles\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12 col-sm-6\">\r\n                    <h3 class=\"text-themecolor\">{{trans('exam.add_new_online_exam')}}</h3>\r\n                </div>\r\n                <div class=\"col-12 col-sm-6\">\r\n                    <div class=\"action-buttons pull-right\">\r\n                        <button class=\"btn btn-info btn-sm\" @click=\"$router.push('/online-exam')\"><i class=\"fas fa-list\"></i> <span class=\"d-none d-sm-inline\">{{trans('exam.online_exam')}}</span></button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"container-fluid\">\r\n            <div class=\"card card-form\">\r\n                <div class=\"card-body p-t-20\">\r\n                    <online-exam-form></online-exam-form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\t</div>\r\n</template>\r\n\r\n<script>\r\n    import onlineExamForm from './form';\r\n\r\n\texport default {\r\n\t\tcomponents: {onlineExamForm},\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tmounted(){\r\n            if(!helper.hasPermission('create-online-exam')){\r\n                helper.notAccessibleMsg();\r\n                this.$router.push('/dashboard');\r\n            }\r\n\t\t},\r\n\t\tmethods: {\r\n\r\n\t\t},\r\n\t\tcomputed: {\r\n\r\n\t\t},\r\n\t\tfilters: {\r\n\r\n\t\t},\r\n\t\twatch: {\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n</script>","<template>\r\n    <div>\r\n        <form @submit.prevent=\"proceed\" @keydown=\"onlineExamForm.errors.clear($event.target.name)\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.online_exam_name')}}</label>\r\n                        <input class=\"form-control\" type=\"text\" v-model=\"onlineExamForm.name\" name=\"name\" :placeholder=\"trans('exam.online_exam_name')\">\r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"name\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('academic.batch')}} </label>\r\n                        <v-select label=\"name\" v-model=\"selected_batch\" group-values=\"batches\" group-label=\"course_group\" :group-select=\"false\" name=\"batch_id\" id=\"batch_id\" :options=\"batches\" :placeholder=\"trans('academic.select_batch')\" @select=\"onBatchSelect\" @close=\"onlineExamForm.errors.clear('batch_id')\" @remove=\"onlineExamForm.batch_id = ''\">\r\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!batches.length\">\r\n                                {{trans('general.no_option_found')}}\r\n                            </div>\r\n                        </v-select>\r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"batch_id\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('academic.subject')}} </label>\r\n                        <v-select label=\"name\" v-model=\"selected_subject\" name=\"subject_id\" id=\"subject_id\" :options=\"subjects\" :placeholder=\"trans('academic.select_subject')\" @select=\"onSubjectSelect\" @close=\"onlineExamForm.errors.clear('subject_id')\" @remove=\"onlineExamForm.subject_id = ''\">\r\n                            <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!subjects.length\">\r\n                                {{trans('general.no_option_found')}}\r\n                            </div>\r\n                        </v-select>\r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"subject_id\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <!-- <div class=\"col-12 col-sm-3\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.online_exam_type')}}</label>\r\n                        <select v-model=\"onlineExamForm.exam_type\" class=\"custom-select col-12\" name=\"exam_type\"@change=\"onlineExamForm.errors.clear('exam_type')\">\r\n                          <option value=\"\" selected>{{trans('general.select_one')}}</option>\r\n                          <option v-for=\"option in exam_types\" v-bind:value=\"option.value\">\r\n                            {{ option.text }}\r\n                          </option>\r\n                        </select>\r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"exam_type\"></show-error>\r\n                    </div>\r\n                </div> -->\r\n                <div class=\"col-12 col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.online_exam_date')}}</label>\r\n                        <datepicker v-model=\"onlineExamForm.date\" :bootstrapStyling=\"true\" @selected=\"onlineExamForm.errors.clear('date')\" :placeholder=\"trans('exam.online_exam_date')\"></datepicker>\r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"date\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.online_exam_start_time')}}</label>\r\n                        <timepicker :hour.sync=\"start_time.hour\" :minute.sync=\"start_time.minute\" :meridiem.sync=\"start_time.meridiem\"></timepicker>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.online_exam_end_time')}}</label>\r\n                        <timepicker :hour.sync=\"end_time.hour\" :minute.sync=\"end_time.minute\" :meridiem.sync=\"end_time.meridiem\"></timepicker>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.online_exam_passing_percentage')}}</label>\r\n                        <div class=\"input-group mb-3\">\r\n                            <input class=\"form-control\" type=\"text\" v-model=\"onlineExamForm.passing_percentage\" name=\"passing_percentage\" :placeholder=\"trans('exam.online_exam_passing_percentage')\">\r\n                            <div class=\"input-group-append\"><span class=\"input-group-text\">%</span></div>\r\n                        </div>\r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"passing_percentage\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-4\">\r\n                    <div class=\"form-group\">\r\n                        <div>{{trans('exam.online_exam_is_negative_mark_applicable')}}</div>\r\n                        <switches class=\"m-t-10\" v-model=\"onlineExamForm.is_negative_mark_applicable\" theme=\"bootstrap\" color=\"success\"></switches> \r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"online_exam_is_negative_mark_applicable\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12 col-sm-4\" v-if=\"onlineExamForm.is_negative_mark_applicable\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.online_exam_negative_mark_percentage_per_question')}}</label>\r\n                        <div class=\"input-group mb-3\">\r\n                            <input class=\"form-control\" type=\"text\" v-model=\"onlineExamForm.negative_mark_percentage_per_question\" name=\"negative_mark_percentage_per_question\" :placeholder=\"trans('exam.online_exam_negative_mark_percentage_per_question')\">\r\n                            <div class=\"input-group-append\"><span class=\"input-group-text\">%</span></div>\r\n                        </div>\r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"negative_mark_percentage_per_question\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.online_exam_instructions')}}</label>\r\n                        <html-editor name=\"instructions\" :model.sync=\"onlineExamForm.instructions\" height=\"200\" :isUpdate=\"uuid ? true : false\" @clearErrors=\"onlineExamForm.errors.clear('instructions')\"></html-editor>\r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"instructions\"></show-error>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-12\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"\">{{trans('exam.online_exam_description')}}</label>\r\n                        <input class=\"form-control\" type=\"text\" v-model=\"onlineExamForm.description\" name=\"description\" :placeholder=\"trans('exam.online_exam_description')\">\r\n                        <show-error :form-name=\"onlineExamForm\" prop-name=\"description\"></show-error>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"card-footer text-right\">\r\n                <router-link to=\"/online-exam\" class=\"btn btn-danger waves-effect waves-light \">{{trans('general.cancel')}}</router-link>\r\n                <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\r\n                    <span v-if=\"uuid\">{{trans('general.update')}}</span>\r\n                    <span v-else>{{trans('general.save')}}</span>\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n</template>\r\n\r\n\r\n<script>\r\n    import onlineExamForm from '../form'\r\n\r\n    export default {\r\n        components: {onlineExamForm},\r\n        data() {\r\n            return {\r\n                onlineExamForm: new Form({\r\n                    name: '',\r\n                    batch_id: '',\r\n                    subject_id: '',\r\n                    date: '',\r\n                    start_time: '',\r\n                    end_time: '',\r\n                    exam_type: 'mcq',\r\n                    passing_percentage: '',\r\n                    is_negative_mark_applicable: '',\r\n                    negative_mark_percentage_per_question: '',\r\n                    instructions: '',\r\n                    description: ''\r\n                }),\r\n                start_time: {\r\n                    hour: '',\r\n                    minute: '',\r\n                    meridiem: 'am'\r\n                },\r\n                end_time: {\r\n                    hour: '',\r\n                    minute: '',\r\n                    meridiem: 'am'\r\n                },\r\n                exam_types: [],\r\n                batches: [],\r\n                selected_batch: null,\r\n                selected_subject: null,\r\n                batch_with_subjects: [],\r\n                subjects: [],\r\n                showExamModal: false\r\n            };\r\n        },\r\n        props: ['uuid'],\r\n        mounted() {\r\n            if(!helper.hasPermission('create-online-exam') && !helper.hasPermission('edit-online-exam')){\r\n                helper.notAccessibleMsg();\r\n                this.$router.push('/dashboard');\r\n            }\r\n\r\n            this.getPreRequisite();\r\n        },\r\n        methods: {\r\n            hasPermission(permission){\r\n                return helper.hasPermission(permission);\r\n            },\r\n            getPreRequisite(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/online-exam/pre-requisite')\r\n                    .then(response => {\r\n                        this.batches = response.batches;\r\n                        this.batch_with_subjects = response.batch_with_subjects;\r\n                        this.exam_types = response.exam_types;\r\n\r\n                        if(this.uuid)\r\n                            this.get();\r\n\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    })\r\n            },\r\n            getSubjects(){\r\n                let loader = this.$loading.show();\r\n\r\n                let batch = this.batch_with_subjects.find(o => o.id == this.onlineExamForm.batch_id);\r\n\r\n                if (typeof batch == 'undefined') {\r\n                    loader.hide();\r\n                    return;\r\n                }\r\n\r\n                this.subjects = [];\r\n                this.selected_subject = '';\r\n\r\n                batch.subjects.forEach(subject => {\r\n                    this.subjects.push({\r\n                        id: subject.id,\r\n                        name: subject.name+' ('+subject.code+')'\r\n                    });\r\n                });\r\n                \r\n                loader.hide();\r\n            },\r\n            proceed(){\r\n                if(this.uuid)\r\n                    this.update();\r\n                else\r\n                    this.store();\r\n            },\r\n            store(){\r\n                let loader = this.$loading.show();\r\n                this.onlineExamForm.start_time = helper.toTime(this.start_time);\r\n                this.onlineExamForm.end_time   = helper.toTime(this.end_time);\r\n                this.onlineExamForm.post('/api/online-exam')\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        this.onlineExamForm.exam_type = 'mcq';\r\n                        this.selected_batch = null;\r\n                        this.selected_subject = null;\r\n                        this.start_time.hour = ''\r\n                        this.start_time.minute = ''\r\n                        this.end_time.hour = ''\r\n                        this.end_time.minute = ''\r\n                        this.$emit('completed');\r\n                        loader.hide();\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            get(){\r\n                let loader = this.$loading.show();\r\n                axios.get('/api/online-exam/'+this.uuid)\r\n                    .then(response => {\r\n                        loader.hide();\r\n                        this.onlineExamForm.name = response.online_exam.name;\r\n                        this.onlineExamForm.batch_id = response.online_exam.batch_id;\r\n                        this.onlineExamForm.subject_id = response.online_exam.subject_id;\r\n                        this.onlineExamForm.description = response.online_exam.description;\r\n                        this.onlineExamForm.instructions = response.online_exam.instructions;\r\n                        this.onlineExamForm.exam_type = response.online_exam.exam_type;\r\n                        this.onlineExamForm.passing_percentage = response.online_exam.passing_percentage;\r\n                        this.onlineExamForm.is_negative_mark_applicable = response.online_exam.is_negative_mark_applicable ? 1 : 0;\r\n                        this.onlineExamForm.negative_mark_percentage_per_question = response.online_exam.is_negative_mark_applicable ? response.online_exam.negative_mark_percentage_per_question : 0;\r\n                        this.selected_batch = response.selected_batch;\r\n                        this.selected_subject = response.selected_subject;\r\n                        this.onlineExamForm.date = response.online_exam.date;\r\n                        this.start_time = response.start_time;\r\n                        this.end_time = response.end_time;\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                        this.$router.push('/online-exam');\r\n                    });\r\n            },\r\n            update(){\r\n                let loader = this.$loading.show();\r\n                this.onlineExamForm.start_time = helper.toTime(this.start_time);\r\n                this.onlineExamForm.end_time   = helper.toTime(this.end_time);\r\n                this.onlineExamForm.patch('/api/online-exam/'+this.uuid)\r\n                    .then(response => {\r\n                        toastr.success(response.message);\r\n                        loader.hide();\r\n                        this.$router.push('/online-exam');\r\n                    })\r\n                    .catch(error => {\r\n                        loader.hide();\r\n                        helper.showErrorMsg(error);\r\n                    });\r\n            },\r\n            onBatchSelect(selectedOption){\r\n                this.onlineExamForm.batch_id = selectedOption.id;\r\n                this.getSubjects();\r\n            },\r\n            onSubjectSelect(selectedOption){\r\n                this.onlineExamForm.subject_id = selectedOption.id;\r\n            }\r\n        },\r\n        watch: {\r\n        }\r\n    }\r\n</script>","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"form\",\n    {\n      on: {\n        submit: function ($event) {\n          $event.preventDefault()\n          return _vm.proceed.apply(null, arguments)\n        },\n        keydown: function ($event) {\n          return _vm.examForm.errors.clear($event.target.name)\n        },\n      },\n    },\n    [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"exam.term\")) + \" \"),\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"v-select\",\n                {\n                  attrs: {\n                    label: \"name\",\n                    name: \"exam_term_id\",\n                    id: \"exam_term_id\",\n                    options: _vm.exam_terms,\n                    placeholder: _vm.trans(\"exam.select_term\"),\n                  },\n                  on: {\n                    select: _vm.onExamTermSelect,\n                    close: function ($event) {\n                      return _vm.examForm.errors.clear(\"exam_term_id\")\n                    },\n                    remove: function ($event) {\n                      _vm.examForm.exam_term_id = \"\"\n                    },\n                  },\n                  model: {\n                    value: _vm.selected_exam_term,\n                    callback: function ($$v) {\n                      _vm.selected_exam_term = $$v\n                    },\n                    expression: \"selected_exam_term\",\n                  },\n                },\n                [\n                  !_vm.exam_terms.length\n                    ? _c(\n                        \"div\",\n                        {\n                          staticClass: \"multiselect__option\",\n                          attrs: { slot: \"afterList\" },\n                          slot: \"afterList\",\n                        },\n                        [\n                          _vm._v(\n                            \"\\n                        \" +\n                              _vm._s(_vm.trans(\"general.no_option_found\")) +\n                              \"\\n                    \"\n                          ),\n                        ]\n                      )\n                    : _vm._e(),\n                ]\n              ),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.examForm,\n                  \"prop-name\": \"exam_term_id\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"exam.exam_name\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.examForm.name,\n                    expression: \"examForm.name\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"name\",\n                  placeholder: _vm.trans(\"exam.exam_name\"),\n                },\n                domProps: { value: _vm.examForm.name },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(_vm.examForm, \"name\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.examForm, \"prop-name\": \"name\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"exam.exam_description\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"input\", {\n                directives: [\n                  {\n                    name: \"model\",\n                    rawName: \"v-model\",\n                    value: _vm.examForm.description,\n                    expression: \"examForm.description\",\n                  },\n                ],\n                staticClass: \"form-control\",\n                attrs: {\n                  type: \"text\",\n                  name: \"description\",\n                  placeholder: _vm.trans(\"exam.exam_description\"),\n                },\n                domProps: { value: _vm.examForm.description },\n                on: {\n                  input: function ($event) {\n                    if ($event.target.composing) return\n                    _vm.$set(_vm.examForm, \"description\", $event.target.value)\n                  },\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: {\n                  \"form-name\": _vm.examForm,\n                  \"prop-name\": \"description\",\n                },\n              }),\n            ],\n            1\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        { staticClass: \"card-footer text-right\" },\n        [\n          _c(\n            \"router-link\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.id,\n                  expression: \"id\",\n                },\n              ],\n              staticClass: \"btn btn-danger waves-effect waves-light\",\n              attrs: { to: \"/exam\" },\n            },\n            [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n          ),\n          _vm._v(\" \"),\n          !_vm.id\n            ? _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn-danger waves-effect waves-light\",\n                  attrs: { type: \"button\" },\n                  on: {\n                    click: function ($event) {\n                      return _vm.$emit(\"cancel\")\n                    },\n                  },\n                },\n                [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\n            \"button\",\n            {\n              staticClass: \"btn btn-info waves-effect waves-light\",\n              attrs: { type: \"submit\" },\n            },\n            [\n              _vm.id\n                ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n            ]\n          ),\n        ],\n        1\n      ),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", [\n    _c(\"div\", { staticClass: \"page-titles\" }, [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\"h3\", { staticClass: \"text-themecolor\" }, [\n            _vm._v(_vm._s(_vm.trans(\"exam.add_new_online_exam\"))),\n          ]),\n        ]),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n          _c(\"div\", { staticClass: \"action-buttons pull-right\" }, [\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-info btn-sm\",\n                on: {\n                  click: function ($event) {\n                    return _vm.$router.push(\"/online-exam\")\n                  },\n                },\n              },\n              [\n                _c(\"i\", { staticClass: \"fas fa-list\" }),\n                _vm._v(\" \"),\n                _c(\"span\", { staticClass: \"d-none d-sm-inline\" }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam\"))),\n                ]),\n              ]\n            ),\n          ]),\n        ]),\n      ]),\n    ]),\n    _vm._v(\" \"),\n    _c(\"div\", { staticClass: \"container-fluid\" }, [\n      _c(\"div\", { staticClass: \"card card-form\" }, [\n        _c(\n          \"div\",\n          { staticClass: \"card-body p-t-20\" },\n          [_c(\"online-exam-form\")],\n          1\n        ),\n      ]),\n    ]),\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\"div\", [\n    _c(\n      \"form\",\n      {\n        on: {\n          submit: function ($event) {\n            $event.preventDefault()\n            return _vm.proceed.apply(null, arguments)\n          },\n          keydown: function ($event) {\n            return _vm.onlineExamForm.errors.clear($event.target.name)\n          },\n        },\n      },\n      [\n        _c(\"div\", { staticClass: \"row\" }, [\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_name\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.onlineExamForm.name,\n                      expression: \"onlineExamForm.name\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"name\",\n                    placeholder: _vm.trans(\"exam.online_exam_name\"),\n                  },\n                  domProps: { value: _vm.onlineExamForm.name },\n                  on: {\n                    input: function ($event) {\n                      if ($event.target.composing) return\n                      _vm.$set(_vm.onlineExamForm, \"name\", $event.target.value)\n                    },\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"name\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"academic.batch\")) + \" \"),\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"v-select\",\n                  {\n                    attrs: {\n                      label: \"name\",\n                      \"group-values\": \"batches\",\n                      \"group-label\": \"course_group\",\n                      \"group-select\": false,\n                      name: \"batch_id\",\n                      id: \"batch_id\",\n                      options: _vm.batches,\n                      placeholder: _vm.trans(\"academic.select_batch\"),\n                    },\n                    on: {\n                      select: _vm.onBatchSelect,\n                      close: function ($event) {\n                        return _vm.onlineExamForm.errors.clear(\"batch_id\")\n                      },\n                      remove: function ($event) {\n                        _vm.onlineExamForm.batch_id = \"\"\n                      },\n                    },\n                    model: {\n                      value: _vm.selected_batch,\n                      callback: function ($$v) {\n                        _vm.selected_batch = $$v\n                      },\n                      expression: \"selected_batch\",\n                    },\n                  },\n                  [\n                    !_vm.batches.length\n                      ? _c(\n                          \"div\",\n                          {\n                            staticClass: \"multiselect__option\",\n                            attrs: { slot: \"afterList\" },\n                            slot: \"afterList\",\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            \" +\n                                _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                \"\\n                        \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ]\n                ),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"batch_id\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"academic.subject\")) + \" \"),\n                ]),\n                _vm._v(\" \"),\n                _c(\n                  \"v-select\",\n                  {\n                    attrs: {\n                      label: \"name\",\n                      name: \"subject_id\",\n                      id: \"subject_id\",\n                      options: _vm.subjects,\n                      placeholder: _vm.trans(\"academic.select_subject\"),\n                    },\n                    on: {\n                      select: _vm.onSubjectSelect,\n                      close: function ($event) {\n                        return _vm.onlineExamForm.errors.clear(\"subject_id\")\n                      },\n                      remove: function ($event) {\n                        _vm.onlineExamForm.subject_id = \"\"\n                      },\n                    },\n                    model: {\n                      value: _vm.selected_subject,\n                      callback: function ($$v) {\n                        _vm.selected_subject = $$v\n                      },\n                      expression: \"selected_subject\",\n                    },\n                  },\n                  [\n                    !_vm.subjects.length\n                      ? _c(\n                          \"div\",\n                          {\n                            staticClass: \"multiselect__option\",\n                            attrs: { slot: \"afterList\" },\n                            slot: \"afterList\",\n                          },\n                          [\n                            _vm._v(\n                              \"\\n                            \" +\n                                _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                \"\\n                        \"\n                            ),\n                          ]\n                        )\n                      : _vm._e(),\n                  ]\n                ),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"subject_id\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_date\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"datepicker\", {\n                  attrs: {\n                    bootstrapStyling: true,\n                    placeholder: _vm.trans(\"exam.online_exam_date\"),\n                  },\n                  on: {\n                    selected: function ($event) {\n                      return _vm.onlineExamForm.errors.clear(\"date\")\n                    },\n                  },\n                  model: {\n                    value: _vm.onlineExamForm.date,\n                    callback: function ($$v) {\n                      _vm.$set(_vm.onlineExamForm, \"date\", $$v)\n                    },\n                    expression: \"onlineExamForm.date\",\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"date\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_start_time\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"timepicker\", {\n                  attrs: {\n                    hour: _vm.start_time.hour,\n                    minute: _vm.start_time.minute,\n                    meridiem: _vm.start_time.meridiem,\n                  },\n                  on: {\n                    \"update:hour\": function ($event) {\n                      return _vm.$set(_vm.start_time, \"hour\", $event)\n                    },\n                    \"update:minute\": function ($event) {\n                      return _vm.$set(_vm.start_time, \"minute\", $event)\n                    },\n                    \"update:meridiem\": function ($event) {\n                      return _vm.$set(_vm.start_time, \"meridiem\", $event)\n                    },\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_end_time\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"timepicker\", {\n                  attrs: {\n                    hour: _vm.end_time.hour,\n                    minute: _vm.end_time.minute,\n                    meridiem: _vm.end_time.meridiem,\n                  },\n                  on: {\n                    \"update:hour\": function ($event) {\n                      return _vm.$set(_vm.end_time, \"hour\", $event)\n                    },\n                    \"update:minute\": function ($event) {\n                      return _vm.$set(_vm.end_time, \"minute\", $event)\n                    },\n                    \"update:meridiem\": function ($event) {\n                      return _vm.$set(_vm.end_time, \"meridiem\", $event)\n                    },\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(\n                    _vm._s(_vm.trans(\"exam.online_exam_passing_percentage\"))\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"input-group mb-3\" }, [\n                  _c(\"input\", {\n                    directives: [\n                      {\n                        name: \"model\",\n                        rawName: \"v-model\",\n                        value: _vm.onlineExamForm.passing_percentage,\n                        expression: \"onlineExamForm.passing_percentage\",\n                      },\n                    ],\n                    staticClass: \"form-control\",\n                    attrs: {\n                      type: \"text\",\n                      name: \"passing_percentage\",\n                      placeholder: _vm.trans(\n                        \"exam.online_exam_passing_percentage\"\n                      ),\n                    },\n                    domProps: { value: _vm.onlineExamForm.passing_percentage },\n                    on: {\n                      input: function ($event) {\n                        if ($event.target.composing) return\n                        _vm.$set(\n                          _vm.onlineExamForm,\n                          \"passing_percentage\",\n                          $event.target.value\n                        )\n                      },\n                    },\n                  }),\n                  _vm._v(\" \"),\n                  _vm._m(0),\n                ]),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"passing_percentage\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"div\", [\n                  _vm._v(\n                    _vm._s(\n                      _vm.trans(\"exam.online_exam_is_negative_mark_applicable\")\n                    )\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"switches\", {\n                  staticClass: \"m-t-10\",\n                  attrs: { theme: \"bootstrap\", color: \"success\" },\n                  model: {\n                    value: _vm.onlineExamForm.is_negative_mark_applicable,\n                    callback: function ($$v) {\n                      _vm.$set(\n                        _vm.onlineExamForm,\n                        \"is_negative_mark_applicable\",\n                        $$v\n                      )\n                    },\n                    expression: \"onlineExamForm.is_negative_mark_applicable\",\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"online_exam_is_negative_mark_applicable\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _vm.onlineExamForm.is_negative_mark_applicable\n            ? _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n                _c(\n                  \"div\",\n                  { staticClass: \"form-group\" },\n                  [\n                    _c(\"label\", { attrs: { for: \"\" } }, [\n                      _vm._v(\n                        _vm._s(\n                          _vm.trans(\n                            \"exam.online_exam_negative_mark_percentage_per_question\"\n                          )\n                        )\n                      ),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"div\", { staticClass: \"input-group mb-3\" }, [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model\",\n                            value:\n                              _vm.onlineExamForm\n                                .negative_mark_percentage_per_question,\n                            expression:\n                              \"onlineExamForm.negative_mark_percentage_per_question\",\n                          },\n                        ],\n                        staticClass: \"form-control\",\n                        attrs: {\n                          type: \"text\",\n                          name: \"negative_mark_percentage_per_question\",\n                          placeholder: _vm.trans(\n                            \"exam.online_exam_negative_mark_percentage_per_question\"\n                          ),\n                        },\n                        domProps: {\n                          value:\n                            _vm.onlineExamForm\n                              .negative_mark_percentage_per_question,\n                        },\n                        on: {\n                          input: function ($event) {\n                            if ($event.target.composing) return\n                            _vm.$set(\n                              _vm.onlineExamForm,\n                              \"negative_mark_percentage_per_question\",\n                              $event.target.value\n                            )\n                          },\n                        },\n                      }),\n                      _vm._v(\" \"),\n                      _vm._m(1),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"show-error\", {\n                      attrs: {\n                        \"form-name\": _vm.onlineExamForm,\n                        \"prop-name\": \"negative_mark_percentage_per_question\",\n                      },\n                    }),\n                  ],\n                  1\n                ),\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_instructions\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"html-editor\", {\n                  attrs: {\n                    name: \"instructions\",\n                    model: _vm.onlineExamForm.instructions,\n                    height: \"200\",\n                    isUpdate: _vm.uuid ? true : false,\n                  },\n                  on: {\n                    \"update:model\": function ($event) {\n                      return _vm.$set(\n                        _vm.onlineExamForm,\n                        \"instructions\",\n                        $event\n                      )\n                    },\n                    clearErrors: function ($event) {\n                      return _vm.onlineExamForm.errors.clear(\"instructions\")\n                    },\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"instructions\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"form-group\" },\n              [\n                _c(\"label\", { attrs: { for: \"\" } }, [\n                  _vm._v(_vm._s(_vm.trans(\"exam.online_exam_description\"))),\n                ]),\n                _vm._v(\" \"),\n                _c(\"input\", {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.onlineExamForm.description,\n                      expression: \"onlineExamForm.description\",\n                    },\n                  ],\n                  staticClass: \"form-control\",\n                  attrs: {\n                    type: \"text\",\n                    name: \"description\",\n                    placeholder: _vm.trans(\"exam.online_exam_description\"),\n                  },\n                  domProps: { value: _vm.onlineExamForm.description },\n                  on: {\n                    input: function ($event) {\n                      if ($event.target.composing) return\n                      _vm.$set(\n                        _vm.onlineExamForm,\n                        \"description\",\n                        $event.target.value\n                      )\n                    },\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"show-error\", {\n                  attrs: {\n                    \"form-name\": _vm.onlineExamForm,\n                    \"prop-name\": \"description\",\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n        ]),\n        _vm._v(\" \"),\n        _c(\n          \"div\",\n          { staticClass: \"card-footer text-right\" },\n          [\n            _c(\n              \"router-link\",\n              {\n                staticClass: \"btn btn-danger waves-effect waves-light\",\n                attrs: { to: \"/online-exam\" },\n              },\n              [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n            ),\n            _vm._v(\" \"),\n            _c(\n              \"button\",\n              {\n                staticClass: \"btn btn-info waves-effect waves-light\",\n                attrs: { type: \"submit\" },\n              },\n              [\n                _vm.uuid\n                  ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                  : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n              ]\n            ),\n          ],\n          1\n        ),\n      ]\n    ),\n  ])\n}\nvar staticRenderFns = [\n  function () {\n    var _vm = this,\n      _c = _vm._self._c\n    return _c(\"div\", { staticClass: \"input-group-append\" }, [\n      _c(\"span\", { staticClass: \"input-group-text\" }, [_vm._v(\"%\")]),\n    ])\n  },\n  function () {\n    var _vm = this,\n      _c = _vm._self._c\n    return _c(\"div\", { staticClass: \"input-group-append\" }, [\n      _c(\"span\", { staticClass: \"input-group-text\" }, [_vm._v(\"%\")]),\n    ])\n  },\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=6200c8c5&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('6200c8c5')) {\n      api.createRecord('6200c8c5', component.options)\n    } else {\n      api.reload('6200c8c5', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=6200c8c5&\", function () {\n      api.rerender('6200c8c5', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/exam/form.vue\"\nexport default component.exports","import { render, staticRenderFns } from \"./create.vue?vue&type=template&id=0273a5b3&\"\nimport script from \"./create.vue?vue&type=script&lang=js&\"\nexport * from \"./create.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('0273a5b3')) {\n      api.createRecord('0273a5b3', component.options)\n    } else {\n      api.reload('0273a5b3', component.options)\n    }\n    module.hot.accept(\"./create.vue?vue&type=template&id=0273a5b3&\", function () {\n      api.rerender('0273a5b3', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/exam/online-exam/create.vue\"\nexport default component.exports","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=074e693b&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\Php_Labs\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('074e693b')) {\n      api.createRecord('074e693b', component.options)\n    } else {\n      api.reload('074e693b', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=074e693b&\", function () {\n      api.rerender('074e693b', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/exam/online-exam/form.vue\"\nexport default component.exports","import mod from \"-!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./create.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./create.vue?vue&type=script&lang=js&\"","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=template&id=6200c8c5&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./create.vue?vue&type=template&id=0273a5b3&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=template&id=074e693b&\""],"names":[],"sourceRoot":""}