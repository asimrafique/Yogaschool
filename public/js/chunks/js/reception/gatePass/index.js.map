{"version":3,"file":"js/chunks/js/reception/gatePass/index.js?id=a4ab5b61f8ab8032","mappings":";;;;;;;;;;;;;AAuEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACrvcA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAYA;AACA;AACA;;;;;;;;;;;;;;;;AC9XA;AACA;AACA;AACA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAQA;AAAA;AAKA;AACA;AACA;AACA;AAOA;AAAA;AAMA;AAAA;AAGA;AAAA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AAAA;AAOA;AAMA;AAAA;AAAA;AACA;AAKA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAQA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AAUA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AAAA;AAAA;AAAA;AASA;AAQA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAuBA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AACA;AAwBA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAKA;AACA;AACA;AAMA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAUA;AAAA;AAAA;AAAA;AAEA;AAAA;AAGA;AAAA;AAEA;AAAA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAGA;AAAA;AAGA;AAAA;AACA;AAAA;AAiCA;AAAA;AASA;AAEA;AAAA;AAAA;AACA;AAsHA;AAAA;AACA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AASA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAOA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;ACl2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkBA;AACA;;;;;;;;;;;;;;;ACtCA;;;;;;;;;;;;;;;ACAA","sources":["webpack://InstiKit/resources/js/views/reception/gate-pass/form.vue","webpack://InstiKit/resources/js/views/reception/gate-pass/index.vue","webpack://InstiKit/./resources/js/views/reception/gate-pass/form.vue","webpack://InstiKit/./resources/js/views/reception/gate-pass/index.vue","webpack://InstiKit/./resources/js/views/reception/gate-pass/form.vue?4040","webpack://InstiKit/./resources/js/views/reception/gate-pass/index.vue?a6b2","webpack://InstiKit/./resources/js/views/reception/gate-pass/form.vue?1dd8","webpack://InstiKit/./resources/js/views/reception/gate-pass/index.vue?511e","webpack://InstiKit/./resources/js/views/reception/gate-pass/form.vue?1b1a","webpack://InstiKit/./resources/js/views/reception/gate-pass/index.vue?9b2c"],"sourcesContent":["<template>\n    <form @submit.prevent=\"proceed\" @keydown=\"gatePassForm.errors.clear($event.target.name)\">\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-3\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.gate_pass_type')}}</label>\n                    <select v-model=\"gatePassForm.type\" class=\"custom-select col-12\" @select=\"gatePassForm.errors.clear('type')\">\n                      <option value=\"student\">{{trans('student.student')}}</option>\n                      <option value=\"employee\">{{trans('employee.employee')}}</option>\n                    </select>\n                    <show-error :form-name=\"gatePassForm\" prop-name=\"type\"></show-error>\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <div class=\"col-12 col-sm-4\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.gate_pass_date')}}</label>\n                    <datepicker v-model=\"gatePassForm.date\" :bootstrapStyling=\"true\" @selected=\"gatePassForm.errors.clear('date')\" :placeholder=\"trans('reception.gate_pass_date')\"></datepicker>\n                    <show-error :form-name=\"gatePassForm\" prop-name=\"date\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-4\" v-if=\"loaded\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.gate_pass_time')}}</label>\n                    <timepicker :hour.sync=\"time.hour\" :minute.sync=\"time.minute\" :meridiem.sync=\"time.meridiem\"></timepicker>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\" v-if=\"gatePassForm.type == 'student'\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('student.student')}}</label>\n                    <v-select label=\"name\" v-model=\"selected_student\" name=\"student_id\" id=\"student_id\" :options=\"students\" :placeholder=\"trans('student.select_student')\" @select=\"onStudentSelect\" @close=\"gatePassForm.errors.clear('student_id')\" @remove=\"gatePassForm.student_id = ''\">\n                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!students.length\">\n                            {{trans('general.no_option_found')}}\n                        </div>\n                    </v-select>\n                    <show-error :form-name=\"gatePassForm\" prop-name=\"student_id\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12 col-sm-3\" v-if=\"gatePassForm.type == 'employee'\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('employee.employee')}}</label>\n                    <v-select label=\"name\" v-model=\"selected_employee\" name=\"employee_id\" id=\"employee_id\" :options=\"employees\" :placeholder=\"trans('employee.select_employee')\" @select=\"onEmployeeSelect\" @close=\"gatePassForm.errors.clear('employee_id')\" @remove=\"gatePassForm.employee_id = ''\">\n                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!employees.length\">\n                            {{trans('general.no_option_found')}}\n                        </div>\n                    </v-select>\n                    <show-error :form-name=\"gatePassForm\" prop-name=\"employee_id\"></show-error>\n                </div>\n            </div>\n            <div class=\"col-12\">\n                <div class=\"form-group\">\n                    <label for=\"\">{{trans('reception.gate_pass_reason')}}</label>\n                    <autosize-textarea v-model=\"gatePassForm.reason\" rows=\"1\" name=\"reason\" :placeholder=\"trans('reception.gate_pass_reason')\"></autosize-textarea>\n                    <show-error :form-name=\"gatePassForm\" prop-name=\"reason\"></show-error>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"card-footer text-right\">\n            <router-link to=\"/reception/gate/pass\" class=\"btn btn-danger waves-effect waves-light \" v-show=\"uuid\">{{trans('general.cancel')}}</router-link>\n            <button v-if=\"!uuid\" type=\"button\" class=\"btn btn-danger waves-effect waves-light \" @click=\"$emit('cancel')\">{{trans('general.cancel')}}</button>\n            <button type=\"submit\" class=\"btn btn-info waves-effect waves-light\">\n                <span v-if=\"uuid\">{{trans('general.update')}}</span>\n                <span v-else>{{trans('general.save')}}</span>\n            </button>\n        </div>\n    </form>\t\n</template>\n\n<script>\n    export default {\n        components: {},\n        data() {\n            return {\n                gatePassForm: new Form({\n                    type: 'student',\n                    student_id: '',\n                    employee_id: '',\n                    date: '',\n                    time: '',\n                    reason: ''\n                }),\n                loaded: false,\n                time: {\n                    hour: '',\n                    minute: '',\n                    meridiem: 'am'\n                },\n                students: [],\n                selected_student: null,\n                employees: [],\n                selected_employee: null\n            };\n        },\n        props: ['uuid'],\n        mounted() {\n            if(!helper.hasPermission('create-gate-pass') && !helper.hasPermission('edit-gate-pass')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            if(this.uuid)\n                this.get();\n\n            this.getPreRequisite();\n        },\n        methods: {\n            timePadding(time){\n                return helper.formatWithPadding(time,2);\n            },\n            proceed(){\n                if(this.uuid)\n                    this.update();\n                else\n                    this.store();\n            },\n            getPreRequisite(){\n                let loader = this.$loading.show();\n                axios.get('/api/gate/pass/pre-requisite')\n                    .then(response => {\n                        this.students = response.students;\n                        this.employees = response.employees;\n                        this.gatePassForm.date = helper.today();\n                        if(!this.uuid)\n                            this.loaded = true;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    })\n            },  \n            store(){\n            \tthis.gatePassForm.time = (this.time.hour && this.time.minute) ? helper.formatWithPadding(this.time.hour,2)+':'+helper.formatWithPadding(this.time.minute,2)+' '+this.time.meridiem : '';\n                let loader = this.$loading.show();\n                this.gatePassForm.post('/api/gate/pass')\n                    .then(response => {\n                        toastr.success(response.message);\n                        this.time.hour = '';\n                        this.time.minute = '';\n                        this.time.meridiem = 'am';\n                        this.gatePassForm.type = 'student';\n                        this.selected_student = null;\n                        this.selected_employee = null;\n                        this.$emit('completed');\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            get(){\n                let loader = this.$loading.show();\n                axios.get('/api/gate/pass/'+this.uuid)\n                    .then(response => {\n                        this.gatePassForm.type = response.gate_pass.type;\n                        this.gatePassForm.reason = response.gate_pass.reason;\n                        this.gatePassForm.date = response.gate_pass.date;\n                        this.time.hour = response.time.hour;\n                        this.time.minute = response.time.minute;\n                        this.time.meridiem = response.time.meridiem;\n                        this.gatePassForm.student_id = response.gate_pass.student_id;\n                        this.selected_student = response.selected_student;\n                        this.gatePassForm.employee_id = response.gate_pass.employee_id;\n                        this.selected_employee = response.selected_employee;\n                        this.loaded = true;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                        this.$router.push('/reception/gate/pass');\n                    });\n            },\n            update(){\n            \tthis.gatePassForm.time = (this.time.hour && this.time.minute) ? helper.formatWithPadding(this.time.hour,2)+':'+helper.formatWithPadding(this.time.minute,2)+' '+this.time.meridiem : '';\n                let loader = this.$loading.show();\n                this.gatePassForm.patch('/api/gate/pass/'+this.uuid)\n                    .then(response => {\n                        toastr.success(response.message);\n                        loader.hide();\n                        this.$router.push('/reception/gate/pass');\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            onStudentSelect(selectedOption){\n                return this.gatePassForm.student_id = selectedOption.id;\n            },\n            onEmployeeSelect(selectedOption){\n                return this.gatePassForm.employee_id = selectedOption.id;\n            }\n        }\n    }\n</script>","<template>\n    <div>\n        <div class=\"page-titles\">\n            <div class=\"row\">\n                <div class=\"col-12 col-sm-6\">\n                    <h3 class=\"text-themecolor\">{{trans('reception.gate_pass')}} \n                        <span class=\"card-subtitle d-none d-sm-inline\" v-if=\"gate_passes.total\">{{trans('general.total_result_found',{count : gate_passes.total, from: gate_passes.from, to: gate_passes.to})}}</span>\n                        <span class=\"card-subtitle d-none d-sm-inline\" v-else>{{trans('general.no_result_found')}}</span>\n                    </h3>\n                </div>\n                <div class=\"col-12 col-sm-6\">\n                    <div class=\"action-buttons pull-right\">\n                        <button class=\"btn btn-info btn-sm\" v-if=\"gate_passes.total && !showCreatePanel && hasPermission('create-gate-pass')\" @click=\"showCreatePanel = !showCreatePanel\" v-tooltip=\"trans('general.add_new')\"><i class=\"fas fa-plus\"></i> <span class=\"d-none d-sm-inline\">{{trans('reception.add_new_gate_pass')}}</span></button>\n                        <button class=\"btn btn-info btn-sm\" v-if=\"!showFilterPanel\" @click=\"showFilterPanel = !showFilterPanel\"><i class=\"fas fa-filter\"></i> <span class=\"d-none d-sm-inline\">{{trans('general.filter')}}</span></button>\n                        <sort-by :order-by-options=\"orderByOptions\" :sort-by=\"filter.sort_by\" :order=\"filter.order\" @updateSortBy=\"value => {filter.sort_by = value}\"  @updateOrder=\"value => {filter.order = value}\"></sort-by>\n                        <div class=\"btn-group\">\n                            <button type=\"button\" class=\"btn btn-info btn-sm dropdown-toggle no-caret \" role=\"menu\" id=\"moreOption\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\" v-tooltip=\"trans('general.more_option')\">\n                                <i class=\"fas fa-ellipsis-h\"></i> <span class=\"d-none d-sm-inline\"></span>\n                            </button>\n                            <div :class=\"['dropdown-menu',getConfig('direction') == 'ltr' ? 'dropdown-menu-right' : '']\" aria-labelledby=\"moreOption\">\n                                <button class=\"dropdown-item custom-dropdown\" @click=\"print\"><i class=\"fas fa-print\"></i> {{trans('general.print')}}</button>\n                                <button class=\"dropdown-item custom-dropdown\" @click=\"pdf\"><i class=\"fas fa-file-pdf\"></i> {{trans('general.generate_pdf')}}</button>\n                            </div>\n                        </div>\n                        <help-button @clicked=\"help_topic = 'reception.gate-pass'\"></help-button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"container-fluid\">\n            <transition name=\"fade\">\n                <div class=\"card card-form\" v-if=\"showFilterPanel\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\">{{trans('general.filter')}}</h4>\n                        <div class=\"row\">\n                            <div class=\"col-12 col-sm-3\">\n                                <div class=\"form-group\">\n                                    <label for=\"\">{{trans('reception.gate_pass_type')}}</label>\n                                    <select v-model=\"filter.type\" class=\"custom-select col-12\">\n                                      <option value=\"\" selected>{{trans('general.select_one')}}</option>\n                                      <option v-for=\"option in types\" v-bind:value=\"option.value\">\n                                        {{ option.text }}\n                                      </option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"col-12 col-sm-3\" v-if=\"filter.type == 'student'\">\n                                <div class=\"form-group\">\n                                    <label for=\"\">{{trans('student.student')}}</label>\n                                    <v-select label=\"name\" track-by=\"id\" v-model=\"selected_students\" name=\"student_id\" id=\"student_id\" :options=\"students\" :placeholder=\"trans('student.select_student')\" @select=\"onStudentSelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onStudentRemove\" :selected=\"selected_students\">\n                                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!students.length\">\n                                            {{trans('general.no_option_found')}}\n                                        </div>\n                                    </v-select>\n                                </div>\n                            </div>\n                            <div class=\"col-12 col-sm-3\" v-if=\"filter.type == 'employee'\">\n                                <div class=\"form-group\">\n                                    <label for=\"\">{{trans('employee.employee')}}</label>\n                                    <v-select label=\"name\" track-by=\"id\" v-model=\"selected_employees\" name=\"employee_id\" id=\"employee_id\" :options=\"employees\" :placeholder=\"trans('employee.select_employee')\" @select=\"onEmployeeSelect\" :multiple=\"true\" :close-on-select=\"false\" :clear-on-select=\"false\" :hide-selected=\"true\" @remove=\"onEmployeeRemove\" :selected=\"selected_employees\">\n                                        <div class=\"multiselect__option\" slot=\"afterList\" v-if=\"!employees.length\">\n                                            {{trans('general.no_option_found')}}\n                                        </div>\n                                    </v-select>\n                                </div>\n                            </div>\n                            <div class=\"col-12 col-sm-6\">\n                                <date-range-picker :start-date.sync=\"filter.date_start_date\" :end-date.sync=\"filter.date_end_date\" :label=\"trans('general.date_between')\"></date-range-picker>\n                            </div>\n                        </div>\n                        <div class=\"card-footer text-right\">\n                            <button type=\"button\" @click=\"showFilterPanel = false\" class=\"btn btn-danger\">{{trans('general.cancel')}}</button>\n                            <button type=\"button\" class=\"btn btn-info waves-effect waves-light\" @click=\"getGatePasses\">{{trans('general.filter')}}</button>\n                        </div>\n                    </div>\n                </div>\n            </transition>\n            <transition name=\"fade\" v-if=\"hasPermission('create-gate-pass')\">\n                <div class=\"card card-form\" v-if=\"showCreatePanel\">\n                    <div class=\"card-body\">\n                        <h4 class=\"card-title\">{{trans('reception.add_new_gate_pass')}}</h4>\n                        <gate-pass-form @completed=\"getGatePasses\" @cancel=\"showCreatePanel = !showCreatePanel\"></gate-pass-form>\n                    </div>\n                </div>\n            </transition>\n            <div class=\"card\">\n                <div class=\"card-body\">\n                    <div class=\"table-responsive\" v-if=\"gate_passes.total\">\n                        <table class=\"table table-sm\">\n                            <thead>\n                                <tr>\n                                    <th>#</th>\n                                    <th>{{trans('reception.gate_pass_detail')}}</th>\n                                    <th>{{trans('reception.gate_pass_date')}}</th>\n                                    <th>{{trans('reception.gate_pass_time')}}</th>\n                                    <th>{{trans('reception.gate_pass_reason')}}</th>\n                                    <th>{{trans('general.entry_by')}}</th>\n                                    <th class=\"table-option\">{{trans('general.action')}}</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                <tr v-for=\"gate_pass in gate_passes.data\">\n                                    <td v-text=\"gate_pass.id\"></td>\n                                    <td>\n                                        <template v-if=\"gate_pass.type == 'student'\">\n                                            {{trans('student.name')+': '+getStudentName(gate_pass.student)}} <br />\n                                            {{trans('student.first_guardian_name')+': '+gate_pass.student.parent.first_guardian_name}} <br />\n                                            {{trans('student.mother_name')+': '+gate_pass.student.parent.mother_name}} <br />\n                                            {{trans('student.contact_number')+': '+gate_pass.student.contact_number}} <br />\n                                        </template>\n                                        <template v-if=\"gate_pass.type == 'employee'\">\n                                            {{getEmployeeName(gate_pass.employee)}} <br />\n                                            {{getEmployeeDesignationOnDate(gate_pass.employee, gate_pass.date)}}\n                                        </template>\n                                    </td>\n                                    <td>{{gate_pass.date | moment}}</td>\n                                    <td>{{gate_pass.time | momentTime}}</td>\n                                    <td>{{gate_pass.reason}}</td>\n                                    <td>{{getEmployeeName(gate_pass.user.employee)}} <br > {{getEmployeeDesignationOnDate(gate_pass.user.employee, gate_pass.date)}}</td>\n                                    <td class=\"table-option\">\n                                        <div class=\"btn-group\">\n                                            <a :href=\"`/reception/gate/pass/${gate_pass.uuid}/print?token=${authToken}`\" target=\"_blank\" class=\"btn btn-success btn-sm\" v-tooltip=\"trans('general.print')\"><i class=\"fas fa-print\"></i></a>\n                                            <button class=\"btn btn-info btn-sm\" v-if=\"hasPermission('edit-gate-pass')\" v-tooltip=\"trans('reception.edit_gate_pass')\" @click.prevent=\"editGatePass(gate_pass)\"><i class=\"fas fa-edit\"></i></button>\n                                            <button class=\"btn btn-danger btn-sm\" v-if=\"hasPermission('delete-gate-pass')\" :key=\"gate_pass.id\" v-confirm=\"{ok: confirmDelete(gate_pass)}\" v-tooltip=\"trans('reception.delete_gate_pass')\"><i class=\"fas fa-trash\"></i></button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            </tbody>\n                        </table>\n                    </div>\n                    <module-info v-if=\"!gate_passes.total\" module=\"reception\" title=\"gate_pass_module_title\" description=\"gate_pass_module_description\" icon=\"list\">\n                        <div slot=\"btn\">\n                            <button class=\"btn btn-info btn-md\" v-if=\"!showCreatePanel && hasPermission('create-gate-pass')\" @click=\"showCreatePanel = !showCreatePanel\"><i class=\"fas fa-plus\"></i> {{trans('general.add_new')}}</button>\n                        </div>\n                    </module-info>\n                    <pagination-record :page-length.sync=\"filter.page_length\" :records=\"gate_passes\" @updateRecords=\"getGatePasses\"></pagination-record>\n                </div>\n            </div>\n        </div>\n        <right-panel :topic=\"help_topic\"></right-panel>\n    </div>\n</template>\n\n<script>\n    import gatePassForm from './form'\n\n    export default {\n        components : { gatePassForm},\n        data() {\n            return {\n                gate_passes: {\n                    total: 0,\n                    data: []\n                },\n                filter: {\n                    sort_by : 'created_at',\n                    order: 'desc',\n                    type: '',\n                    student_id: [],\n                    employee_id: [],\n                    date_start_date: '',\n                    date_end_date: '',\n                    page_length: helper.getConfig('page_length')\n                },\n                orderByOptions: [\n                    {\n                        value: 'date',\n                        translation: i18n.reception.date\n                    },\n                    {\n                        value: 'created_at',\n                        translation: i18n.general.created_at\n                    }\n                ],\n                types: [\n                    {\n                        text: i18n.student.student,\n                        value: 'student'\n                    },\n                    {\n                        text: i18n.employee.employee,\n                        value: 'employee'\n                    }\n                ],\n                showFilterPanel: false,\n                showCreatePanel: false,\n                students: [],\n                selected_students: null,\n                employees: [],\n                selected_employees: null,\n                help_topic: '',\n                showUuid: '',\n                showModal: false\n            };\n        },\n        mounted(){\n            if(!helper.hasPermission('list-gate-pass')){\n                helper.notAccessibleMsg();\n                this.$router.push('/dashboard');\n            }\n\n            this.getGatePasses();\n            helper.showDemoNotification(['reception']);\n        },\n        methods: {\n            hasPermission(permission){\n                return helper.hasPermission(permission);\n            },\n            showAction(gate_pass){\n                this.showUuid = gate_pass.uuid;\n                this.showModal = true;\n            },\n            getStudentName(student){\n                return helper.getStudentName(student);\n            },\n            getEmployeeName(employee){\n                return helper.getEmployeeName(employee);\n            },\n            getGatePasses(page){\n                let loader = this.$loading.show();\n                if (typeof page !== 'number') {\n                    page = 1;\n                }\n                this.filter.date_start_date = helper.toDate(this.filter.date_start_date);\n                this.filter.date_end_date = helper.toDate(this.filter.date_end_date);\n                let url = helper.getFilterURL(this.filter);\n                axios.get('/api/gate/pass?page=' + page + url)\n                    .then(response => {\n                        this.gate_passes = response.gate_passes;\n                        this.students = response.filters.students;\n                        this.employees = response.filters.employees;\n                        loader.hide();\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            editGatePass(gate_pass){\n                this.$router.push('/reception/gate/pass/'+gate_pass.uuid+'/edit');\n            },\n            confirmDelete(gate_pass){\n                return diapass => this.deleteGatePass(gate_pass);\n            },\n            deleteGatePass(gate_pass){\n                let loader = this.$loading.show();\n                axios.delete('/api/gate/pass/'+gate_pass.uuid)\n                    .then(response => {\n                        toastr.success(response.message);\n                        this.getGatePasses();\n                        loader.hide();\n                    }).catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            getConfig(config) {\n                return helper.getConfig(config)\n            },\n            print(){\n                let loader = this.$loading.show();\n                axios.post('/api/gate/pass/print',{filter: this.filter})\n                    .then(response => {\n                        let print = window.open(\"/print\");\n                        loader.hide();\n                        print.document.write(response);\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            pdf(){\n                let loader = this.$loading.show();\n                axios.post('/api/gate/pass/pdf',{filter: this.filter})\n                    .then(response => {\n                        loader.hide();\n                        window.open('/download/report/'+response+'?token='+this.authToken);\n                    })\n                    .catch(error => {\n                        loader.hide();\n                        helper.showErrorMsg(error);\n                    });\n            },\n            onStudentSelect(selectedOption){\n                this.filter.student_id.push(selectedOption.id);\n            },\n            onStudentRemove(removedOption){\n                this.filter.student_id.splice(this.filter.student_id.indexOf(removedOption.id), 1);\n            },\n            onEmployeeSelect(selectedOption){\n                this.filter.employee_id.push(selectedOption.id);\n            },\n            onEmployeeRemove(removedOption){\n                this.filter.employee_id.splice(this.filter.employee_id.indexOf(removedOption.id), 1);\n            },\n            getEmployeeDesignationOnDate(employee, date){\n                return helper.getEmployeeDesignationOnDate(employee, date);\n            }\n        },\n        filters: {\n          moment(date) {\n            return helper.formatDate(date);\n          },\n          momentDateTime(date) {\n            return helper.formatDateTime(date);\n          },\n          momentTime(time) {\n            return helper.formatTime(time);\n          }\n        },\n        watch: {\n            'filter.sort_by': function(val){\n                this.getGatePasses();\n            },\n            'filter.order': function(val){\n                this.getGatePasses();\n            },\n            'filter.page_length': function(val){\n                this.getGatePasses();\n            }\n        },\n        computed: {\n            authToken(){\n                return helper.getAuthToken();\n            }\n        }\n    }\n</script>","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"form\",\n    {\n      on: {\n        submit: function ($event) {\n          $event.preventDefault()\n          return _vm.proceed.apply(null, arguments)\n        },\n        keydown: function ($event) {\n          return _vm.gatePassForm.errors.clear($event.target.name)\n        },\n      },\n    },\n    [\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.gate_pass_type\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\n                \"select\",\n                {\n                  directives: [\n                    {\n                      name: \"model\",\n                      rawName: \"v-model\",\n                      value: _vm.gatePassForm.type,\n                      expression: \"gatePassForm.type\",\n                    },\n                  ],\n                  staticClass: \"custom-select col-12\",\n                  on: {\n                    select: function ($event) {\n                      return _vm.gatePassForm.errors.clear(\"type\")\n                    },\n                    change: function ($event) {\n                      var $$selectedVal = Array.prototype.filter\n                        .call($event.target.options, function (o) {\n                          return o.selected\n                        })\n                        .map(function (o) {\n                          var val = \"_value\" in o ? o._value : o.value\n                          return val\n                        })\n                      _vm.$set(\n                        _vm.gatePassForm,\n                        \"type\",\n                        $event.target.multiple\n                          ? $$selectedVal\n                          : $$selectedVal[0]\n                      )\n                    },\n                  },\n                },\n                [\n                  _c(\"option\", { attrs: { value: \"student\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"student.student\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"option\", { attrs: { value: \"employee\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"employee.employee\"))),\n                  ]),\n                ]\n              ),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.gatePassForm, \"prop-name\": \"type\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"row\" }, [\n        _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.gate_pass_date\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"datepicker\", {\n                attrs: {\n                  bootstrapStyling: true,\n                  placeholder: _vm.trans(\"reception.gate_pass_date\"),\n                },\n                on: {\n                  selected: function ($event) {\n                    return _vm.gatePassForm.errors.clear(\"date\")\n                  },\n                },\n                model: {\n                  value: _vm.gatePassForm.date,\n                  callback: function ($$v) {\n                    _vm.$set(_vm.gatePassForm, \"date\", $$v)\n                  },\n                  expression: \"gatePassForm.date\",\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.gatePassForm, \"prop-name\": \"date\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n        _vm._v(\" \"),\n        _vm.loaded\n          ? _c(\"div\", { staticClass: \"col-12 col-sm-4\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"reception.gate_pass_time\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\"timepicker\", {\n                    attrs: {\n                      hour: _vm.time.hour,\n                      minute: _vm.time.minute,\n                      meridiem: _vm.time.meridiem,\n                    },\n                    on: {\n                      \"update:hour\": function ($event) {\n                        return _vm.$set(_vm.time, \"hour\", $event)\n                      },\n                      \"update:minute\": function ($event) {\n                        return _vm.$set(_vm.time, \"minute\", $event)\n                      },\n                      \"update:meridiem\": function ($event) {\n                        return _vm.$set(_vm.time, \"meridiem\", $event)\n                      },\n                    },\n                  }),\n                ],\n                1\n              ),\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.gatePassForm.type == \"student\"\n          ? _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"student.student\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"v-select\",\n                    {\n                      attrs: {\n                        label: \"name\",\n                        name: \"student_id\",\n                        id: \"student_id\",\n                        options: _vm.students,\n                        placeholder: _vm.trans(\"student.select_student\"),\n                      },\n                      on: {\n                        select: _vm.onStudentSelect,\n                        close: function ($event) {\n                          return _vm.gatePassForm.errors.clear(\"student_id\")\n                        },\n                        remove: function ($event) {\n                          _vm.gatePassForm.student_id = \"\"\n                        },\n                      },\n                      model: {\n                        value: _vm.selected_student,\n                        callback: function ($$v) {\n                          _vm.selected_student = $$v\n                        },\n                        expression: \"selected_student\",\n                      },\n                    },\n                    [\n                      !_vm.students.length\n                        ? _c(\n                            \"div\",\n                            {\n                              staticClass: \"multiselect__option\",\n                              attrs: { slot: \"afterList\" },\n                              slot: \"afterList\",\n                            },\n                            [\n                              _vm._v(\n                                \"\\n                        \" +\n                                  _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                  \"\\n                    \"\n                              ),\n                            ]\n                          )\n                        : _vm._e(),\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.gatePassForm,\n                      \"prop-name\": \"student_id\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.gatePassForm.type == \"employee\"\n          ? _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"form-group\" },\n                [\n                  _c(\"label\", { attrs: { for: \"\" } }, [\n                    _vm._v(_vm._s(_vm.trans(\"employee.employee\"))),\n                  ]),\n                  _vm._v(\" \"),\n                  _c(\n                    \"v-select\",\n                    {\n                      attrs: {\n                        label: \"name\",\n                        name: \"employee_id\",\n                        id: \"employee_id\",\n                        options: _vm.employees,\n                        placeholder: _vm.trans(\"employee.select_employee\"),\n                      },\n                      on: {\n                        select: _vm.onEmployeeSelect,\n                        close: function ($event) {\n                          return _vm.gatePassForm.errors.clear(\"employee_id\")\n                        },\n                        remove: function ($event) {\n                          _vm.gatePassForm.employee_id = \"\"\n                        },\n                      },\n                      model: {\n                        value: _vm.selected_employee,\n                        callback: function ($$v) {\n                          _vm.selected_employee = $$v\n                        },\n                        expression: \"selected_employee\",\n                      },\n                    },\n                    [\n                      !_vm.employees.length\n                        ? _c(\n                            \"div\",\n                            {\n                              staticClass: \"multiselect__option\",\n                              attrs: { slot: \"afterList\" },\n                              slot: \"afterList\",\n                            },\n                            [\n                              _vm._v(\n                                \"\\n                        \" +\n                                  _vm._s(_vm.trans(\"general.no_option_found\")) +\n                                  \"\\n                    \"\n                              ),\n                            ]\n                          )\n                        : _vm._e(),\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\"show-error\", {\n                    attrs: {\n                      \"form-name\": _vm.gatePassForm,\n                      \"prop-name\": \"employee_id\",\n                    },\n                  }),\n                ],\n                1\n              ),\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"col-12\" }, [\n          _c(\n            \"div\",\n            { staticClass: \"form-group\" },\n            [\n              _c(\"label\", { attrs: { for: \"\" } }, [\n                _vm._v(_vm._s(_vm.trans(\"reception.gate_pass_reason\"))),\n              ]),\n              _vm._v(\" \"),\n              _c(\"autosize-textarea\", {\n                attrs: {\n                  rows: \"1\",\n                  name: \"reason\",\n                  placeholder: _vm.trans(\"reception.gate_pass_reason\"),\n                },\n                model: {\n                  value: _vm.gatePassForm.reason,\n                  callback: function ($$v) {\n                    _vm.$set(_vm.gatePassForm, \"reason\", $$v)\n                  },\n                  expression: \"gatePassForm.reason\",\n                },\n              }),\n              _vm._v(\" \"),\n              _c(\"show-error\", {\n                attrs: { \"form-name\": _vm.gatePassForm, \"prop-name\": \"reason\" },\n              }),\n            ],\n            1\n          ),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        { staticClass: \"card-footer text-right\" },\n        [\n          _c(\n            \"router-link\",\n            {\n              directives: [\n                {\n                  name: \"show\",\n                  rawName: \"v-show\",\n                  value: _vm.uuid,\n                  expression: \"uuid\",\n                },\n              ],\n              staticClass: \"btn btn-danger waves-effect waves-light\",\n              attrs: { to: \"/reception/gate/pass\" },\n            },\n            [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n          ),\n          _vm._v(\" \"),\n          !_vm.uuid\n            ? _c(\n                \"button\",\n                {\n                  staticClass: \"btn btn-danger waves-effect waves-light\",\n                  attrs: { type: \"button\" },\n                  on: {\n                    click: function ($event) {\n                      return _vm.$emit(\"cancel\")\n                    },\n                  },\n                },\n                [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n              )\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\n            \"button\",\n            {\n              staticClass: \"btn btn-info waves-effect waves-light\",\n              attrs: { type: \"submit\" },\n            },\n            [\n              _vm.uuid\n                ? _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.update\")))])\n                : _c(\"span\", [_vm._v(_vm._s(_vm.trans(\"general.save\")))]),\n            ]\n          ),\n        ],\n        1\n      ),\n    ]\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","var render = function render() {\n  var _vm = this,\n    _c = _vm._self._c\n  return _c(\n    \"div\",\n    [\n      _c(\"div\", { staticClass: \"page-titles\" }, [\n        _c(\"div\", { staticClass: \"row\" }, [\n          _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n            _c(\"h3\", { staticClass: \"text-themecolor\" }, [\n              _vm._v(\n                _vm._s(_vm.trans(\"reception.gate_pass\")) +\n                  \" \\n                    \"\n              ),\n              _vm.gate_passes.total\n                ? _c(\n                    \"span\",\n                    { staticClass: \"card-subtitle d-none d-sm-inline\" },\n                    [\n                      _vm._v(\n                        _vm._s(\n                          _vm.trans(\"general.total_result_found\", {\n                            count: _vm.gate_passes.total,\n                            from: _vm.gate_passes.from,\n                            to: _vm.gate_passes.to,\n                          })\n                        )\n                      ),\n                    ]\n                  )\n                : _c(\n                    \"span\",\n                    { staticClass: \"card-subtitle d-none d-sm-inline\" },\n                    [_vm._v(_vm._s(_vm.trans(\"general.no_result_found\")))]\n                  ),\n            ]),\n          ]),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"col-12 col-sm-6\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"action-buttons pull-right\" },\n              [\n                _vm.gate_passes.total &&\n                !_vm.showCreatePanel &&\n                _vm.hasPermission(\"create-gate-pass\")\n                  ? _c(\n                      \"button\",\n                      {\n                        directives: [\n                          {\n                            name: \"tooltip\",\n                            rawName: \"v-tooltip\",\n                            value: _vm.trans(\"general.add_new\"),\n                            expression: \"trans('general.add_new')\",\n                          },\n                        ],\n                        staticClass: \"btn btn-info btn-sm\",\n                        on: {\n                          click: function ($event) {\n                            _vm.showCreatePanel = !_vm.showCreatePanel\n                          },\n                        },\n                      },\n                      [\n                        _c(\"i\", { staticClass: \"fas fa-plus\" }),\n                        _vm._v(\" \"),\n                        _c(\"span\", { staticClass: \"d-none d-sm-inline\" }, [\n                          _vm._v(\n                            _vm._s(_vm.trans(\"reception.add_new_gate_pass\"))\n                          ),\n                        ]),\n                      ]\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                !_vm.showFilterPanel\n                  ? _c(\n                      \"button\",\n                      {\n                        staticClass: \"btn btn-info btn-sm\",\n                        on: {\n                          click: function ($event) {\n                            _vm.showFilterPanel = !_vm.showFilterPanel\n                          },\n                        },\n                      },\n                      [\n                        _c(\"i\", { staticClass: \"fas fa-filter\" }),\n                        _vm._v(\" \"),\n                        _c(\"span\", { staticClass: \"d-none d-sm-inline\" }, [\n                          _vm._v(_vm._s(_vm.trans(\"general.filter\"))),\n                        ]),\n                      ]\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"sort-by\", {\n                  attrs: {\n                    \"order-by-options\": _vm.orderByOptions,\n                    \"sort-by\": _vm.filter.sort_by,\n                    order: _vm.filter.order,\n                  },\n                  on: {\n                    updateSortBy: (value) => {\n                      _vm.filter.sort_by = value\n                    },\n                    updateOrder: (value) => {\n                      _vm.filter.order = value\n                    },\n                  },\n                }),\n                _vm._v(\" \"),\n                _c(\"div\", { staticClass: \"btn-group\" }, [\n                  _c(\n                    \"button\",\n                    {\n                      directives: [\n                        {\n                          name: \"tooltip\",\n                          rawName: \"v-tooltip\",\n                          value: _vm.trans(\"general.more_option\"),\n                          expression: \"trans('general.more_option')\",\n                        },\n                      ],\n                      staticClass:\n                        \"btn btn-info btn-sm dropdown-toggle no-caret\",\n                      attrs: {\n                        type: \"button\",\n                        role: \"menu\",\n                        id: \"moreOption\",\n                        \"data-toggle\": \"dropdown\",\n                        \"aria-haspopup\": \"true\",\n                        \"aria-expanded\": \"false\",\n                      },\n                    },\n                    [\n                      _c(\"i\", { staticClass: \"fas fa-ellipsis-h\" }),\n                      _vm._v(\" \"),\n                      _c(\"span\", { staticClass: \"d-none d-sm-inline\" }),\n                    ]\n                  ),\n                  _vm._v(\" \"),\n                  _c(\n                    \"div\",\n                    {\n                      class: [\n                        \"dropdown-menu\",\n                        _vm.getConfig(\"direction\") == \"ltr\"\n                          ? \"dropdown-menu-right\"\n                          : \"\",\n                      ],\n                      attrs: { \"aria-labelledby\": \"moreOption\" },\n                    },\n                    [\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"dropdown-item custom-dropdown\",\n                          on: { click: _vm.print },\n                        },\n                        [\n                          _c(\"i\", { staticClass: \"fas fa-print\" }),\n                          _vm._v(\" \" + _vm._s(_vm.trans(\"general.print\"))),\n                        ]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"dropdown-item custom-dropdown\",\n                          on: { click: _vm.pdf },\n                        },\n                        [\n                          _c(\"i\", { staticClass: \"fas fa-file-pdf\" }),\n                          _vm._v(\n                            \" \" + _vm._s(_vm.trans(\"general.generate_pdf\"))\n                          ),\n                        ]\n                      ),\n                    ]\n                  ),\n                ]),\n                _vm._v(\" \"),\n                _c(\"help-button\", {\n                  on: {\n                    clicked: function ($event) {\n                      _vm.help_topic = \"reception.gate-pass\"\n                    },\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n        ]),\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"div\",\n        { staticClass: \"container-fluid\" },\n        [\n          _c(\"transition\", { attrs: { name: \"fade\" } }, [\n            _vm.showFilterPanel\n              ? _c(\"div\", { staticClass: \"card card-form\" }, [\n                  _c(\"div\", { staticClass: \"card-body\" }, [\n                    _c(\"h4\", { staticClass: \"card-title\" }, [\n                      _vm._v(_vm._s(_vm.trans(\"general.filter\"))),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"div\", { staticClass: \"row\" }, [\n                      _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                        _c(\"div\", { staticClass: \"form-group\" }, [\n                          _c(\"label\", { attrs: { for: \"\" } }, [\n                            _vm._v(\n                              _vm._s(_vm.trans(\"reception.gate_pass_type\"))\n                            ),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\n                            \"select\",\n                            {\n                              directives: [\n                                {\n                                  name: \"model\",\n                                  rawName: \"v-model\",\n                                  value: _vm.filter.type,\n                                  expression: \"filter.type\",\n                                },\n                              ],\n                              staticClass: \"custom-select col-12\",\n                              on: {\n                                change: function ($event) {\n                                  var $$selectedVal = Array.prototype.filter\n                                    .call($event.target.options, function (o) {\n                                      return o.selected\n                                    })\n                                    .map(function (o) {\n                                      var val =\n                                        \"_value\" in o ? o._value : o.value\n                                      return val\n                                    })\n                                  _vm.$set(\n                                    _vm.filter,\n                                    \"type\",\n                                    $event.target.multiple\n                                      ? $$selectedVal\n                                      : $$selectedVal[0]\n                                  )\n                                },\n                              },\n                            },\n                            [\n                              _c(\n                                \"option\",\n                                { attrs: { value: \"\", selected: \"\" } },\n                                [\n                                  _vm._v(\n                                    _vm._s(_vm.trans(\"general.select_one\"))\n                                  ),\n                                ]\n                              ),\n                              _vm._v(\" \"),\n                              _vm._l(_vm.types, function (option) {\n                                return _c(\n                                  \"option\",\n                                  { domProps: { value: option.value } },\n                                  [\n                                    _vm._v(\n                                      \"\\n                                    \" +\n                                        _vm._s(option.text) +\n                                        \"\\n                                  \"\n                                    ),\n                                  ]\n                                )\n                              }),\n                            ],\n                            2\n                          ),\n                        ]),\n                      ]),\n                      _vm._v(\" \"),\n                      _vm.filter.type == \"student\"\n                        ? _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                            _c(\n                              \"div\",\n                              { staticClass: \"form-group\" },\n                              [\n                                _c(\"label\", { attrs: { for: \"\" } }, [\n                                  _vm._v(_vm._s(_vm.trans(\"student.student\"))),\n                                ]),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"v-select\",\n                                  {\n                                    attrs: {\n                                      label: \"name\",\n                                      \"track-by\": \"id\",\n                                      name: \"student_id\",\n                                      id: \"student_id\",\n                                      options: _vm.students,\n                                      placeholder: _vm.trans(\n                                        \"student.select_student\"\n                                      ),\n                                      multiple: true,\n                                      \"close-on-select\": false,\n                                      \"clear-on-select\": false,\n                                      \"hide-selected\": true,\n                                      selected: _vm.selected_students,\n                                    },\n                                    on: {\n                                      select: _vm.onStudentSelect,\n                                      remove: _vm.onStudentRemove,\n                                    },\n                                    model: {\n                                      value: _vm.selected_students,\n                                      callback: function ($$v) {\n                                        _vm.selected_students = $$v\n                                      },\n                                      expression: \"selected_students\",\n                                    },\n                                  },\n                                  [\n                                    !_vm.students.length\n                                      ? _c(\n                                          \"div\",\n                                          {\n                                            staticClass: \"multiselect__option\",\n                                            attrs: { slot: \"afterList\" },\n                                            slot: \"afterList\",\n                                          },\n                                          [\n                                            _vm._v(\n                                              \"\\n                                        \" +\n                                                _vm._s(\n                                                  _vm.trans(\n                                                    \"general.no_option_found\"\n                                                  )\n                                                ) +\n                                                \"\\n                                    \"\n                                            ),\n                                          ]\n                                        )\n                                      : _vm._e(),\n                                  ]\n                                ),\n                              ],\n                              1\n                            ),\n                          ])\n                        : _vm._e(),\n                      _vm._v(\" \"),\n                      _vm.filter.type == \"employee\"\n                        ? _c(\"div\", { staticClass: \"col-12 col-sm-3\" }, [\n                            _c(\n                              \"div\",\n                              { staticClass: \"form-group\" },\n                              [\n                                _c(\"label\", { attrs: { for: \"\" } }, [\n                                  _vm._v(\n                                    _vm._s(_vm.trans(\"employee.employee\"))\n                                  ),\n                                ]),\n                                _vm._v(\" \"),\n                                _c(\n                                  \"v-select\",\n                                  {\n                                    attrs: {\n                                      label: \"name\",\n                                      \"track-by\": \"id\",\n                                      name: \"employee_id\",\n                                      id: \"employee_id\",\n                                      options: _vm.employees,\n                                      placeholder: _vm.trans(\n                                        \"employee.select_employee\"\n                                      ),\n                                      multiple: true,\n                                      \"close-on-select\": false,\n                                      \"clear-on-select\": false,\n                                      \"hide-selected\": true,\n                                      selected: _vm.selected_employees,\n                                    },\n                                    on: {\n                                      select: _vm.onEmployeeSelect,\n                                      remove: _vm.onEmployeeRemove,\n                                    },\n                                    model: {\n                                      value: _vm.selected_employees,\n                                      callback: function ($$v) {\n                                        _vm.selected_employees = $$v\n                                      },\n                                      expression: \"selected_employees\",\n                                    },\n                                  },\n                                  [\n                                    !_vm.employees.length\n                                      ? _c(\n                                          \"div\",\n                                          {\n                                            staticClass: \"multiselect__option\",\n                                            attrs: { slot: \"afterList\" },\n                                            slot: \"afterList\",\n                                          },\n                                          [\n                                            _vm._v(\n                                              \"\\n                                        \" +\n                                                _vm._s(\n                                                  _vm.trans(\n                                                    \"general.no_option_found\"\n                                                  )\n                                                ) +\n                                                \"\\n                                    \"\n                                            ),\n                                          ]\n                                        )\n                                      : _vm._e(),\n                                  ]\n                                ),\n                              ],\n                              1\n                            ),\n                          ])\n                        : _vm._e(),\n                      _vm._v(\" \"),\n                      _c(\n                        \"div\",\n                        { staticClass: \"col-12 col-sm-6\" },\n                        [\n                          _c(\"date-range-picker\", {\n                            attrs: {\n                              \"start-date\": _vm.filter.date_start_date,\n                              \"end-date\": _vm.filter.date_end_date,\n                              label: _vm.trans(\"general.date_between\"),\n                            },\n                            on: {\n                              \"update:startDate\": function ($event) {\n                                return _vm.$set(\n                                  _vm.filter,\n                                  \"date_start_date\",\n                                  $event\n                                )\n                              },\n                              \"update:start-date\": function ($event) {\n                                return _vm.$set(\n                                  _vm.filter,\n                                  \"date_start_date\",\n                                  $event\n                                )\n                              },\n                              \"update:endDate\": function ($event) {\n                                return _vm.$set(\n                                  _vm.filter,\n                                  \"date_end_date\",\n                                  $event\n                                )\n                              },\n                              \"update:end-date\": function ($event) {\n                                return _vm.$set(\n                                  _vm.filter,\n                                  \"date_end_date\",\n                                  $event\n                                )\n                              },\n                            },\n                          }),\n                        ],\n                        1\n                      ),\n                    ]),\n                    _vm._v(\" \"),\n                    _c(\"div\", { staticClass: \"card-footer text-right\" }, [\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-danger\",\n                          attrs: { type: \"button\" },\n                          on: {\n                            click: function ($event) {\n                              _vm.showFilterPanel = false\n                            },\n                          },\n                        },\n                        [_vm._v(_vm._s(_vm.trans(\"general.cancel\")))]\n                      ),\n                      _vm._v(\" \"),\n                      _c(\n                        \"button\",\n                        {\n                          staticClass: \"btn btn-info waves-effect waves-light\",\n                          attrs: { type: \"button\" },\n                          on: { click: _vm.getGatePasses },\n                        },\n                        [_vm._v(_vm._s(_vm.trans(\"general.filter\")))]\n                      ),\n                    ]),\n                  ]),\n                ])\n              : _vm._e(),\n          ]),\n          _vm._v(\" \"),\n          _vm.hasPermission(\"create-gate-pass\")\n            ? _c(\"transition\", { attrs: { name: \"fade\" } }, [\n                _vm.showCreatePanel\n                  ? _c(\"div\", { staticClass: \"card card-form\" }, [\n                      _c(\n                        \"div\",\n                        { staticClass: \"card-body\" },\n                        [\n                          _c(\"h4\", { staticClass: \"card-title\" }, [\n                            _vm._v(\n                              _vm._s(_vm.trans(\"reception.add_new_gate_pass\"))\n                            ),\n                          ]),\n                          _vm._v(\" \"),\n                          _c(\"gate-pass-form\", {\n                            on: {\n                              completed: _vm.getGatePasses,\n                              cancel: function ($event) {\n                                _vm.showCreatePanel = !_vm.showCreatePanel\n                              },\n                            },\n                          }),\n                        ],\n                        1\n                      ),\n                    ])\n                  : _vm._e(),\n              ])\n            : _vm._e(),\n          _vm._v(\" \"),\n          _c(\"div\", { staticClass: \"card\" }, [\n            _c(\n              \"div\",\n              { staticClass: \"card-body\" },\n              [\n                _vm.gate_passes.total\n                  ? _c(\"div\", { staticClass: \"table-responsive\" }, [\n                      _c(\"table\", { staticClass: \"table table-sm\" }, [\n                        _c(\"thead\", [\n                          _c(\"tr\", [\n                            _c(\"th\", [_vm._v(\"#\")]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(\n                                _vm._s(_vm.trans(\"reception.gate_pass_detail\"))\n                              ),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(\n                                _vm._s(_vm.trans(\"reception.gate_pass_date\"))\n                              ),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(\n                                _vm._s(_vm.trans(\"reception.gate_pass_time\"))\n                              ),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(\n                                _vm._s(_vm.trans(\"reception.gate_pass_reason\"))\n                              ),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", [\n                              _vm._v(_vm._s(_vm.trans(\"general.entry_by\"))),\n                            ]),\n                            _vm._v(\" \"),\n                            _c(\"th\", { staticClass: \"table-option\" }, [\n                              _vm._v(_vm._s(_vm.trans(\"general.action\"))),\n                            ]),\n                          ]),\n                        ]),\n                        _vm._v(\" \"),\n                        _c(\n                          \"tbody\",\n                          _vm._l(_vm.gate_passes.data, function (gate_pass) {\n                            return _c(\"tr\", [\n                              _c(\"td\", {\n                                domProps: { textContent: _vm._s(gate_pass.id) },\n                              }),\n                              _vm._v(\" \"),\n                              _c(\n                                \"td\",\n                                [\n                                  gate_pass.type == \"student\"\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\"student.name\") +\n                                                \": \" +\n                                                _vm.getStudentName(\n                                                  gate_pass.student\n                                                )\n                                            ) +\n                                            \" \"\n                                        ),\n                                        _c(\"br\"),\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\n                                                \"student.first_guardian_name\"\n                                              ) +\n                                                \": \" +\n                                                gate_pass.student.parent\n                                                  .first_guardian_name\n                                            ) +\n                                            \" \"\n                                        ),\n                                        _c(\"br\"),\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\"student.mother_name\") +\n                                                \": \" +\n                                                gate_pass.student.parent\n                                                  .mother_name\n                                            ) +\n                                            \" \"\n                                        ),\n                                        _c(\"br\"),\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.trans(\n                                                \"student.contact_number\"\n                                              ) +\n                                                \": \" +\n                                                gate_pass.student.contact_number\n                                            ) +\n                                            \" \"\n                                        ),\n                                        _c(\"br\"),\n                                      ]\n                                    : _vm._e(),\n                                  _vm._v(\" \"),\n                                  gate_pass.type == \"employee\"\n                                    ? [\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.getEmployeeName(\n                                                gate_pass.employee\n                                              )\n                                            ) +\n                                            \" \"\n                                        ),\n                                        _c(\"br\"),\n                                        _vm._v(\n                                          \"\\n                                        \" +\n                                            _vm._s(\n                                              _vm.getEmployeeDesignationOnDate(\n                                                gate_pass.employee,\n                                                gate_pass.date\n                                              )\n                                            ) +\n                                            \"\\n                                    \"\n                                        ),\n                                      ]\n                                    : _vm._e(),\n                                ],\n                                2\n                              ),\n                              _vm._v(\" \"),\n                              _c(\"td\", [\n                                _vm._v(\n                                  _vm._s(_vm._f(\"moment\")(gate_pass.date))\n                                ),\n                              ]),\n                              _vm._v(\" \"),\n                              _c(\"td\", [\n                                _vm._v(\n                                  _vm._s(_vm._f(\"momentTime\")(gate_pass.time))\n                                ),\n                              ]),\n                              _vm._v(\" \"),\n                              _c(\"td\", [_vm._v(_vm._s(gate_pass.reason))]),\n                              _vm._v(\" \"),\n                              _c(\"td\", [\n                                _vm._v(\n                                  _vm._s(\n                                    _vm.getEmployeeName(gate_pass.user.employee)\n                                  ) + \" \"\n                                ),\n                                _c(\"br\"),\n                                _vm._v(\n                                  \" \" +\n                                    _vm._s(\n                                      _vm.getEmployeeDesignationOnDate(\n                                        gate_pass.user.employee,\n                                        gate_pass.date\n                                      )\n                                    )\n                                ),\n                              ]),\n                              _vm._v(\" \"),\n                              _c(\"td\", { staticClass: \"table-option\" }, [\n                                _c(\"div\", { staticClass: \"btn-group\" }, [\n                                  _c(\n                                    \"a\",\n                                    {\n                                      directives: [\n                                        {\n                                          name: \"tooltip\",\n                                          rawName: \"v-tooltip\",\n                                          value: _vm.trans(\"general.print\"),\n                                          expression: \"trans('general.print')\",\n                                        },\n                                      ],\n                                      staticClass: \"btn btn-success btn-sm\",\n                                      attrs: {\n                                        href: `/reception/gate/pass/${gate_pass.uuid}/print?token=${_vm.authToken}`,\n                                        target: \"_blank\",\n                                      },\n                                    },\n                                    [_c(\"i\", { staticClass: \"fas fa-print\" })]\n                                  ),\n                                  _vm._v(\" \"),\n                                  _vm.hasPermission(\"edit-gate-pass\")\n                                    ? _c(\n                                        \"button\",\n                                        {\n                                          directives: [\n                                            {\n                                              name: \"tooltip\",\n                                              rawName: \"v-tooltip\",\n                                              value: _vm.trans(\n                                                \"reception.edit_gate_pass\"\n                                              ),\n                                              expression:\n                                                \"trans('reception.edit_gate_pass')\",\n                                            },\n                                          ],\n                                          staticClass: \"btn btn-info btn-sm\",\n                                          on: {\n                                            click: function ($event) {\n                                              $event.preventDefault()\n                                              return _vm.editGatePass(gate_pass)\n                                            },\n                                          },\n                                        },\n                                        [\n                                          _c(\"i\", {\n                                            staticClass: \"fas fa-edit\",\n                                          }),\n                                        ]\n                                      )\n                                    : _vm._e(),\n                                  _vm._v(\" \"),\n                                  _vm.hasPermission(\"delete-gate-pass\")\n                                    ? _c(\n                                        \"button\",\n                                        {\n                                          directives: [\n                                            {\n                                              name: \"confirm\",\n                                              rawName: \"v-confirm\",\n                                              value: {\n                                                ok: _vm.confirmDelete(\n                                                  gate_pass\n                                                ),\n                                              },\n                                              expression:\n                                                \"{ok: confirmDelete(gate_pass)}\",\n                                            },\n                                            {\n                                              name: \"tooltip\",\n                                              rawName: \"v-tooltip\",\n                                              value: _vm.trans(\n                                                \"reception.delete_gate_pass\"\n                                              ),\n                                              expression:\n                                                \"trans('reception.delete_gate_pass')\",\n                                            },\n                                          ],\n                                          key: gate_pass.id,\n                                          staticClass: \"btn btn-danger btn-sm\",\n                                        },\n                                        [\n                                          _c(\"i\", {\n                                            staticClass: \"fas fa-trash\",\n                                          }),\n                                        ]\n                                      )\n                                    : _vm._e(),\n                                ]),\n                              ]),\n                            ])\n                          }),\n                          0\n                        ),\n                      ]),\n                    ])\n                  : _vm._e(),\n                _vm._v(\" \"),\n                !_vm.gate_passes.total\n                  ? _c(\n                      \"module-info\",\n                      {\n                        attrs: {\n                          module: \"reception\",\n                          title: \"gate_pass_module_title\",\n                          description: \"gate_pass_module_description\",\n                          icon: \"list\",\n                        },\n                      },\n                      [\n                        _c(\"div\", { attrs: { slot: \"btn\" }, slot: \"btn\" }, [\n                          !_vm.showCreatePanel &&\n                          _vm.hasPermission(\"create-gate-pass\")\n                            ? _c(\n                                \"button\",\n                                {\n                                  staticClass: \"btn btn-info btn-md\",\n                                  on: {\n                                    click: function ($event) {\n                                      _vm.showCreatePanel = !_vm.showCreatePanel\n                                    },\n                                  },\n                                },\n                                [\n                                  _c(\"i\", { staticClass: \"fas fa-plus\" }),\n                                  _vm._v(\n                                    \" \" + _vm._s(_vm.trans(\"general.add_new\"))\n                                  ),\n                                ]\n                              )\n                            : _vm._e(),\n                        ]),\n                      ]\n                    )\n                  : _vm._e(),\n                _vm._v(\" \"),\n                _c(\"pagination-record\", {\n                  attrs: {\n                    \"page-length\": _vm.filter.page_length,\n                    records: _vm.gate_passes,\n                  },\n                  on: {\n                    \"update:pageLength\": function ($event) {\n                      return _vm.$set(_vm.filter, \"page_length\", $event)\n                    },\n                    \"update:page-length\": function ($event) {\n                      return _vm.$set(_vm.filter, \"page_length\", $event)\n                    },\n                    updateRecords: _vm.getGatePasses,\n                  },\n                }),\n              ],\n              1\n            ),\n          ]),\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\"right-panel\", { attrs: { topic: _vm.help_topic } }),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import { render, staticRenderFns } from \"./form.vue?vue&type=template&id=058d1282&\"\nimport script from \"./form.vue?vue&type=script&lang=js&\"\nexport * from \"./form.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('058d1282')) {\n      api.createRecord('058d1282', component.options)\n    } else {\n      api.reload('058d1282', component.options)\n    }\n    module.hot.accept(\"./form.vue?vue&type=template&id=058d1282&\", function () {\n      api.rerender('058d1282', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/reception/gate-pass/form.vue\"\nexport default component.exports","import { render, staticRenderFns } from \"./index.vue?vue&type=template&id=10959567&\"\nimport script from \"./index.vue?vue&type=script&lang=js&\"\nexport * from \"./index.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"E:\\\\Work_shop\\\\laragon\\\\www\\\\Yogaschool\\\\node_modules\\\\vue-hot-reload-api\\\\dist\\\\index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('10959567')) {\n      api.createRecord('10959567', component.options)\n    } else {\n      api.reload('10959567', component.options)\n    }\n    module.hot.accept(\"./index.vue?vue&type=template&id=10959567&\", function () {\n      api.rerender('10959567', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"resources/js/views/reception/gate-pass/index.vue\"\nexport default component.exports","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=script&lang=js&\"","import mod from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=script&lang=js&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./form.vue?vue&type=template&id=058d1282&\"","export * from \"-!../../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-5.use[0]!../../../../../node_modules/vue-loader/lib/loaders/templateLoader.js??ruleSet[1].rules[2]!../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./index.vue?vue&type=template&id=10959567&\""],"names":[],"sourceRoot":""}